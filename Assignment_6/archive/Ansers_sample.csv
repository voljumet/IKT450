Id,OwnerUserId,CreationDate,ParentId,Score,Body
497,50,2008-08-02T16:56:53Z,469,4,"<p>open up a terminal (Applications-&gt;Utilities-&gt;Terminal) and type this in:</p>

<pre><code>locate InsertFontHere<br></code></pre>

<p>This will spit out every file that has the name you want.</p>

<p>Warning: there may be alot to wade through.</p>"
518,153,2008-08-02T17:42:28Z,469,2,"<p>I haven't been able to find anything that does this directly.  I think you'll have to iterate through the various font folders on the system: <code>/System/Library/Fonts</code>, <code>/Library/Fonts</code>, and there can probably be a user-level directory as well <code>~/Library/Fonts</code>.</p>
"
536,161,2008-08-02T18:49:07Z,502,9,"<p>You can use ImageMagick's convert utility for this, see some examples in <a href=""https://web.archive.org/web/20120413111338/http://studio.imagemagick.org/pipermail/magick-users/2002-May/002636.html"" rel=""nofollow"">http://studio.imagemagick.org/pipermail/magick-users/2002-May/002636.html</a>
:</p>

<blockquote>
<pre><code>Convert taxes.pdf taxes.jpg 
</code></pre>
  
  <p>Will convert a two page PDF file into [2] jpeg files: taxes.jpg.0,
  taxes.jpg.1</p>
  
  <p>I can also convert these JPEGS to a thumbnail as follows:</p>

<pre><code>convert -size 120x120 taxes.jpg.0 -geometry 120x120 +profile '*' thumbnail.jpg
</code></pre>
  
  <p>I can even convert the PDF directly to a jpeg thumbnail as follows:</p>

<pre><code>convert -size 120x120 taxes.pdf -geometry 120x120 +profile '*' thumbnail.jpg
</code></pre>
  
  <p>This will result in a thumbnail.jpg.0 and thumbnail.jpg.1 for the two
  pages.</p>
</blockquote>
"
538,156,2008-08-02T18:56:56Z,535,23,"<p>One possibility is Hudson.  It's written in Java, but there's integration with Python projects:</p>

<blockquote>
  <p><a href=""http://redsolo.blogspot.com/2007/11/hudson-embraces-python.html"" rel=""nofollow"">Hudson embraces Python</a></p>
</blockquote>

<p>I've never tried it myself, however.</p>

<p>(<strong>Update</strong>, Sept. 2011: After a trademark dispute Hudson has been renamed to <a href=""http://jenkins-ci.org/"" rel=""nofollow"">Jenkins</a>.)</p>
"
541,157,2008-08-02T19:06:40Z,535,20,"<p>We run <a href=""http://buildbot.net/trac"">Buildbot - Trac</a> at work, I haven't used it too much since my code base isn't part of the release cycle yet. But we run the tests on different environments (OSX/Linux/Win) and it sends emails --and it's written in python.</p>"
595,116,2008-08-03T01:17:36Z,594,25,"<p>The canonical way is to use the built-in cursor iterator.</p>

<pre><code>curs.execute('select * from people')
for row in curs:
    print row
</code></pre>

<hr>

<p>You can use <code>fetchall()</code> to get all rows at once.</p>

<pre><code>for row in curs.fetchall():
    print row
</code></pre>

<p>It can be convenient to use this to create a Python list containing the values returned:</p>

<pre><code>curs.execute('select first_name from people')
names = [row[0] for row in curs.fetchall()]
</code></pre>

<p>This can be useful for smaller result sets, but can have bad side effects if the result set is large.</p>

<ul>
<li><p>You have to wait for the entire result set to be returned to
your client process.</p></li>
<li><p>You may eat up a lot of memory in your client to hold
the built-up list.</p></li>
<li><p>It may take a while for Python to construct and deconstruct the
list which you are going to immediately discard anyways.</p></li>
</ul>

<hr>

<p>If you know there's a single row being returned in the result set you can call <code>fetchone()</code> to get the single row.</p>

<pre><code>curs.execute('select max(x) from t')
maxValue = curs.fetchone()[0]
</code></pre>

<hr>

<p>Finally, you can loop over the result set fetching one row at a time.  In general, there's no particular advantage in doing this over using the iterator.</p>

<pre><code>row = curs.fetchone()
while row:
    print row
    row = curs.fetchone()
</code></pre>
"
660,197,2008-08-03T12:09:18Z,535,14,"<p>Second the Buildbot - Trac integration. You can find more information about the integration on the <a href=""http://buildbot.net/trac/wiki/BuildbotAndTrac"">Buildbot website</a>. At my previous job, we wrote and used the plugin they mention (tracbb).
What the plugin does is rewriting all of the Buildbot urls so you can use Buildbot from within Trac. (http://example.com/tracbb).</p>

<p>The really nice thing about Buildbot is that the configuration is written in Python. You can integrate your own Python code directly to the configuration. It's also very easy to write your own BuildSteps to execute specific tasks.</p>

<p>We used BuildSteps to get the source from SVN, pull the dependencies, publish test results to WebDAV, etcetera.</p>

<p>I wrote an X10 interface so we could send signals with build results. When the build failed, we switched on a red lava lamp. When the build succeeded, a green lava lamp switched on. Good times :-)</p>"
701,111,2008-08-03T14:30:50Z,683,3,"<p>No, you were not dreaming.  Python has a pretty excellent list comprehension system that lets you manipulate lists pretty elegantly, and depending on exactly what you want to accomplish, this can be done a couple of ways.  In essence, what you're doing is saying ""For item in list if criteria.matches"", and from that you can just iterate through the results or dump the results into a new list.</p>

<p>I'm going to crib an example from <a href=""http://diveintopython.net/functional_programming/filtering_lists.html"" rel=""nofollow"">Dive Into Python</a> here, because it's pretty elegant and they're smarter than I am.  Here they're getting a list of files in a directory, then filtering the list for all files that match a regular expression criteria.</p>

<blockquote>
<pre><code>    files = os.listdir(path)                               
    test = re.compile(""test\.py$"", re.IGNORECASE)          
    files = [f for f in files if test.search(f)]
</code></pre>
</blockquote>

<p>You could do this without regular expressions, for your example, for anything where your expression at the end returns true for a match.  There are other options like using the filter() function, but if I were going to choose, I'd go with this.</p>

<p>Eric Sipple</p>
"
735,145,2008-08-03T15:47:22Z,683,-2,"<p>I think:</p>

<pre><code>#!/bin/python<br>bar in dict(Foo)<br></code></pre>

<p>Is what you are thinking of.  When trying to see if a certain key exists within a dictionary in python (python's version of a hash table) there are two ways to check.  First is the <strong><code>has_key()</code></strong> method attached to the dictionary and second is the example given above.  It will return a boolean value.</p>

<p>That should answer your question.</p>

<p>And now a little off topic to tie this in to the <em>list comprehension</em> answer previously given (for a bit more clarity).  <em>List Comprehensions</em> construct a list from a basic <em>for loop</em> with modifiers.  As an example (to clarify slightly), a way to use the <code>in dict</code> language construct in a _list comprehension_:</p>

<p>Say you have a two dimensional dictionary <strong><code>foo</code></strong> and you only want the second dimension dictionaries which contain the key <strong><code>bar</code></strong>.  A relatively straightforward way to do so would be to use a <em>list comprehension</em> with a conditional as follows:</p>

<pre><code>#!/bin/python<br>baz = dict([(key, value) for key, value in foo if bar in value])<br></code></pre>

<p>Note the <strong><code>if bar in value</code></strong> at the end of the statement<strong>, this is a modifying clause which tells the <em>list comprehension</em> to only keep those key-value pairs which meet the conditional.</strong>  In this case <strong><code>baz</code></strong> is a new dictionary which contains only the dictionaries from foo which contain bar (Hopefully I didn't miss anything in that code example... you may have to take a look at the list comprehension documentation found in <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"" rel=""nofollow"">docs.python.org tutorials</a> and at <a href=""http://www.secnetix.de/olli/Python/list_comprehensions.hawk"" rel=""nofollow"">secnetix.de</a>, both sites are good references if you have questions in the future.).</p>"
745,154,2008-08-03T15:59:19Z,683,8,"<p>Are you looking to get a list of objects that have a certain attribute? If so, a <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"">list comprehension</a> is the right way to do this.</p>

<pre><code>result = [obj for obj in listOfObjs if hasattr(obj, 'attributeName')]<br></code></pre>"
750,199,2008-08-03T16:13:29Z,683,2,"<p>What I was thinking of can be achieved using list comprehensions, but I thought that there was a function that did this in a slightly neater way.</p>

<p>i.e. 'bar' is a list of objects, all of which have the attribute 'id'</p>

<p>The mythical functional way:</p>

<pre><code>foo = 12<br>foo in iter_attr(bar, 'id')</code></pre>

<p>The list comprehension way:</p>

<pre><code>foo = 12<br>foo in [obj.id for obj in bar]</code></pre>

<p>In retrospect the list comprehension way is pretty neat anyway.</p>"
764,NA,2008-08-03T17:40:25Z,742,0,"<p>Sounds to me like you're trying to combine things that shouldn't be combined.  If you need to do different processing in your view depending on if it's a User or Group object you're trying to look at then you should use two different view functions.</p>

<p>On the other hand there can be common idioms you'd want to extract out of your object_detail type views... perhaps you could use a decorator or just helper functions?</p>

<p>-Dan</p>"
777,150,2008-08-03T18:32:27Z,766,5,"<p>I don't have any experience with <a href=""http://www.SiteGround.com"" rel=""nofollow"">http://www.SiteGround.com</a> as a web host personally.  </p>

<p>This is just a guess, but it's common for a shared host to support Python and MySQL with the MySQLdb module (e.g., GoDaddy does this).  Try the following CGI script to see if MySQLdb is installed.</p>

<pre><code>#!/usr/bin/python<br><br>module_name = 'MySQLdb'<br>head = '''Content-Type: text/html<br><br>%s is ''' % module_name<br><br>try:<br>    __import__(module_name)<br>    print head + 'installed'<br>except ImportError:<br>    print head + 'not installed'<br></code></pre>"
783,189,2008-08-03T18:40:09Z,773,52,"<p>Can you show us your code?</p>

<p>The example on the Python docs is quite straightforward:</p>

<pre><code>groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
    groups.append(list(g))      # Store group iterator as a list
    uniquekeys.append(k)
</code></pre>

<p>So in your case, data is a list of nodes, keyfunc is where the logic of your criteria function goes and then <code>groupby()</code> groups the data.</p>

<p>You must be careful to <strong>sort the data</strong> by the criteria before you call <code>groupby</code> or it won't work. <code>groupby</code> method actually just iterates through a list and whenever the key changes it creates a new group.</p>
"
802,1384652,2008-08-03T20:07:05Z,766,4,"<p>I uploaded it and got an internal error</p>

<pre><code>Premature end of script headers<br></code></pre>

<p>After much playing around, I found that if I had</p>

<pre><code>import cgi<br>import cgitb; cgitb.enable()<br>import MySQLdb<br></code></pre>

<p>It would give me a much more useful answer and say that it was not installed, you can see it yourself -> <a href=""http://woarl.com/db.py"" rel=""nofollow"">http://woarl.com/db.py</a></p>

<p>Oddly enough, this would produce an error</p>

<pre><code>import MySQLdb<br>import cgi<br>import cgitb; cgitb.enable()<br></code></pre>

<p>I looked at some of the other files I had up there and it seems that library was one of the ones I had already tried.</p>"
982,200,2008-08-04T02:31:13Z,972,14,"<p>In Python monkey patching generally works by overwriting a class or functions signature with your own. Below is an example from the <a href=""http://wiki.zope.org/zope2/MonkeyPatch"">Zope Wiki</a>:</p>

<pre><code>from SomeOtherProduct.SomeModule import SomeClass<br>def speak(self):<br>   return ""ook ook eee eee eee!""<br>SomeClass.speak = speak<br></code></pre>

<p>That code will overwrite/create a method called speak on the class. In Jeff Atwood's <a href=""http://www.codinghorror.com/blog/archives/001151.html"">recent post on monkey patching</a>. He shows an example in C# 3.0 which is the current language I use for work.</p>"
984,122,2008-08-04T02:36:40Z,972,-6,"<p>I don't know Python syntax, but I know Ruby can do it, and it is rather trivial.  Let's say you want to add a method to Array that prints the length to standard out:</p>

<pre><code>class Array<br>  def print_length<br>    puts length<br>  end<br>end<br></code></pre>

<p>If you don't want to modify the whole class, you can just add the method to a single instance of the array, and no other arrays will have the method:</p>

<pre><code>array = [1, 2, 3]<br>def array.print_length<br>  puts length<br>end<br></code></pre>

<p>Just be aware of the issues involved in using this feature.  Jeff Atwood actually <a href=""http://www.codinghorror.com/blog/archives/001151.html"" rel=""nofollow"">wrote about it</a> not too long ago.</p>"
1478,305,2008-08-04T18:26:13Z,1476,-1,"<p>As far as I can tell Python, up through 2.5, only supports hexadecimal &amp; octal literals.  I did find some discussions about adding binary to future versions but nothing definite.</p>"
1479,269,2008-08-04T18:27:26Z,1476,-1,"<p>I am pretty sure this is one of the things due to change in Python 3.0 with perhaps bin() to go with hex() and oct().</p>

<p>EDIT:
lbrandy's answer is correct in all cases.</p>
"
1484,2089740,2008-08-04T18:34:45Z,1476,57,"<pre><code>&gt;&gt;&gt; print int('01010101111',2)
687
&gt;&gt;&gt; print int('11111111',2)
255
</code></pre>

<p>Another way.</p>
"
1619,92,2008-08-04T21:54:11Z,766,17,"<p>MySQLdb is what I have used before.</p>

<p>If you host is using Python version 2.5 or higher, support for sqlite3 databases is built in (sqlite allows you to have a relational database that is simply a file in your filesystem).  But buyer beware, sqlite is not suited for production, so it may depend what you are trying to do with it.</p>

<p>Another option may be to call your host and complain, or change hosts.  Honestly these days, any self respecting web host that supports python and mysql ought to have MySQLdb pre installed.</p>"
1780,77,2008-08-05T01:14:30Z,1734,8,"<P>If you are looking for user facing interaction, stick with xml. It has more support, understanding, and general acceptance currently. If it's internal, I would say that protocol buffers are a great idea.</P>
<P>Maybe in a few years as more tools come out to support protocol buffers, then start looking towards that for a public facing api. Until then... <A href=""http://en.wikipedia.org/wiki/JSON"">JSON</A>?</P>"
1840,116,2008-08-05T02:54:54Z,1829,8,"<p><strong>On Linux:</strong></p>

<ul>
<li>set raw mode</li>
<li>select and read the keystroke</li>
<li>restore normal settings</li>
</ul>

<pre>
import sys
import select
import termios
import tty

def getkey():
    old_settings = termios.tcgetattr(sys.stdin)
    tty.setraw(sys.stdin.fileno())
    select.select([sys.stdin], [], [], 0)
    answer = sys.stdin.read(1)
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
    return answer

print """"""Menu
1) Say Foo
2) Say Bar""""""

answer=getkey()

if ""1"" in answer: print ""foo""
elif ""2"" in answer: print ""bar""

</pre>
"
1852,116,2008-08-05T03:11:55Z,1829,6,"<p><strong>On Windows:</strong></p>

<pre><code>import msvcrt
answer=msvcrt.getch()
</code></pre>
"
1857,2089740,2008-08-05T03:27:03Z,1854,341,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.name
posix
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Linux'
&gt;&gt;&gt; platform.release()
'2.6.22-15-generic'
</code></pre>

<p>See: <a href=""https://docs.python.org/2/library/platform.html"">platform — Access to underlying platform’s identifying data</a></p>
"
1870,30,2008-08-05T03:51:57Z,1829,2,"<p>Wow, that took forever. Ok, here's what I've ended up with </p>

<pre><code>#!C:\python25\python.exe<br>import msvcrt<br>print """"""Menu<br>1) Say Foo <br>2) Say Bar""""""<br>while 1:<br>    char = msvcrt.getch()<br>    if char == chr(27): #escape<br>        break<br>    if char == ""1"":<br>        print ""foo""<br>        break<br>    if char == ""2"":<br>        print ""Bar""<br>        break<br></code></pre>

<p>It fails hard using IDLE, the python...thing...that comes with python. But once I tried it in DOS (er, CMD.exe), as a real program, then it ran fine.</p>

<p>No one try it in IDLE, unless you have Task Manager handy.</p>

<p>I've already forgotten how I lived with menus that arn't super-instant responsive.</p>"
1871,216,2008-08-05T03:57:22Z,1854,112,"<p>Dang -- lbrandy beat me to the punch, but that doesn't mean I can't provide you with the system results for Vista!</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.name
'nt'
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Windows'
&gt;&gt;&gt; platform.release()
'Vista'
</code></pre>
"
1879,116,2008-08-05T04:13:53Z,1854,91,"<p>For the record here's the results on Mac:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.name
'posix'
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Darwin'
&gt;&gt;&gt; platform.release()
'8.11.1'
</code></pre>
"
1885,50,2008-08-05T04:28:03Z,1829,0,"<p>The  reason msvcrt fails in IDLE is because IDLE is not accessing the library that runs msvcrt. Whereas when you run the program natively in cmd.exe it works nicely. For the same reason that your program blows up on Mac and Linux terminals.</p>

<p>But I guess if you're going to be using this specifically for windows, more power to ya.</p>"
1987,269,2008-08-05T07:27:40Z,1983,19,"<p>The list [1,2,3] is dynamic and flexible but that flexibility comes at a speed cost.</p>

<p>The tuple (1,2,3) is fixed (immutable) and therefore faster.</p>
"
2277,156,2008-08-05T13:22:43Z,1983,26,"<p>From the <a href=""http://www.python.org/doc/faq/general/#why-are-there-separate-tuple-and-list-data-types"">Python FAQ</a>:</p>

<blockquote>
  <p>Lists and tuples, while similar in many respects, are generally used in fundamentally different ways. Tuples can be thought of as being similar to Pascal records or C structs; they're small collections of related data which may be of different types which are operated on as a group. For example, a Cartesian coordinate is appropriately represented as a tuple of two or three numbers.</p>
  
  <p>Lists, on the other hand, are more like arrays in other languages. They tend to hold a varying number of objects all of which have the same type and which are operated on one-by-one.</p>
</blockquote>

<p>Generally by convention you wouldn't choose a list or a tuple just based on its (im)mutability.  You would choose a tuple for small collections of completely different pieces of data in which a full-blown class would be too heavyweight, and a list for collections of any reasonable size where you have a homogeneous set of data.</p>"
2316,259,2008-08-05T13:45:38Z,2311,14,"<p>Do you need to open the locfile in binary using <code>rb</code>?</p>

<pre><code>f = open (locfile, ""rb"")
</code></pre>
"
2317,17,2008-08-05T13:45:47Z,2311,2,"<p>Well if you go under the properties of your file in Windows or a *nix environment, you will notice two sizes.  One is the sector size, and one is the actual size.  The sector size is the number of sectors in bytes that are used up on your hard disk.  That is because two files cannot be in the same sector with most modern file systems, so if your file fills up half of the sector the whole sector is marked as filled.</p>

<p>So you might be comparing the sector file size to the actual file size on the FTP server or vice versa.</p>"
2510,269,2008-08-05T15:59:24Z,2311,0,"<p>Small files take up a whole node on the filesystem whatever size that is.</p>

<p>My host tends to report all small files as 4kb in ftp but in a shell gives an accurate size so it might be a 'feature' common to ftp clients.</p>"
2937,275,2008-08-05T22:34:25Z,2933,189,"<p>First you will need some GUI library with Python bindings and then (if you want) some program that will convert your python scripts into standalone executables.</p>

<p><strong>Cross-platform GUI libraries with Python bindings (Windows, Linux, Mac)</strong></p>

<p>Of course, there are many, but the most popular that I've seen in wild are:</p>

<ul>
<li><a href=""http://wiki.python.org/moin/TkInter"">Tkinter</a>  - based on <a href=""http://www.tcl.tk/"">Tk GUI toolkit</a> (de-facto standard GUI library for python, free for commercial projects)</li>
<li><a href=""http://www.wxpython.org/"">WxPython</a> - based on <a href=""http://www.wxwidgets.org/"">WxWidgets</a> (very popular, free for commercial projects)</li>
<li><a href=""http://www.riverbankcomputing.co.uk/news"">PyQt</a> - based on <a href=""http://trolltech.com/products/qt/"">Qt</a> (also very popular and more stable than WxWidgets but costly license for commercial projects)</li>
</ul>

<p>Complete list is at <a href=""http://wiki.python.org/moin/GuiProgramming"">http://wiki.python.org/moin/GuiProgramming</a></p>

<p><strong>Single executable (Windows)</strong></p>

<ul>
<li><a href=""http://www.py2exe.org/"">py2exe</a> - Probably the most popular out there (<a href=""http://stackoverflow.com/questions/2933/an-executable-python-app/31859#31859"">PyInstaller</a> is also gaining in popularity)</li>
</ul>

<p><strong>Single executable (Linux)</strong></p>

<ul>
<li><a href=""http://wiki.python.org/moin/Freeze"">Freeze</a> - works the same way like py2exe but targets Linux platform</li>
</ul>

<p><strong>Single executable (Mac)</strong></p>

<ul>
<li><a href=""https://pythonhosted.org/py2app/"">py2app</a> - again, works like py2exe but targets Mac OS</li>
</ul>
"
2941,92,2008-08-05T22:40:17Z,2933,0,"<p>You don't need to <em>compile</em> python for Mac/Windows/Linux.  It is an interpreted language, so you simply need to have the Python interpreter installed on the system of your choice (it is available for all three platforms).</p>

<p>As for a GUI library that works cross platform, Python's <a href=""http://www.tcl.tk/"" rel=""nofollow"">Tk/Tcl</a> widget library works very well, and I believe is sufficiently cross platform.</p>

<p><a href=""http://docs.python.org/lib/module-Tkinter.html"" rel=""nofollow"">Tkinter</a> is the python interface to Tk/Tcl</p>

<p>From the python project webpage: </p>

<blockquote>
  <p>Tkinter is not the only GuiProgramming
  toolkit for Python.  It is however the
  most commonly used one, and almost the
  only  one that is portable between
  Unix, Mac and Windows</p>
</blockquote>"
2980,188,2008-08-06T00:29:36Z,2933,2,"<p>Since python is installed on nearly every non-Windows OS by default now, the only thing you really need to make sure of is that all of the non-standard libraries you use are installed.</p>

<p>Having said that, it is possible to build executables that include the python interpreter, and any libraries you use.  This is likely to create a large executable, however.</p>

<p>MacOS X even includes support in the Xcode IDE for creating full standalone GUI apps.  These can be run by any user running OS X.</p>"
2982,99,2008-08-06T00:33:35Z,972,576,"<p>In Python, there is a difference between functions and bound methods.</p>

<pre><code>&gt;&gt;&gt; def foo():
...     print ""foo""
...
&gt;&gt;&gt; class A:
...     def bar( self ):
...         print ""bar""
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; foo
&lt;function foo at 0x00A98D70&gt;
&gt;&gt;&gt; a.bar
&lt;bound method A.bar of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt;
</code></pre>

<p>Bound methods have been ""bound"" (how descriptive) to an instance, and that instance will be passed as the first argument whenever the method is called.</p>

<p>Callables that are attributes of a class (as opposed to an instance) are still unbound, though, so you can modify the class definition whenever you want:</p>

<pre><code>&gt;&gt;&gt; def fooFighters( self ):
...     print ""fooFighters""
...
&gt;&gt;&gt; A.fooFighters = fooFighters
&gt;&gt;&gt; a2 = A()
&gt;&gt;&gt; a2.fooFighters
&lt;bound method A.fooFighters of &lt;__main__.A instance at 0x00A9BEB8&gt;&gt;
&gt;&gt;&gt; a2.fooFighters()
fooFighters
</code></pre>

<p>Previously defined instances are updated as well (as long as they haven't overridden the attribute themselves):</p>

<pre><code>&gt;&gt;&gt; a.fooFighters()
fooFighters
</code></pre>

<p>The problem comes when you want to attach a method to a single instance:</p>

<pre><code>&gt;&gt;&gt; def barFighters( self ):
...     print ""barFighters""
...
&gt;&gt;&gt; a.barFighters = barFighters
&gt;&gt;&gt; a.barFighters()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: barFighters() takes exactly 1 argument (0 given)
</code></pre>

<p>The function is not automatically bound when it's attached directly to an instance:</p>

<pre><code>&gt;&gt;&gt; a.barFighters
&lt;function barFighters at 0x00A98EF0&gt;
</code></pre>

<p>To bind it, we can use the <a href=""http://docs.python.org/library/types.html?highlight=methodtype#module-types"">MethodType function in the types module</a>:</p>

<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; a.barFighters = types.MethodType( barFighters, a )
&gt;&gt;&gt; a.barFighters
&lt;bound method ?.barFighters of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt; a.barFighters()
barFighters
</code></pre>

<p>This time other instances of the class have not been affected:</p>

<pre><code>&gt;&gt;&gt; a2.barFighters()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: A instance has no attribute 'barFighters'
</code></pre>

<p>More information can be found by reading about <a href=""http://users.rcn.com/python/download/Descriptor.htm"">descriptors</a> and <a href=""http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html"">metaclass</a> <a href=""http://www.gnosis.cx/publish/programming/metaclass_2.html"">programming</a>.</p>
"
3040,457,2008-08-06T03:01:23Z,469,12,"<p>Unfortunately the only API that isn't deprecated is located in the ApplicationServices framework, which doesn't have a bridge support file, and thus isn't available in the bridge. If you're wanting to use ctypes, you can use ATSFontGetFileReference after looking up the ATSFontRef.</p>

<p>Cocoa doesn't have any native support, at least as of 10.5, for getting the location of a font.</p>"
3071,363,2008-08-06T03:57:16Z,3061,925,"<p>Assuming module <code>foo</code> with method <code>bar</code>:</p>

<pre><code>import foo
methodToCall = getattr(foo, 'bar')
result = methodToCall()
</code></pre>

<p>As far as that goes, lines 2 and 3 can be compressed to:</p>

<pre><code>result = getattr(foo, 'bar')()
</code></pre>

<p>if that makes more sense for your use case.  You can use <code>getattr</code> in this fashion on class instance bound methods, module-level methods, class methods... the list goes on.</p>
"
4128,17,2008-08-06T23:40:43Z,3976,0,"<p>have you tried watching the traffic between the GUI and the serial port to see if there is some kind of special command being sent across?  Also just curious, Python is sending ASCII and not UTF-8 or something else right?  The reason I ask is because I noticed your quote changes for the strings and in some languages that actually is the difference between ASCII and UTF-8.</p>
"
4162,582,2008-08-07T00:19:03Z,3976,4,"<p><code>/dev/cu.xxxxx</code> is the ""callout"" device, it's what you use when you establish a connection to the serial device and start talking to it. <code>/dev/tty.xxxxx</code> is the ""dialin"" device, used for monitoring a port for incoming calls for e.g. a fax listener.</p>"
4572,612,2008-08-07T10:44:23Z,742,7,"<p>If you're simply displaying data from models, why not use the <a href=""https://docs.djangoproject.com/en/1.2/ref/generic-views/"" rel=""nofollow"">Django Generic Views</a>? They're designed to let you easy show data from a model without having to write your own view and stuff about mapping URL paramaters to views, fetching data, handling edge cases, rendering output, etc.</p>
"
4595,618,2008-08-07T11:21:56Z,1983,10,"<p>Tuples are a quick\flexible way to create <em>composite</em> data-types.
Lists are containers for, well, lists of objects.</p>

<p>For example, you would use a List to store a list of student details in a class.</p>

<p>Each student detail in that list may be a 3-tuple containing their roll number, name and test score.</p>

<pre><code> `[(1,'Mark',86),(2,'John',34)...]`<br></code></pre>

<p>Also, because tuples are immutable they can be used as keys in dictionaries.</p>"
4600,618,2008-08-07T11:30:16Z,972,4,"<p>What you're looking for is <code>setattr</code> I believe.
Use this to set an attribute on an object.</p>

<pre><code>&gt;&gt;&gt; def printme(s): print repr(s)<br>&gt;&gt;&gt; class A: pass<br>&gt;&gt;&gt; setattr(A,'printme',printme)<br>&gt;&gt;&gt; a = A()<br>&gt;&gt;&gt; a.printme() # s becomes the implicit 'self' variable<br>&lt; __ main __ . A instance at 0xABCDEFG&gt;<br></code></pre>"
4605,618,2008-08-07T11:35:23Z,3061,145,"<p>Patrick's solution is probably the cleanest.
If you need to dynamically pick up the module as well, you can import it like:</p>

<pre><code>m = __import__ ('foo')
func = getattr(m,'bar')
func()
</code></pre>
"
4958,613,2008-08-07T16:50:43Z,4942,2,<p>Focus on the shorter time needed for development/prototype and possibly easier maintenance (none of this may apply against Ruby).</p>
4978,676,2008-08-07T17:04:25Z,4942,11,"<p>This is one of those cases that really boil down to personal preference or situational details. If you're more comfortable and experienced with Python, then say so. Are they asking you to justify it because they're more comfortable with one of the other environments? After you're done, will the system be passed off to someone else for long-term maintenance?</p>

<p>If they ask you to use a technology or language that you're not as familiar with, then make sure they know up-front that it's going to take you longer.</p>"
5014,660,2008-08-07T17:30:10Z,4942,3,"<p>I would consider that using python on a new project is completely dependent on what problem you are trying to solve with python.  If you want someone to agree with you that you should use python, then show them how python's features apply specifically to that problem.</p>

<p>In the case of web development with python, talk about WSGI and other web libraries and frameworks you could use that would make your life easier.  One note for python is that most of the frameworks for python web development can be plugged right into any current project. With ruby on rails, you're practically working in a DSL that anyone who uses your project will have to learn.  If they know python, then they can figure out what you are doing with django, etc in a day.</p>

<p>I'm only talking about web development because it appears that's what you are going to be working on seeing ruby, python and PHP in the same list.  The real message that's important is applying to whatever it is you like about python <em>directly</em> to some problem you are trying to solve.</p>"
5129,680,2008-08-07T18:40:53Z,5102,12,"<p>There are two main ways of running Python on Apache. The simplest would be to use CGI and write normal Python scripts while the second is using a web framework like Django or Pylons.</p>

<p>Using CGI is straightforward. Make sure your Apache config file has a cgi-bin set up. If not, follow their documentation (<a href=""http://httpd.apache.org/docs/2.0/howto/cgi.html"" rel=""nofollow"">http://httpd.apache.org/docs/2.0/howto/cgi.html</a>). At that point all you need to do is place your Python scripts in the cgi-bin directory and the standard output will become the HTTP response. Refer to Python's documentation for further info (<a href=""https://docs.python.org/library/cgi.html"" rel=""nofollow"">https://docs.python.org/library/cgi.html</a>).</p>

<p>If you want to use a web framework you'll need to setup mod_python or FastCGI. These steps are dependent on which framework you want to use. Django provides clear instructions on how to setup mod_python and Django with Apache (<a href=""http://www.djangoproject.com/documentation/modpython/"" rel=""nofollow"">http://www.djangoproject.com/documentation/modpython/</a>)</p>
"
5165,116,2008-08-07T19:02:57Z,5102,8,"<p>Yes, mod_python is pretty confusing to set up.  Here's how I did it.</p>

<p>In httpd.conf:</p>

<pre><code>LoadModule python_module modules/mod_python.so<br><br>&lt;Directory ""/serverbase/htdocs/myapp""&gt;<br>  AddHandler mod_python .py<br>  PythonHandler myapp<br>  PythonDebug On<br></code></pre>

<p>and in your application directory:</p>

<pre><code>$ /serverbase/htdocs/myapp$ ls -l<br>total 16<br>-r-xr-xr-x 1 root sys        6484 May 21 15:54 myapp.py<br></code></pre>

<p>Repeat the configuration for each python program you wish to have running under mod_python.</p>"
5168,636,2008-08-07T19:05:58Z,5102,5,"<p>Are you running Python on UNIX or Windows?</p>

<p>An alternative to mod_python and FastCGI is mod_wsgi. You can find out more at <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">modwsgi</a></p>

<p>I have built and installed this on Solaris without problems. I had previously tried mod_python but ran into problems with shared libraries as part of the build. There are <a href=""http://code.google.com/p/modwsgi/wiki/InstallationInstructions"" rel=""nofollow"">good install docs</a> available.</p>
"
5302,501,2008-08-07T20:57:20Z,5136,4,"<p>I won't help much but I remember that I was able to wrap MATLAB simulation into DLL and then call it from Delphi app. It work really well.</p>

<p>Anyway: good luck!!!</p>"
5319,380,2008-08-07T21:10:27Z,5313,8,<p>erm.. HTML? (trying to be funny here... while we wait for real answers..)</p>
5320,216,2008-08-07T21:11:28Z,5313,1,"<p>The <a href=""http://www.wxwidgets.org/"" rel=""nofollow"" title=""wxWidgets"">wxWidgets</a> (formerly known as wxWindows) library might be what you're looking for. There's a particularly good port for Python, <a href=""http://wxpython.org/"" rel=""nofollow"" title=""wxPython"">wxPython</a>, as well as versions for different languages -- C#, C++, Perl and Ruby come to mind -- and for various GUIs: Win32, Mac OS X, GTK+, X11, Motif, WinCE. The library's been around for a while and is pretty solid.</p>"
5340,108,2008-08-07T21:24:26Z,5313,3,"<P>Not sure if this is what you're looking for, but there's <A href=""http://glade.gnome.org/"" rel=""nofollow"">Glade</A> (or <A href=""http://gladewin32.sourceforge.net/"" rel=""nofollow"">Windows download</A>) which is a designer for GTK+. It generates an XML file which can then be used to build the GUI in a number of different languages.</P>"
5343,25,2008-08-07T21:25:26Z,5313,5,"<p><a href=""http://en.wikipedia.org/wiki/Qt_%28toolkit%29"">Qt</a> (pronounced ""cute"" by its creators[1]) is a cross-platform application development framework, widely used for the development of GUI programs.</p>

<p>Qt uses <strong>C++</strong> with several non-standard extensions implemented by an additional pre-processor that generates standard C++ code before compilation. Qt can also be used in several other programming languages; bindings exist for <strong>Ada</strong> (QtAda)[4], C<strong>#</strong> (Qyoto/Kimono)[5], <strong>Java</strong> (Qt Jambi)[6], <strong>Pascal</strong>, <strong>Perl</strong>, <strong>PHP</strong> (PHP-Qt), <strong>Ruby</strong> (RubyQt), and <strong>Python</strong> (PyQt). It runs on all major platforms, and has extensive internationalization support. Non-GUI features include SQL database access, XML parsing, thread management, network support and a unified cross-platform API for file handling.</p>"
5430,267,2008-08-07T22:32:23Z,5419,24,"<p><strong>Note:</strong> This answer is sort of outdated (from 2008). Please use the solution below with care!!</p>

<hr>

<p>Here is a page that details the problem and a solution (search the page for the text <em>Wrapping sys.stdout into an instance</em>):</p>

<p><a href=""http://wiki.python.org/moin/PrintFails"">PrintFails - Python Wiki</a></p>

<p>Here's a code excerpt from that page:</p>

<pre><code>$ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u""\u0411\n""; print type(line), len(line); \
    sys.stdout.write(line); print line'
  UTF-8
  &lt;type 'unicode'&gt; 2
  Б
  Б

  $ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u""\u0411\n""; print type(line), len(line); \
    sys.stdout.write(line); print line' | cat
  None
  &lt;type 'unicode'&gt; 2
  Б
  Б
</code></pre>

<p>There's some more information on that page, well worth a read.</p>
"
5435,429,2008-08-07T22:35:48Z,5415,13,"<p>You'll want the <a href=""https://docs.python.org/3.4/library/struct.html"" rel=""nofollow"">struct</a> package.</p>
"
5719,108465,2008-08-08T06:06:33Z,1983,1,"<P>As others have mentioned, Lists and tuples are both containers which can be used to store python objects. Lists are extensible and their contents can change by assignment, on the other hand tuples are immutable.</P>
<P>Also, lists cannot be used as keys in a dictionary whereas tuples can. </P>"
5746,699,2008-08-08T06:48:52Z,1983,1,"<p>If you can find a solution that works with tuples, use them, as it forces immutability which kind of drives you down a more functional path. You almost never regret going down the functional/immutable path.</p>"
5927,309844,2008-08-08T13:41:43Z,5909,6,"<p>The size of the file is sent as the Content-Length header. Here is how to get it with urllib:</p>

<pre><code>&gt;&gt;&gt; site = urllib.urlopen(""http://python.org"")<br>&gt;&gt;&gt; meta = site.info()<br>&gt;&gt;&gt; print meta.getheaders(""Content-Length"")<br>['16535']<br>&gt;&gt;&gt;<br></code></pre>"
5935,745,2008-08-08T13:47:26Z,5909,16,"<p>Using the returned-urllib-object method <code>info()</code>, you can get various information on the retrived document. Example of grabbing the current Google logo:</p>

<pre><code>&gt;&gt;&gt; import urllib<br>&gt;&gt;&gt; d = urllib.urlopen(""http://www.google.co.uk/logos/olympics08_opening.gif"")<br>&gt;&gt;&gt; print d.info()<br><br>Content-Type: image/gif<br>Last-Modified: Thu, 07 Aug 2008 16:20:19 GMT  <br>Expires: Sun, 17 Jan 2038 19:14:07 GMT <br>Cache-Control: public <br>Date: Fri, 08 Aug 2008 13:40:41 GMT <br>Server: gws <br>Content-Length: 20172 <br>Connection: Close<br></code></pre>

<p>It's a dict, so to get the size of the file, you do <code>urllibobject.info()['Content-Length']</code></p>

<pre><code>print f.info()['Content-Length']<br></code></pre>

<p>And to get the size of the local file (for comparison), you can use the os.stat() command:</p>

<pre><code>os.stat(""/the/local/file.zip"").st_size<br></code></pre>"
5938,309844,2008-08-08T13:51:23Z,5909,4,"<p>Also if the server you are connecting to supports it, look at <a href=""http://en.wikipedia.org/wiki/HTTP_ETag"" rel=""nofollow"">Etags</a> and the <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_headers#Requests"" rel=""nofollow"">If-Modified-Since</a> and <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_headers#Requests"" rel=""nofollow"">If-None-Match</a> headers.</p>

<p>Using these will take advantage of the webserver's caching rules and will return a <a href=""http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection"" rel=""nofollow"">304 Not Modified</a> status code if the content hasn't changed.</p>"
5985,309844,2008-08-08T14:21:51Z,5909,19,"<p>I have reproduced what you are seeing:</p>

<pre><code>import urllib, os<br>link = ""http://python.org""<br>print ""opening url:"", link<br>site = urllib.urlopen(link)<br>meta = site.info()<br>print ""Content-Length:"", meta.getheaders(""Content-Length"")[0]<br><br>f = open(""out.txt"", ""r"")<br>print ""File on disk:"",len(f.read())<br>f.close()<br><br><br>f = open(""out.txt"", ""w"")<br>f.write(site.read())<br>site.close()<br>f.close()<br><br>f = open(""out.txt"", ""r"")<br>print ""File on disk after download:"",len(f.read())<br>f.close()<br><br>print ""os.stat().st_size returns:"", os.stat(""out.txt"").st_size<br></code></pre>

<p>Outputs this:</p>

<pre><code>opening url: http://python.org<br>Content-Length: 16535<br>File on disk: 16535<br>File on disk after download: 16535<br>os.stat().st_size returns: 16861<br></code></pre>

<p>What am I doing wrong here? Is os.stat().st_size not returning the correct size?</p>

<hr>

<p>Edit:
OK, I figured out what the problem was:</p>

<pre><code>import urllib, os<br>link = ""http://python.org""<br>print ""opening url:"", link<br>site = urllib.urlopen(link)<br>meta = site.info()<br>print ""Content-Length:"", meta.getheaders(""Content-Length"")[0]<br><br>f = open(""out.txt"", ""rb"")<br>print ""File on disk:"",len(f.read())<br>f.close()<br><br><br>f = open(""out.txt"", ""wb"")<br>f.write(site.read())<br>site.close()<br>f.close()<br><br>f = open(""out.txt"", ""rb"")<br>print ""File on disk after download:"",len(f.read())<br>f.close()<br><br>print ""os.stat().st_size returns:"", os.stat(""out.txt"").st_size<br></code></pre>

<p>this outputs:</p>

<pre><code>$ python test.py<br>opening url: http://python.org<br>Content-Length: 16535<br>File on disk: 16535<br>File on disk after download: 16535<br>os.stat().st_size returns: 16535<br></code></pre>

<p>Make sure you are opening both files for binary read/write.</p>

<pre><code>// open for binary write<br>open(filename, ""wb"")<br>// open for binary read<br>open(filename, ""rb"")<br></code></pre>"
6125,309844,2008-08-08T16:45:50Z,5966,3,"<p>Why not use SQLite? There is good support in Python and you can write SQL queries to get the data out. Here is the Python docs for <a href=""http://docs.python.org/lib/module-sqlite3.html"" rel=""nofollow"">sqlite3</a></p>

<hr>

<p>If you don't want to use SQLite you could do an array of dicts.</p>

<pre><code>episodes = []<br>episodes.append({'season':1, 'episode': 2, 'name':'Something'})<br>episodes.append({'season':1, 'episode': 2, 'name':'Something', 'actors':['Billy Bob', 'Sean Penn']})<br></code></pre>

<p>That way you add metadata to any record and search it very easily</p>

<pre><code>season_1 = [e for e in episodes if e['season'] == 1]<br>billy_bob = [e for e in episodes if 'actors' in e and 'Billy Bob' in e['actors']]<br><br>for episode in billy_bob:<br>    print ""Billy bob was in Season %s Episode %s"" % (episode['season'], episode['episode'])<br></code></pre>"
6161,758,2008-08-08T17:12:24Z,1734,10,"<p>Protocol buffers are intended to optimize communications between machines. They are really not intended for human interaction. Also, the format is binary, so it could not replace XML in that use case. </p>

<p>I would also recommend <a href=""http://en.wikipedia.org/wiki/JSON"">JSON</a> as being the most compact text-based format.</p>"
6616,488,2008-08-09T04:44:41Z,5313,3,"<p><a href=""http://www.mozilla.org/projects/xul/"" rel=""nofollow"">XML User Interface Language</a>. Don't know much about it so not sure if it meets your desires. Post back with your experience if you play with it.</p>"
6805,358,2008-08-09T15:13:14Z,5966,0,"<P>I have done something similar in the past and used an in-memory XML document as a quick and dirty hierachical database for storage. You can store each show/season/episode as an element (nested appropriately) and attributes of these things as xml attributes on the elements. Then you can use XQuery to get info back out.</P>
<P><STRONG>NOTE:</STRONG> I'm not a Python guy so I don't know what your xml support is like.</P>
<P><STRONG>NOTE 2:</STRONG> You'll want to profile this because it'll be bigger and slower than the solution you've already got. Likely enough if you are doing some high-volume processing then XML is probably not going to be your friend.</P>"
7073,878,2008-08-10T07:10:19Z,502,2,"<p>Is the PC likely to have Acrobat installed? I think Acrobat installs a shell extension so previews of the first page of a PDF document appear in Windows Explorer's thumbnail view. You can get thumbnails yourself via the IExtractImage COM API, which you'll need to wrap. <a href=""http://www.vbaccelerator.com/home/net/code/libraries/shell_projects/Thumbnail_Extraction/article.asp"" rel=""nofollow"" title=""Domain Specific Development with Visual Studio DSL Tools."">VBAccelerator has an example in C#</a> that you could port to Python.</p>
"
7090,13,2008-08-10T08:08:33Z,502,25,"<p>ImageMagick delegates the PDF->bitmap conversion to GhostScript anyway, so here's a command you can use (it's based on the actual command listed by the <code>ps:alpha</code> delegate in ImageMagick, just adjusted to use JPEG as output):</p>

<pre><code>gs -q -dQUIET -dPARANOIDSAFER -dBATCH -dNOPAUSE -dNOPROMPT \
-dMaxBitmap=500000000 -dLastPage=1 -dAlignToPixels=0 -dGridFitTT=0 \
-sDEVICE=jpeg -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -r72x72 \
-sOutputFile=$OUTPUT -f$INPUT
</code></pre>

<p>where <code>$OUTPUT</code> and <code>$INPUT</code> are the output and input filenames. Adjust the <code>72x72</code> to whatever resolution you need. (Obviously, strip out the backslashes if you're writing out the whole command as one line.)</p>

<p>This is good for two reasons:</p>

<ol>
<li>You don't need to have ImageMagick installed anymore. Not that I have anything against ImageMagick (I love it to bits), but I believe in simple solutions.</li>
<li>ImageMagick does a two-step conversion. First PDF->PPM, then PPM->JPEG. This way, the conversion is one-step.</li>
</ol>

<p>Other things to consider: with the files I've tested, PNG compresses better than JPEG. If you want to use PNG, change the <code>-sDEVICE=jpeg</code> to <code>-sDEVICE=png16m</code>.</p>
"
7286,207,2008-08-10T18:45:32Z,773,394,"<p>As Sebastjan said, <strong>you first have to sort your data. This is important.</strong></p>

<p>The part I didn't get is that in the example construction</p>

<pre><code>groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
   groups.append(list(g))    # Store group iterator as a list
   uniquekeys.append(k)
</code></pre>

<p><code>k</code> is the current grouping key, and <code>g</code> is an iterator that you can use to iterate over the group defined by that grouping key. In other words, the <code>groupby</code> iterator itself returns iterators.</p>

<p>Here's an example of that, using clearer variable names:</p>

<pre><code>from itertools import groupby

things = [(""animal"", ""bear""), (""animal"", ""duck""), (""plant"", ""cactus""), (""vehicle"", ""speed boat""), (""vehicle"", ""school bus"")]

for key, group in groupby(things, lambda x: x[0]):
    for thing in group:
        print ""A %s is a %s."" % (thing[1], key)
    print "" ""
</code></pre>

<p>This will give you the output:</p>

<blockquote>
  <p>A bear is a animal.<br>
  A duck is a animal.</p>
  
  <p>A cactus is a plant.</p>
  
  <p>A speed boat is a vehicle.<br>
  A school bus is a vehicle.</p>
</blockquote>

<p>In this example, <code>things</code> is a list of tuples where the first item in each tuple is the group the second item belongs to. </p>

<p>The <code>groupby()</code> function takes two arguments: (1) the data to group and (2) the function to group it with. </p>

<p>Here, <code>lambda x: x[0]</code> tells <code>groupby()</code> to use the first item in each tuple as the grouping key.</p>

<p>In the above <code>for</code> statement, <code>groupby</code> returns three (key, group iterator) pairs - once for each unique key. You can use the returned iterator to iterate over each individual item in that group.</p>

<p>Here's a slightly different example with the same data, using a list comprehension:</p>

<pre><code>for key, group in groupby(things, lambda x: x[0]):
    listOfThings = "" and "".join([thing[1] for thing in group])
    print key + ""s:  "" + listOfThings + "".""
</code></pre>

<p>This will give you the output:</p>

<blockquote>
  <p>animals: bear and duck.<br>
  plants: cactus.<br>
  vehicles: speed boat and school bus.</p>
</blockquote>
"
7496,680,2008-08-11T03:11:55Z,5313,0,"<p>I read a little on XML User Interface Language (XUL) and it looks really robust and well supported. The main problem for me is it's tied to the Gecko rendering engine so it's cross platform the way wxWidgets, QT and GTK+ are cross platform. Also, there Python bindings don't seem as good as those other libraries.</p>

<p>GladeXML and XRC seem like better markups</p>
"
8020,985,2008-08-11T17:58:28Z,5419,-1,"<p>The cause of your problem is <strong>NOT</strong> the Win console not willing to accept Unicode (as it does this since I guess Win2k by default). It is the default system encoding. Try this code and see what it gives you:</p>

<pre><code>import sys
sys.getdefaultencoding()
</code></pre>

<p>if it says ascii, there's your cause ;-)
You have to create a file called sitecustomize.py and put it under python path (I put it under /usr/lib/python2.5/site-packages, but that is differen on Win - it is c:\python\lib\site-packages or something), with the following contents:</p>

<pre><code>import sys
sys.setdefaultencoding('utf-8')
</code></pre>

<p>and perhaps you might want to specify the encoding in your files as well:</p>

<pre><code># -*- coding: UTF-8 -*-
import sys,time
</code></pre>

<p>Edit: more info can be found <a href=""http://www.diveintopython.net/xml_processing/unicode.html"" rel=""nofollow"">in excellent the Dive into Python book</a></p>
"
8109,1026,2008-08-11T19:17:41Z,5313,1,"<p>@Cristian and Antony Cramp: while XUL is a nice choice for UI development (cross-platform, open-source licensed, used in Firefox and other major software), it's certainly not language agnostic. You're tied to Gecko, with JS for scripting. There is experimental support for Python scripting, but it's only experimental, AFAIK.</p>

<p>You can define the UI in XUL+JS and use back-end components written in C++ though (there are Python and Java bridges available too).</p>
"
8114,872,2008-08-11T19:21:14Z,5313,4,"<p>I seriously doubt you're going to find a markup language for GIU's that's <em>not</em> tied to a specific library.  For such a thing to exist, there would need to be a standardized GUI markup language, with several implementations.</p>
"
8165,985,2008-08-11T20:07:59Z,5966,0,"<p>I don't get this part here:</p>

<blockquote>
  <p>This worked okay, but there was no easy way of checking if x[3][24] was supposed to exist or not (so I couldn't raise the season<em>not</em>found exception)</p>
</blockquote>

<p>There is a way to do it - called <strong>in</strong>:</p>

<pre><code>&gt;&gt;&gt;x={}
&gt;&gt;&gt;x[1]={}
&gt;&gt;&gt;x[1][2]={}
&gt;&gt;&gt;x
{1: {2: {}}}
&gt;&gt;&gt; 2 in x[1]
True
&gt;&gt;&gt; 3 in x[1]
False
</code></pre>

<p>what seems to be the problem with that?</p>
"
8320,1057,2008-08-11T22:59:42Z,742,1,"<p>Unless you want to do something a little complex, using the generic views are the way to go.  They are far more powerful than their name implies, and if you are just displaying model data generic views will do the job.</p>
"
8332,1057,2008-08-11T23:16:33Z,766,4,"<p>You could try setting up your own python installation using <a href=""http://peak.telecommunity.com/DevCenter/EasyInstall#creating-a-virtual-python"" rel=""nofollow"">Virtual Python</a>.  Check out how to setup Django using it <a href=""http://forums.site5.com/showthread.php?t=10236"" rel=""nofollow"">here</a>.  That was written a long time ago, but it shows how I got MySQLdb setup without having root access or anything like it.  Once you've got the basics going, you can install any python library you want.</p>
"
8699,207,2008-08-12T11:40:13Z,8692,74,"<p>The <a href=""http://lxml.de/"">lxml package</a> supports xpath.  It seems to work pretty well, although I've had some trouble with the self:: axis.  There's also <a href=""http://pypi.python.org/pypi/Amara/1.1.6"">Amara</a>, but I haven't used it personally.</p>
"
8972,722,2008-08-12T15:32:05Z,8948,1,"<p><a href=""http://www.dotfunk.com/projects/mp3/"" rel=""nofollow"">This toolkit</a> may do what you need. I can't say if it's the ""best"", but really, if it does what you need, that's all that matters, right?</p>

<p>HTH</p>
"
8974,394,2008-08-12T15:37:24Z,8948,6,"<p>A simple example from the book Dive Into Python works ok for me, <a href=""http://www.diveintopython.org/download/diveintopython-examples-5.4.zip"" rel=""nofollow"">this</a> is the download link, the example is fileinfo.py. Don't know if it's the best, but it can do the basic job.</p>

<p>The entire book is available online <a href=""http://www.diveintopython.org/"" rel=""nofollow"">here</a>.</p>
"
8976,1087,2008-08-12T15:37:59Z,8948,1,"<p>It can depend on exactly what you want to do in addition to reading the metadata. If it is just simply the bitrate / name etc. that you need, and nothing else, something lightweight is probably best.</p>

<p>If you're manipulating the mp3 past that PyMedia may be suitable.</p>

<p>There are quite a few, whatever you do get, make sure and test it out on plenty of sample media. There are a few different versions of ID3 tags in particular, so make sure it's not too out of date. </p>

<p>Personally I've used this small MP3Info class with luck. It is quite old though.</p>

<p><a href=""http://www.omniscia.org/~vivake/python/MP3Info.py"" rel=""nofollow"">http://www.omniscia.org/~vivake/python/MP3Info.py</a></p>
"
9080,745,2008-08-12T17:55:22Z,5966,0,"<p>Bartosz/To clarify ""This worked okay, but there was no easy way of checking if x[3][24] was supposed to exist or not""</p>

<p><code>x['some show'][3][24]</code> would return season 3, episode 24 of ""some show"". If there was no season 3, I want the pseudo-dict to raise tvdb<em>seasonnotfound, if ""some show"" doesn't exist, then raise tvdb</em>shownotfound</p>

<p>The current system of a series of classes, each with a <code>__getitem__</code> - Show checks <code>if self.seasons.has_key(requested_season_number)</code>, the Season class checks <code>if self.episodes.has_key(requested_episode_number)</code> and so on.</p>

<p>It works, but it there seems to be a lot of repeated code (each class is basically the same, but raises a different error)</p>
"
9171,1146,2008-08-12T19:34:44Z,8692,2,"<p><a href=""http://pyxml.sourceforge.net"" rel=""nofollow"" title=""PyXML"">PyXML</a> works well.  </p>

<p>You didn't say what platform you're using, however if you're on Ubuntu you can get it with <code>sudo apt-get install python-xml</code>.  I'm sure other Linux distros have it as well.  </p>

<p>If you're on a Mac, xpath is already installed but not immediately accessible.  You can set <code>PY_USE_XMLPLUS</code> in your environment or do it the Python way before you import xml.xpath:</p>

<pre><code>if sys.platform.startswith('darwin'):
    os.environ['PY_USE_XMLPLUS'] = '1'
</code></pre>

<p>In the worst case you may have to build it yourself.  This package is no longer maintained but still builds fine and works with modern 2.x Pythons.  Basic docs are <a href=""http://pyxml.sourceforge.net/topics/howto/section-XPath.html"" rel=""nofollow"">here</a>.</p>
"
9358,1057,2008-08-13T00:44:26Z,8948,11,"<p>What you're after is the <a href=""http://id3-py.sourceforge.net/"">ID3</a> module.  It's very simple and will give you exactly what you need.  Just copy the ID3.py file into your site-packages directory and you'll be able to do something like the following:</p>

<pre><code>from ID3 import *
try:
  id3info = ID3('file.mp3')
  print id3info
  # Change the tags
  id3info['TITLE'] = ""Green Eggs and Ham""
  id3info['ARTIST'] = ""Dr. Seuss""
  for k, v in id3info.items():
    print k, "":"", v
except InvalidTagError, message:
  print ""Invalid ID3 tag:"", message
</code></pre>
"
10129,116,2008-08-13T17:56:34Z,10123,10,"<p>This will do what you want:</p>

<pre><code>signum = status &amp; 0xff
exitstatus = (status &amp; 0xff00) &gt;&gt; 8
</code></pre>
"
10132,872,2008-08-13T17:58:27Z,10123,1,"<p>You can unpack the status using <a href=""http://docs.python.org/ref/shifting.html"" rel=""nofollow"">bit-shifting</a> and <a href=""http://docs.python.org/ref/bitwise.html"" rel=""nofollow"">masking</a> operators.</p>

<pre><code>low = status &amp; 0x00FF
high = (status &amp; 0xFF00) &gt;&gt; 8
</code></pre>

<p>I'm not a Python programmer, so I hope got the syntax correct.</p>
"
10148,429,2008-08-13T18:14:10Z,10123,0,"<p>The folks before me've nailed it, but if you really want it on one line, you can do this:</p>

<pre><code>(signum, exitstatus) = (status &amp; 0xFF, (status &gt;&gt; 8) &amp; 0xFF)
</code></pre>

<p>EDIT: Had it backwards.</p>
"
10213,99,2008-08-13T18:52:36Z,10123,10,"<p>To answer your general question, you can use <a href=""http://en.wikipedia.org/wiki/Bit_twiddling"" rel=""nofollow"">bit manipulation</a> techniques:</p>

<pre><code>pid, status = os.wait()
exitstatus, signum = status &amp; 0xFF, (status &amp; 0xFF00) &gt;&gt; 8
</code></pre>

<p>However, there are also <a href=""http://docs.python.org/lib/os-process.html#l2h-2780"" rel=""nofollow"">built-in functions</a> for interpreting exit status values:</p>

<pre><code>pid, status = os.wait()
exitstatus, signum = os.WEXITSTATUS( status ), os.WTERMSIG( status )
</code></pre>

<p>See also:</p>

<ul>
<li>os.WCOREDUMP()</li>
<li>os.WIFCONTINUED()</li>
<li>os.WIFSTOPPED()</li>
<li>os.WIFSIGNALED()</li>
<li>os.WIFEXITED()</li>
<li>os.WSTOPSIG()</li>
</ul>
"
10778,985,2008-08-14T07:08:19Z,5966,5,"<p>OK, what you need is <code>classobj</code> from new module. That would allow you to construct exception classes dynamically (<code>classobj</code> takes a string as an argument for the class name). </p>

<pre><code>import new
myexc=new.classobj(""ExcName"",(Exception,),{})
i=myexc(""This is the exc msg!"")
raise i
</code></pre>

<p>this gives you:</p>

<pre><code>Traceback (most recent call last):
File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
__main__.ExcName: This is the exc msg!
</code></pre>

<p>remember that you can always get the class name through:</p>

<pre><code>self.__class__.__name__
</code></pre>

<p>So, after some string mangling and concatenation, you should be able to obtain appropriate exception class name and construct a class object using that name and then raise that exception.</p>

<p>P.S. - you can also raise strings, but this is deprecated.</p>

<pre><code>raise(self.__class__.__name__+""Exception"")
</code></pre>
"
10845,912,2008-08-14T09:46:21Z,8948,25,"<p>I've used <a href=""https://bitbucket.org/lazka/mutagen"">mutagen</a> to edit tags in media files before.  The nice thing about mutagen is that it can handle other formats, such as mp4, FLAC etc.  I've written several scripts with a lot of success using this API.</p>
"
10846,912,2008-08-14T09:48:59Z,8692,7,"<p>The latest version of <a href=""http://effbot.org/zone/element-xpath.htm"">elementtree</a> supports XPath pretty well.  Not being an XPath expert I can't say for sure if the implementation is full but it has satisfied most of my needs when working in Python.  I've also use lxml and PyXML and I find etree nice because it's a standard module.</p>

<p>NOTE: I've since found lxml and for me it's definitely the best XML lib out there for Python.  It does XPath nicely as well (though again perhaps not a full implementation).</p>
"
11074,267,2008-08-14T14:04:25Z,11060,8,"<p>I started writing up a summary of my experience with my own code generator, then went back and re-read your question and found you had already touched upon the same issues yourself, focus on the execution results instead of the code layout/look.</p>

<p>Problem is, this is hard to test, the generated code might not be suited to actually run in the environment of the unit test system, and how do you encode the expected results?</p>

<p>I've found that you need to break down the code generator into smaller pieces and unit test those. Unit testing a full code generator is more like integration testing than unit testing if you ask me.</p>
"
11128,414,2008-08-14T14:38:19Z,11060,0,"<p>Yes, results are the ONLY thing that matters. The real chore is writing a framework that allows your generated code to run independently... spend your time there.</p>
"
11235,1343,2008-08-14T15:46:01Z,11060,0,"<p>If you are running on *nux you might consider dumping the unittest framework in favor of a bash script or makefile. on windows you might consider building a shell app/function that runs the generator and then uses the code (as another process) and unittest that.</p>

<p>A third option would be to generate the code and then build an app from it that includes nothing but a unittest. Again you would need a shell script or whatnot to run this for each input. As to how to encode the expected behavior, it occurs to me that it could be done in much the same way as you would for the C++ code just using the generated interface rather than the C++ one.</p>
"
11443,825,2008-08-14T18:15:42Z,11060,4,"<p>Recall that ""unit testing"" is only one kind of testing.  You should be able to unit test the <strong>internal</strong> pieces of your code generator.  What you're really looking at here is system level testing (a.k.a. regression testing).  It's not just semantics... there are different mindsets, approaches, expectations, etc.  It's certainly more work, but you probably need to bite the bullet and set up an end-to-end regression test suite: fixed C++ files -> SWIG interfaces -> python modules -> known output.  You really want to check the known input (fixed C++ code) against expected output (what comes out of the final Python program).  Checking the code generator results directly would be like diffing object files...</p>
"
12166,995,2008-08-15T11:56:02Z,2933,13,"<p>An alternative tool to py2exe is <a href=""http://pypi.python.org/pypi/bbfreeze/"">bbfreeze</a> which generates executables for windows and linux. It's newer than py2exe and handles eggs quite well. I've found it magically works better without configuration for a wide variety of applications.</p>
"
12167,1344,2008-08-15T12:00:37Z,2933,2,"<p>I'm not sure that this is the best way to do it, but when I'm deploying Ruby GUI apps (not Python, but has the same ""problem"" as far as .exe's are concerned) on Windows, I just write a short launcher in C# that calls on my main script. It compiles to an executable, and I then have an application executable.</p>
"
12454,1448,2008-08-15T16:38:59Z,1983,2,"<p>Whenever I need to pass in a collection of items to a function, if I want the function to not change the values passed in - I use tuples. </p>

<p>Else if I want to have the function to alter the values, I use list. </p>

<p>Always if you are using external libraries and need to pass in a list of values to a function and are unsure about the integrity of the data, use a tuple. </p>
"
12557,1416,2008-08-15T18:00:37Z,1983,7,"<p>The notion of tuples are highly expressive:</p>

<ul>
<li><p>Pragmatically, they are great for packing and unpacking values (<code>x,y=coord</code>).</p></li>
<li><p>In combination with dictionaries (hash tables), they allow forms of mapping that would otherwise require many levels of association.  For example, consider marking that (x,y) has been found.</p>

<pre><code>// PHP
if (!isset($found[$x])) {
    $found[$x] = Array();
    $found[$x][$y] = true;
} else if (!isset($found[$x][$y])) {
    $found[$x][$y] = true;
}


# Python
found[(x,y)] = True # parens added for clarity
</code></pre></li>
<li><p>Lists should be used with the expectation of operations on its contents (hence the various mentions of immutability).  One will want to pop, push, splice, slice, search, insert before, insert after, etc with a list.</p></li>
<li><p>Tuples should be a low-level representation of an object, where simple comparisons are made, or operations such as extracting the n'th element or n elements in a predictable fashion, such as the coordinates example given earlier.</p></li>
<li><p>Lastly, lists are not hashable, so the type of mapping done with dictionaries (hash tables in Perl, associative arrays in PHP) must be done with tuples.</p>

<p>Here's a simple example of tuples and dictionaries, together at last:</p>

<pre><code>""""""
couple is a tuple of two people
doesLike is a dictionary mapping couples to True or False
""""""
couple = ""john"", ""jane""
doesLike = dict()
doesLike[couple] = True
doesLike[""jane"", ""john""] = False # unrequited love :'(
</code></pre></li>
</ul>
"
12609,1448,2008-08-15T19:04:13Z,12592,45,"<p>Yes. You can do it. The <a href=""https://docs.python.org/3/library/doctest.html"">doctest module documentation</a> and Wikipedia has an <a href=""http://en.wikipedia.org/wiki/Doctest#Example_2%3a_doctests_embedded_in_a_README.txt_file"">example</a> of it.</p>

<pre><code>   &gt;&gt;&gt; x
   Traceback (most recent call last):
     ...
   NameError: name 'x' is not defined
</code></pre>
"
13040,995,2008-08-16T07:57:53Z,12591,1,"<p>Can you give an example? According to the <a href=""http://codespeak.net/lxml/validation.html"" rel=""nofollow"">lxml validation docs</a>, lxml can handle DTD validation (specified in the XML doc or externally in code) and system catalogs, which covers most cases I can think of.</p>

<pre><code>f = StringIO(""&lt;!ELEMENT b EMPTY&gt;"")
dtd = etree.DTD(f)
dtd = etree.DTD(external_id = ""-//OASIS//DTD DocBook XML V4.2//EN"")
</code></pre>
"
13107,1531,2008-08-16T12:35:36Z,1476,204,"<p>For reference&mdash;<em>future</em> Python possibilities:<br />
Starting with Python 2.6 you can express binary literals using the prefix <strong>0b</strong> or <strong>0B</strong>:</p>

<pre><code>&gt;&gt;&gt; 0b101111
47
</code></pre>

<p>You can also use the new <strong>bin</strong> function to get the binary representation of a number:</p>

<pre><code>&gt;&gt;&gt; bin(173)
'0b10101101'
</code></pre>

<p>Development version of the documentation: <a href=""http://docs.python.org/dev/whatsnew/2.6.html#pep-3127-integer-literal-support-and-syntax"">What's New in Python 2.6</a></p>
"
13399,242853,2008-08-16T22:37:06Z,13396,0,"<p>Depends on the language and what you need to do, a ""map"" as it's called in many languages could be what you're looking for. I don't know C#, but according to <a href=""http://blogs.msdn.com/devdev/archive/2006/06/30/652802.aspx"" rel=""nofollow"">this</a> page, .NET 2.0 calls map ""ConvertAll"".</p>

<p>The meaning of ""map"" is pretty simple - take a list, and apply a function to each element of it, returning a new list. You may also be looking for ""filter"", which would give you a list of items that satisfy a predicate in another list.</p>
"
13403,1190,2008-08-16T22:47:53Z,13396,1,"<p>in Ruby:</p>

<pre><code>intArray.select { |x| x &gt; 3 }.each do |x|
  # do other processing
end
</code></pre>

<p>or if ""other processing"" is a short one-liner:</p>

<pre><code>intArray.select { |x| x &gt; 3 }.each { |x| something_that_uses x }
</code></pre>

<p>lastly, if you want to return a new array containing the results of the processing of those elements greater than 3:</p>

<pre><code>intArray.select { |x| x &gt; 3 }.map { |x| do_something_to x }
</code></pre>
"
13405,429,2008-08-16T22:56:30Z,13396,2,"<p>In Python, you have <a href=""http://docs.python.org/tut/node7.html#SECTION007130000000000000000"" rel=""nofollow"" title=""Human Interface Guidelines"">filter and map</a>, which can so what you want:</p>

<pre><code>map(lambda x: foo(x + 1) filter(lambda x: x &gt; 3, intArray))
</code></pre>

<p>There's also <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"" rel=""nofollow"">list comprehensions</a> which can do both in one easy statement:</p>

<pre><code>[f(x + 1) for x in intArray if x &gt; 3]
</code></pre>
"
13406,960,2008-08-16T23:06:52Z,13396,3,"<p>In C# you can apply selective processing on anything that lives inside an IEnumerable like this:  </p>

<pre><code>intArray.Where(i =&gt; i &gt; 3).ConvertAll();
DoStuff(intArray.Where(i =&gt; i 3));
</code></pre>

<p>Etc..</p>
"
13435,891,2008-08-17T00:44:57Z,13396,4,"<p>The increment in the original <code>foreach</code> loop will not affect the contents of the array, the only way to do this remains a <code>for</code> loop:</p>

<pre><code>for(int i = 0; i &lt; intArray.Length; ++i)
{
    if(intArray[i] &gt; 3) ++intArray[i];
}
</code></pre>

<p>Linq is not intended to modify existing collections or sequences. It creates new sequences based on existing ones. It is possible to achieve the above code using Linq, though it is slightly against its purposes:</p>

<pre><code>var newArray1 = from i in intArray select ((i &gt; 3) ? (i + 1) : (i));
var newArray2 = intArray.Select(i =&gt; (i &gt; 3) ? (i + 1) : (i));
</code></pre>

<p>Using <code>where</code> (or equivalent), as shown in some of the other answers, will exclude any values less than or equal to 3 from the resulting sequence.</p>

<pre><code>var intArray = new int[] { 10, 1, 20, 2 };
var newArray = from i in intArray where i &gt; 3 select i + 1;
// newArray == { 11, 21 }
</code></pre>

<p>There is a <code>ForEach</code> method on arrays that will allow you to use a lambda function instead of a <code>foreach</code> block, though for anything more than a method call I would stick with <code>foreach</code>.</p>

<pre><code>intArray.ForEach(i =&gt; DoSomething(i));
</code></pre>
"
13456,1554,2008-08-17T01:26:52Z,13454,0,"<p>You can obviously concatenate everything together:</p>

<pre><code>cleaned = stringwithslashes.replace(""\\n"",""\n"").replace(""\\r"",""\n"").replace(""\\"","""")
</code></pre>

<p>Is that what you were after? Or were you hoping for something more terse?</p>
"
13579,1370,2008-08-17T10:28:00Z,13454,-4,"<p>Python has a built-in escape() function analogous to PHP's addslashes, but no unescape() function (stripslashes), which in my mind is kind of ridiculous.</p>

<p>Regular expressions to the rescue (code not tested):</p>

<pre><code>p = re.compile( '\\(\\\S)')
p.sub('\1',escapedstring)
</code></pre>

<p>In theory that takes anything of the form \\(not whitespace) and returns \(same char)</p>

<p>edit: Upon further inspection, Python regular expressions are broken as all hell;</p>

<pre><code>&gt;&gt;&gt; escapedstring
'This is a \\n\\n\\n test'
&gt;&gt;&gt; p = re.compile( r'\\(\S)' )
&gt;&gt;&gt; p.sub(r""\1"",escapedstring)
'This is a nnn test'
&gt;&gt;&gt; p.sub(r""\\1"",escapedstring)
'This is a \\1\\1\\1 test'
&gt;&gt;&gt; p.sub(r""\\\1"",escapedstring)
'This is a \\n\\n\\n test'
&gt;&gt;&gt; p.sub(r""\(\1)"",escapedstring)
'This is a \\(n)\\(n)\\(n) test'
</code></pre>

<p>In conclusion, what the hell, Python.</p>
"
13598,745,2008-08-17T12:15:13Z,13454,10,"<p>Not totally sure this is what you want, but..</p>

<pre><code>cleaned = stringwithslashes.decode('string_escape')
</code></pre>
"
13608,893,2008-08-17T12:55:25Z,13454,2,"<p>It sounds like what you want could be reasonably efficiently handled through regular expressions:</p>

<pre><code>import re
def stripslashes(s):
    r = re.sub(r""\\(n|r)"", ""\n"", s)
    r = re.sub(r""\\"", """", r)
    return r
cleaned = stripslashes(stringwithslashes)
</code></pre>
"
13844,1421,2008-08-17T19:01:02Z,13791,3,"<p>Well, I think you might have missed the r or miscounted the backslashes...</p>

<pre><code>""\\n"" == r""\n""

&gt;&gt;&gt; import re
&gt;&gt;&gt; mystring = r""This is \\n a test \\r""
&gt;&gt;&gt; p = re.compile( r""[\\][\\](.)"" )
&gt;&gt;&gt; print p.sub( r""\\\1"", mystring )
This is \n a test \r
&gt;&gt;&gt;
</code></pre>

<p>Which, if I understood is what was requested.</p>

<p>I suspect the more common request is this:</p>

<pre><code>&gt;&gt;&gt; d = {'n':'\n', 'r':'\r', 'f':'\f'}
&gt;&gt;&gt; p = re.compile(r""[\\]([nrfv])"")
&gt;&gt;&gt; print p.sub(lambda mo: d[mo.group(1)], mystring)
This is \
 a test \
&gt;&gt;&gt;
</code></pre>

<p>The interested student should also read Ken Thompson's <a href=""http://cm.bell-labs.com/who/ken/trust.html"" rel=""nofollow"" title=""Cherry G80-11900"">Reflections on Trusting Trust""</a>, wherein our hero uses a similar example to explain the perils of trusting compilers you haven't bootstrapped from machine code yourself.</p>
"
13869,893,2008-08-17T19:26:33Z,13791,0,"<p>You are being tricked by Python's representation of the result string. The Python expression:</p>

<pre><code>'This is \\n a test \\r'
</code></pre>

<p>represents the string</p>

<pre><code>This is \n a test \r
</code></pre>

<p>which is I think what you wanted. Try adding 'print' in front of each of your p.sub() calls to print the actual string returned instead of a Python representation of the string.</p>

<pre><code>&gt;&gt;&gt; mystring = r""This is \n a test \r""
&gt;&gt;&gt; mystring
'This is \\n a test \\r'
&gt;&gt;&gt; print mystring
This is \n a test \r
</code></pre>
"
13875,1421,2008-08-17T19:32:33Z,13857,37,"<p>It's simple: A function that references variables from a containing scope, potentially after flow-of-control has left that scope. That last bit is very useful:</p>

<pre><code>&gt;&gt;&gt; def makeConstantAdder(x):
...     constant = x
...     def adder(y):
...         return y + constant
...     return adder
... 
&gt;&gt;&gt; f = makeConstantAdder(12)
&gt;&gt;&gt; f(3)
15
&gt;&gt;&gt; g = makeConstantAdder(4)
&gt;&gt;&gt; g(3)
7
</code></pre>

<p>Note that 12 and 4 have ""disappeared"" inside f and g, respectively, this feature is what make f and g proper closures.</p>
"
13882,1370,2008-08-17T19:40:49Z,13791,0,"<p>The idea is that I'll read in an escaped string, and unescape it (a feature notably lacking from Python, which you shouldn't need to resort to regular expressions for in the first place). Unfortunately I'm not being tricked by the backslashes...</p>

<p>Another illustrative example:</p>

<pre><code>&gt;&gt;&gt; mystring = r""This is \n ridiculous""
&gt;&gt;&gt; print mystring
This is \n ridiculous
&gt;&gt;&gt; p = re.compile( r""\\(\S)"" )
&gt;&gt;&gt; print p.sub( 'bloody', mystring )
This is bloody ridiculous
&gt;&gt;&gt; print p.sub( r'\1', mystring )
This is n ridiculous
&gt;&gt;&gt; print p.sub( r'\\1', mystring )
This is \1 ridiculous
&gt;&gt;&gt; print p.sub( r'\\\1', mystring )
This is \n ridiculous
</code></pre>

<p>What I'd like it to print is</p>

<pre><code>This is 
ridiculous
</code></pre>
"
13902,1659,2008-08-17T20:20:20Z,13857,6,"<p>I've never heard of transactions being used in the same context as explaining what a closure is and there really aren't any transaction semantics here.</p>

<p>It's called a closure because it ""closes over"" the outside variable (constant)--i.e., it's not just a function but an enclosure of the environment where the function was created. </p>

<p>In the following example, calling the closure g after changing x will also change the value of x within g, since g closes over x:</p>

<pre><code>x = 0

def f():
    def g(): 
        return x * 2
    return g


closure = f()
print(closure()) # 0
x = 2
print(closure()) # 4
</code></pre>
"
13906,150,2008-08-17T20:25:18Z,13857,13,"<p>I like <a href=""http://effbot.org/zone/closure.htm"">this rough, succinct definition</a>:</p>

<blockquote>
  <p>A function that can refer to environments that are no longer active.</p>
</blockquote>

<p>I'd add</p>

<blockquote>
  <p>A closure allows you to bind variables into a function <em>without passing them as parameters</em>.</p>
</blockquote>

<p>Decorators which accept parameters are a common use for closures.  Closures are a common implementation mechanism for that sort of ""function factory"".  I frequently choose to use closures in the <a href=""http://c2.com/cgi/wiki?StrategyPattern"">Strategy Pattern</a> when the strategy is modified by data at run-time.</p>

<p>In a language that allows anonymous block definition -- e.g., Ruby, C# -- closures can be used to implement (what amount to) novel new control structures.  The lack of anonymous blocks is among <a href=""http://ivan.truemesh.com/archives/000411.html"">the limitations of closures in Python</a>.</p>
"
13943,1472,2008-08-17T21:36:32Z,13791,7,"<p>Isn't that what <a href=""#13844"">Anders' second example</a> does?</p>

<p>In 2.5 there's also a <code>string-escape</code> encoding you can apply:</p>

<pre><code>&gt;&gt;&gt; mystring = r""This is \n a test \r""
&gt;&gt;&gt; mystring.decode('string-escape')
'This is \n a test \r'
&gt;&gt;&gt; print mystring.decode('string-escape')
This is 
 a test 
&gt;&gt;&gt;
</code></pre>
"
13949,1667,2008-08-17T21:46:02Z,13941,47,"<p>Have you tried :</p>

<pre><code>import sys
sys.stdout.write('\a')
sys.stdout.flush()
</code></pre>

<p>That works for me here on Mac OS 10.5</p>

<p>Actually, I think your original attempt works also with a little modification:</p>

<pre><code>print('\a')
</code></pre>

<p>(You just need the single quotes around the character sequence).</p>
"
13958,1370,2008-08-17T21:55:54Z,13791,0,"<p>Mark; his second example requires every escaped character thrown into an array initially, which generates a KeyError if the escape sequence happens not to be in the array. It will die on anything but the three characters provided (give \v a try), and enumerating every possible escape sequence every time you want to unescape a string (or keeping a global array) is a really bad solution. Analogous to PHP, that's using <code>preg_replace_callback()</code> with a lambda instead of <code>preg_replace()</code>, which is utterly unnecessary in this situation.</p>

<p>I'm sorry if I'm coming off as a dick about it, I'm just utterly frustrated with Python. This is supported by every other regular expression engine I've ever used, and I can't understand why this wouldn't work.</p>

<p>Thank you for responding; the <code>string.decode('string-escape')</code> function is precisely what i was looking for initially. If someone has a general solution to the regex backreference problem, feel free to post it and I'll accept that as an answer as well.</p>
"
13959,1472,2008-08-17T21:56:10Z,13941,4,"<p>I had to turn off the ""Silence terminal bell"" option in my active Terminal Profile in iTerm for <code>print('\a')</code> to work. It seemed to work fine by default in Terminal.</p>

<p>You can also use the Mac module <code>Carbon.Snd</code> to play the system beep:</p>

<pre><code>&gt;&gt;&gt; import Carbon.Snd
&gt;&gt;&gt; Carbon.Snd.SysBeep(1)
&gt;&gt;&gt;
</code></pre>

<p>The Carbon modules don't have any documentation, so I had to use <code>help(Carbon.Snd)</code> to see what functions were available. It seems to be a direct interface onto Carbon, so the docs on Apple Developer Connection probably help.</p>
"
14304,242853,2008-08-18T08:06:30Z,14281,0,"<p>You could loop through the zip files, reading individual files using the zipfile module and running your regex on those, eliminating to unzip all the files at once. </p>

<p>I'm fairly certain that you can't run a regex over the zipped data, at least not meaningfully.</p>
"
14314,1404,2008-08-18T08:10:57Z,14281,0,"<p>To access the contents of a zip file you have to unzip it, although the zipfile package makes this fairly easy, as you can unzip each file within an archive individually.</p>

<p><a href=""http://docs.python.org/lib/module-zipfile.html"" rel=""nofollow"">Python zipfile module</a></p>
"
14320,116,2008-08-18T08:19:06Z,14281,8,"<p>There's nothing that will automatically do what you want.</p>

<p>However, there is a python zipfile module that will make this easy to do.  Here's how to iterate over the lines in the file.</p>

<pre><code>#!/usr/bin/python

import zipfile
f = zipfile.ZipFile('myfile.zip')

for subfile in f.namelist():
    print subfile
    data = f.read(subfile)
    for line in data.split('\n'):
        print line
</code></pre>
"
14391,1659,2008-08-18T09:43:10Z,14389,14,"<p>Use a subrange of [\u0000-\uFFFF] for what you want.</p>

<p>You can also use the re.UNICODE compile flag. <a href=""http://docs.python.org/lib/re-syntax.html"">The docs</a> say that if UNICODE is set, \w will match the characters [0-9_] plus whatever is classified as alphanumeric in the Unicode character properties database. </p>

<p>See also <a href=""http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-05/2560.html"">http://coding.derkeiler.com/Archive/Python/comp.lang.python/2004-05/2560.html</a>.</p>
"
14399,914,2008-08-18T09:53:13Z,14389,0,"<p>\X seems to be available as a generic word-character in some languages, it allows you to match a single character disregarding of how many bytes it takes up. Might be useful.</p>
"
14420,1633,2008-08-18T10:17:35Z,14389,4,"<p>In Mastering Regular Expressions from Jeffrey Friedl (great book) it is mentioned that you could use \p{Letter} which will match unicode stuff that is considered a letter.</p>
"
15261,1813,2008-08-18T21:35:39Z,8154,2,"<p>You might want to check MySQL's timeout variables:</p>

<pre><code>show variables like '%timeout%';
</code></pre>

<p>You're probably interested in <code>wait_timeout</code> (less likely but possible: <code>interactive_timeout</code>).  On Debian and Ubuntu, the defaults are 28800 (MySQL kills connections after 8 hours), but maybe the default for your platform is different or whoever administrates the server has configured things differently.</p>

<p>AFAICT, <code>pool_recycle</code> doesn't actually keep the connections alive, it expires them on its own before MySQL kills them.  I'm not familiar with pylons, but if causing the connections to intermittently do a <code>SELECT 1;</code> is an option, that will keep them alive at the cost of basically no server load and minimal network traffic.  One final thought: are you somehow managing to use a connection that pylons thinks it has expired?</p>
"
15291,1797,2008-08-18T22:06:02Z,4942,0,"<p>I agree with mreggen. Tell them by working in Python you can get things done faster. Getting things done faster possibly means money saved by the client. In the least it means that you are working with a language you a more comfortable in, meaning faster development, debugging, and refactoring time. There will be less time spent looking up documentation on what function to use to find the length of a string, etc. </p>
"
15296,1199387,2008-08-18T22:10:13Z,4942,4,"<p>It's one of the preferred languages over at Google - It's several years ahead of Ruby in terms of ""maturity"" (what ever that really means - but managers like that). Since it's prefered by Google you can also run it on the Google App Engine.</p>

<p>Mircosoft is also embracing Python, and will have a v2.0 of IronPython coming out shortly. They are working on a Ruby implementation as well, but the Python version is way ahead, and is actually ""ready for primetime"". That give you the possibility for easy integration with .NET code, as well as being able to write client side RIAs in Python when Silverlight 2 ships.</p>
"
15931,995,2008-08-19T09:39:56Z,15798,28,"<p>Another good option is <a href=""http://lxml.de/validation.html"" rel=""nofollow"">lxml's validation</a> which I find quite pleasant to use.</p>

<p>A simple example taken from the lxml site:</p>

<pre><code>from StringIO import StringIO

from lxml import etree

dtd = etree.DTD(StringIO(""""""&lt;!ELEMENT foo EMPTY&gt;""""""))
root = etree.XML(""&lt;foo/&gt;"")
print(dtd.validate(root))
# True

root = etree.XML(""&lt;foo&gt;bar&lt;/foo&gt;"")
print(dtd.validate(root))
# False
print(dtd.error_log.filter_from_errors())
# &lt;string&gt;:1:0:ERROR:VALID:DTD_NOT_EMPTY: Element foo was declared EMPTY this one has content
</code></pre>
"
15938,446497,2008-08-19T09:45:44Z,2933,3,"<p>For the GUI itself:</p>

<p><a href=""http://wiki.python.org/moin/PyQt"" rel=""nofollow"">PyQT</a> is pretty much the reference.</p>

<p>Another way to develop a rapid user interface is to write a web app,
have it run locally and display the app in the browser.</p>

<p>Plus, if you go for the Tkinter option suggested by lubos hasko
you may want to try portablepy to have your app run on Windows environment
without Python.</p>
"
16189,985,2008-08-19T13:51:47Z,5136,1,"<p>Perhaps try <a href=""http://python.net/crew/theller/ctypes/"" rel=""nofollow"">ctypes </a>instead of SWIG. If it has been included as a part of Python 2.5, then it must be good :-)</p>
"
16191,1694,2008-08-19T13:52:23Z,16067,1,"<p>In my experience, there are two easy ways to call into C code from Python code.  There are other approaches, all of which are more annoying and/or verbose.</p>

<p>The first and easiest is to compile a bunch of C code as a separate shared library and then call functions in that library using ctypes.  Unfortunately, passing anything other than basic data types is non-trivial.</p>

<p>The second easiest way is to write a Python module in C and then call functions in that module.  You can pass anything you want to these C functions without having to jump through any hoops.  And it's easy to call Python functions or methods from these C functions, as described here: <a href=""https://docs.python.org/extending/extending.html#calling-python-functions-from-c"" rel=""nofollow"">https://docs.python.org/extending/extending.html#calling-python-functions-from-c</a></p>

<p>I don't have enough experience with SWIG to offer intelligent commentary.  And while it is possible to do things like pass custom Python objects to C functions through ctypes, or to define new Python classes in C, these things are annoying and verbose and I recommend taking one of the two approaches described above.</p>
"
16875,92,2008-08-19T20:24:18Z,16861,0,"<p>If you are using a framework like <a href=""http://www.djangoproject.com/"" rel=""nofollow"">django</a>, the framework can easily do this for you using standard filters.  In fact, I'm pretty sure django automatically does it unless you tell it not to.</p>

<p>Otherwise, I would recommend using some sort of regex validation before accepting inputs from forms.  I don't think there's a silver bullet for your problem, but using the re module, you should be able to construct what you need.</p>
"
16929,1694,2008-08-19T20:51:39Z,16861,6,"<p>Jeff Atwood himself described how StackOverflow.com sanitizes user input (in non-language-specific terms) on the Stack Overflow blog: <a href=""http://blog.stackoverflow.com/2008/06/safe-html-and-xss/"" rel=""nofollow"">http://blog.stackoverflow.com/2008/06/safe-html-and-xss/</a></p>

<p>However, as Justin points out, if you use Django templates or something similar then they probably sanitize your HTML output anyway.</p>

<p>SQL injection also shouldn't be a concern.  All of Python's database libraries (MySQLdb, cx_Oracle, etc) always sanitize the parameters you pass.  These libraries are used by all of Python's object-relational mappers (such as Django models), so you don't need to worry about sanitation there either.</p>
"
17287,1057,2008-08-20T01:20:48Z,17250,0,"<p>You can use the <a href=""http://www.chilkatsoft.com/python.asp"" rel=""nofollow"">Chilkat</a> library.  It's commercial, but has a free evaluation and seems pretty nice.</p>

<p>Here's an example I got from <a href=""http://www.example-code.com/python/zip.asp"" rel=""nofollow"">here</a>:</p>

<pre><code>import chilkat

# Demonstrates how to create a WinZip-compatible 128-bit AES strong encrypted zip
zip = chilkat.CkZip()
zip.UnlockComponent(""anything for 30-day trial"")

zip.NewZip(""strongEncrypted.zip"")

# Set the Encryption property = 4, which indicates WinZip compatible AES encryption.
zip.put_Encryption(4)
# The key length can be 128, 192, or 256.
zip.put_EncryptKeyLength(128)
zip.SetPassword(""secret"")

zip.AppendFiles(""exampleData/*"",True)
zip.WriteZip()
</code></pre>
"
17300,99,2008-08-20T01:45:05Z,16067,6,"<p>The best way to plan for an eventual transition to compiled code is to write the performance sensitive portions as a module of simple functions in a <a href=""http://en.wikipedia.org/wiki/Functional_programming"" rel=""nofollow"">functional style</a> (stateless and without side effects), which accept and return basic data types.</p>

<p>This will provide a one-to-one mapping from your Python prototype code to the eventual compiled code, and will let you use <a href=""https://docs.python.org/library/ctypes.html"" rel=""nofollow"">ctypes</a> easily and avoid a whole bunch of headaches.</p>

<p>For peak fitting, you'll almost certainly need to use arrays, which will complicate things a little, but is still very doable with ctypes.</p>

<p>If you really want to use more complicated data structures, or modify the passed arguments, <a href=""http://www.swig.org/"" rel=""nofollow"">SWIG</a> or <a href=""https://docs.python.org/extending/"" rel=""nofollow"">Python's standard C-extension interface</a> will let you do what you want, but with some amount of hassle.</p>

<p>For what you're doing, you may also want to check out <a href=""http://numpy.scipy.org/"" rel=""nofollow"">NumPy</a>, which might do some of the work you would want to push to C, as well as offering <a href=""http://projects.scipy.org/scipy/numpy/wiki/NumPyCAPI"" rel=""nofollow"">some additional help in moving data back and forth between Python and C</a>.</p>
"
17933,1199,2008-08-20T13:25:23Z,17893,33,"<p>Try the <code>entry_points.console_scripts</code> parameter in the setup() call. As described in the <a href=""http://peak.telecommunity.com/DevCenter/setuptools#automatic-script-creation"">setuptools docs</a>, this should do what I think you want.</p>

<p>To reproduce here:</p>

<pre><code>from setuptools import setup

setup(
    # other arguments here...
    entry_points = {
        'console_scripts': [
            'foo = package.module:func',
            'bar = othermodule:somefunc',
        ],
    }
)
</code></pre>
"
19152,145,2008-08-21T00:36:33Z,19151,90,"<p>First of all the <a href=""https://docs.python.org/3/library/itertools.html"">itertools module</a> is incredibly useful for all sorts of cases in which an iterator would be useful, but here is all you need to create an iterator in python:</p>

<blockquote>
  <p>yield</p>
</blockquote>

<p>Isn't that cool?  Yield can be used to replace a normal <strong>return</strong> in a function.  It returns the object just the same, but instead of destroying state and exiting, it saves state for when you want to execute the next iteration.  Here is an example of it in action pulled directly from the <a href=""http://docs.python.org/lib/itertools-functions.html"">itertools function list</a>:</p>

<pre><code> def count(n=0):
     while True:
         yield n
         n += 1
</code></pre>

<p>As stated in the functions description (it's the <strong>count()</strong> function from the itertools module...) , it produces an iterator that returns consecutive integers starting with n.</p>

<p><a href=""https://docs.python.org/2/reference/expressions.html#generator-expressions"">Generator expressions</a> are a whole other can of worms (awesome worms!).  They may be used in place of a <a href=""http://www.secnetix.de/olli/Python/list_comprehensions.hawk"">List Comprehension</a> to save memory (list comprehensions create a list in memory that is destroyed after use if not assigned to a variable, but generator expressions can create a Generator Object... which is a fancy way of saying Iterator). Here is an example of a generator expression definition:</p>

<pre><code>gen = (n for n in xrange(0,11))
</code></pre>

<p>This is very similar to our iterator definition above except the full range is predetermined to be between 0 and 10.</p>

<p>I just found <strong>xrange()</strong> (suprised I hadn't seen it before...) and added it to the above example.  <strong>xrange()</strong> is an iterable version of <strong>range()</strong> which has the advantage of not prebuilding the list.  It would be  very useful if you had a giant corpus of data to iterate over and only had so much memory to do it in.</p>
"
19343,429,2008-08-21T04:36:29Z,19339,397,"<p><a href=""http://docs.python.org/library/functions.html#zip""><code>zip</code></a> is its own inverse! Provided you use the special * operator.</p>

<pre><code>&gt;&gt;&gt; zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]
</code></pre>

<p>The way this works is by calling <code>zip</code> with the arguments:</p>

<pre><code>zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))
</code></pre>

<p>… except the arguments are passed to <code>zip</code> directly (after being converted to a tuple), so there's no need to worry about the number of arguments getting too big.</p>
"
19389,46,2008-08-21T05:59:00Z,19030,0,"<p>maybe you should take the approach of defaulting to: ""the filename is correct"" and work from there to disprove that statement:</p>

<p>with the fact that you only allow filenames with: 'show name', 'season number x episode number' and 'episode name', you know for certain that these items should be separated by a ""-"" (dash) so you have to have 2 of those for a filename to be correct.<br>
if that checks out, you can use your code to check that the show name matches the show name as seen in the parent's parent folder (case insensitive i assume), the season number matches the parents folder numeric value (with or without an extra 0 prepended).</p>

<p>if however you don't see the correct amount of dashes you instantly know that there is something wrong and stop before the rest of the tests etc.</p>

<p>and separately you can check if the file <code>folder.jpg</code> exists and take the necessary actions. <strong>or</strong> do that first and filter that file from the rest of the files in that folder.</p>
"
19665,1094,2008-08-21T11:53:38Z,19654,0,"<p>Well, python is a high level language.. its not hard to learn and if the guys already have programming knowledge it should be much easier to learn.. i like django.. i think it should be a nice try to use django .. </p>
"
19668,279,2008-08-21T11:56:00Z,19654,4,"<p>If the mandate of the new lead is to put the house in order, the current situation should likely be simplified as much as possible prior.  If I had to bring things to order, I wouldn't want to have to manage an ongoing language conversion project on top of everything else, or at least I'd like some choice when initiating the project.  When making your recommendation, did you think about the additional managerial complexity that coming into the middle of a conversion would entail?</p>
"
19685,837,2008-08-21T12:03:43Z,19654,0,"<p>I don't think it's a matter of a programming language as such. </p>

<p>What is the proficiency level of PHP in the team you're talking about? Are they doing spaghetti code or using some structured framework like Zend? If this is the first case then I absolutely understand the guy's interest in Python and Django. It this is the latter, it's just a hype.</p>
"
19692,1344,2008-08-21T12:09:46Z,19654,2,"<p>@darkdog:</p>

<p>Using a new language in production code is about more than easy syntax and high-level capability. You want to be familiar with core APIs and feel like you can fix something through logic instead of having to comb through the documentation.</p>

<p>I'm not saying transitioning to Python would be a bad idea for this company, but I'm with John--keep things simple during the transition. The new lead will appreciate having a say in such decisions.</p>

<p>If you'd really, really, really like to introduce Python, consider writing some extensions or utilities in straight-up Python or in the framework. You won't be upsetting your core initiatives, so it will be a low/no-risk opportunity to prove the merits of a switch.</p>
"
19700,1712,2008-08-21T12:13:51Z,19654,1,"<p>I think the language itself is not an issue here, as python is really nice high level language with good and easy to find, thorough documentation.</p>

<p>From what I've seen, the Django framework is also a great tooklit for web development, giving much the same developer performance boost Rails is touted to give.</p>

<p>The real issue is at the maintenance and management level.</p>

<p>How will this move fragment the maintenance between PHP and Python code. Is there a need to migrate existing code from one platform to another? What problems will adopting Python and Django solve that you have in your current development workflow and frameworks, etc.</p>
"
19715,1694,2008-08-21T12:25:21Z,19654,13,"<p>I recently introduced Python to my company, which does consulting work for the Post Office.  I did this by waiting until there was a project for which I would be the only programmer, then getting permission to do this new project in Python.  I then did another small project in Python with similarly impressive results.  In addition, I used Python for all of my small throwaway assignments (""can you parse the stats in these files into a CSV file organized by date and site?"", etc) and had a quick turnaround time on all of them.</p>

<p>I also evangelized Python a bit; I went out of my way to NOT be obnoxious about it, but I'd occasionally describe why I liked it so much, talked about the personal projects I use it for in my free time and why it's awesome for me, etc.</p>

<p>Eventually we started another project and I convinced everyone to use Python for it.  I took care to point everyone to a lot of documentation, including the specific webpages relating to what they were working on, and every time they had a question, I'd explain how to do things properly by explaining the Pythonic approach to things, etc.</p>

<p>This has worked really well.  However, this might be somewhat different than what you're describing.  In my case I started with moderately small projects and Python is only being used for new projects.  Also, none of my co-workers were really Perl or PHP gurus; they all knew those languages and had been using them for awhile, but it didn't take much effort for them to become more productive in Python than they'd been before.</p>

<p>So if you're talking about new projects with people who currently use PHP but aren't super-experts and don't love that language, then I think switching to Python is a no-brainer.  However, if you're talking about working with a large existing PHP code base with a lot of very experienced PHP programmers who are happy with their current setup, then switching languages is probably not a good idea.  You're probably somewhere in between, so you'll have to weigh the tradeoffs; hopefully my answer will help you do that.</p>
"
19943,2123,2008-08-21T13:47:40Z,19654,0,"<p>I love Python and Django, and use both to develop the our core webapps.</p>

<p>That said, it's hard to make a business case for switching at this point. Specifically:</p>

<ul>
<li>Any new platform is risky compared to staying with the tried and true</li>
<li>You'll have the developer fragmentation you mentioned</li>
<li>It's far easier to find PHP programmers than python programmers</li>
</ul>

<p>Moreover, as other posters have mention, if the issue is more with spaghetti code than PHP itself, there are plenty of nice PHP frameworks that could be used to refactor the code.</p>

<p>That said, if this developer is excited about python, stopping them outright is probably demoralizing. My suggestion would be to encourage them to develop in python, but not the mission critical parts of the app. Instead they could write some utility scripts, some small internal application that needs doing, etc.</p>

<p>In conclusion: I don't recommend switching from PHP, but I do recommend accommodating the developer's interest in some way at work.</p>
"
19968,791,2008-08-21T13:57:41Z,19654,1,"<p>It's really all about schedules.  To me the break should be with a specific project.  If you decide your direction is Django then start new projects with that.  Before you start a new project with a new language/framework, either make sure that you have scheduled time to get up to speed in this new direction, or get up to speed before using on new projects.</p>

<p>I would avoid going with a tool of the month.  Make sure you want it to be your direction and commit some time/resources to learning enough to make a good decision.</p>
"
20065,1595,2008-08-21T14:25:19Z,20063,13,"<p>Use <code>optparse</code> which comes with the standard library. For example:</p>

<pre><code>#!/usr/bin/env python
import optparse

def main():
  p = optparse.OptionParser()
  p.add_option('--person', '-p', default=""world"")
  options, arguments = p.parse_args()
  print 'Hello %s' % options.person

if __name__ == '__main__':
  main()
</code></pre>

<p>Source: <a href=""http://www.ibm.com/developerworks/aix/library/au-pythocli/"" rel=""nofollow"">Using Python to create UNIX command line tools</a></p>

<p>However as of Python 2.7 optparse is deprecated, see: <a href=""http://stackoverflow.com/q/3217673/55075"">Why use argparse rather than optparse?</a></p>
"
20069,446497,2008-08-21T14:26:57Z,20063,14,"<p>Pretty much everybody is using <a href=""http://python.active-venture.com/lib/module-getopt.html"" rel=""nofollow"">getopt</a></p>

<p>Here is the example code for the doc :</p>

<pre><code>import getopt, sys

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], ""ho:v"", [""help"", ""output=""])
    except getopt.GetoptError:
        # print help information and exit:
        usage()
        sys.exit(2)
    output = None
    verbose = False
    for o, a in opts:
        if o == ""-v"":
            verbose = True
        if o in (""-h"", ""--help""):
            usage()
            sys.exit()
        if o in (""-o"", ""--output""):
            output = a
</code></pre>

<p>So in a word, here is how it works.</p>

<p>You've got two types of options. Those who are receiving arguments, and those who are
just like switches.</p>

<p><code>sys.argv</code> is pretty much your <code>char** argv</code> in C. Like in C you skip the first element which is the name of your program and parse only the arguments : <code>sys.argv[1:]</code></p>

<p><code>Getopt.getopt</code> will parse it according to the rule you give in argument.</p>

<p><code>""ho:v""</code> here describes the short arguments : <code>-ONELETTER</code>. The <code>:</code> means that <code>-o</code> accepts one argument.</p>

<p>Finally <code>[""help"", ""output=""]</code> describes long arguments ( <code>--MORETHANONELETTER</code> ).
The <code>=</code> after output once again means that output accepts one arguments.</p>

<p>The result is a list of couple (option,argument)</p>

<p>If an option doesn't accept any argument (like <code>--help</code> here) the <code>arg</code> part is an empty string.
You then usually want to loop on this list and test the option name as in the example.</p>

<p>I hope this helped you.</p>
"
20169,1697,2008-08-21T14:59:54Z,20063,4,"<p>Just in case you might need to, this may help if you need to <strong>grab</strong> unicode arguments on Win32 (2K, XP etc):</p>

<pre><code>
from ctypes import *

def wmain(argc, argv):
    print argc
    for i in argv:
        print i
    return 0

def startup():
    size = c_int()
    ptr = windll.shell32.CommandLineToArgvW(windll.kernel32.GetCommandLineW(), byref(size))
    ref = c_wchar_p * size.value
    raw = ref.from_address(ptr)
    args = [arg for arg in raw]
    windll.kernel32.LocalFree(ptr)
    exit(wmain(len(args), args))
startup()
</code></pre>
"
20222,1412,2008-08-21T15:22:20Z,20063,2,"<p>I prefer optparse to getopt. It's very declarative: you tell it the names of the options and the effects they should have (e.g., setting a boolean field), and it hands you back a dictionary populated according to your specifications.</p>

<p><a href=""http://docs.python.org/lib/module-optparse.html"" rel=""nofollow"">http://docs.python.org/lib/module-optparse.html</a></p>
"
20843,459,2008-08-21T19:13:46Z,20794,3,"<p>Can I mention testing for hardlinks without python? /bin/test has the FILE1 -ef FILE2 condition that is true when files share an inode.</p>

<p>Therefore, something like <code>find . -type f -exec test \{} -ef /path/to/file \; -print</code> works for hard link testing to a specific file.</p>

<p>Which brings me to reading <code>man test</code> and the mentions of <code>-L</code> and <code>-h</code> which both work on one file and return true if that file is a symbolic link, however that doesn't tell you if the target is missing.</p>

<p>I did find that <code>head -0 FILE1</code> would return an exit code of <code>0</code> if the file can be opened and a <code>1</code> if it cannot, which in the case of a symbolic link to a regular file works as a test for whether it's target can be read.</p>
"
20845,430,2008-08-21T19:14:01Z,20794,1,"<p>I'm not a python guy but it looks like os.readlink()?  The logic I would use in perl is to use readlink() to find the target and the use stat() to test to see if the target exists.</p>

<p>Edit: I banged out some perl that demos readlink.  I believe perl's stat and readlink and python's os.stat() and os.readlink()are both wrappers for the system calls, so this should translate reasonable well as proof of concept code:</p>

<pre><code>wembley 0 /home/jj33/swap &gt; cat p
my $f = shift;

while (my $l = readlink($f)) {
  print ""$f -&gt; $l\n"";
  $f = $l;
}

if (!-e $f) {
  print ""$f doesn't exist\n"";
}
wembley 0 /home/jj33/swap &gt; ls -l | grep ^l
lrwxrwxrwx    1 jj33  users          17 Aug 21 14:30 link -&gt; non-existant-file
lrwxrwxrwx    1 root     users          31 Oct 10  2007 mm -&gt; ../systems/mm/20071009-rewrite//
lrwxrwxrwx    1 jj33  users           2 Aug 21 14:34 mmm -&gt; mm/
wembley 0 /home/jj33/swap &gt; perl p mm
mm -&gt; ../systems/mm/20071009-rewrite/
wembley 0 /home/jj33/swap &gt; perl p mmm
mmm -&gt; mm
mm -&gt; ../systems/mm/20071009-rewrite/
wembley 0 /home/jj33/swap &gt; perl p link
link -&gt; non-existant-file
non-existant-file doesn't exist
wembley 0 /home/jj33/swap &gt;
</code></pre>
"
20848,893,2008-08-21T19:15:33Z,20794,11,"<p><a href=""https://docs.python.org/2/library/os.html#os.lstat"" rel=""nofollow"">os.lstat()</a> may be helpful. If lstat() succeeds and stat() fails, then it's probably a broken link.</p>
"
20859,2147,2008-08-21T19:19:24Z,20794,2,"<p><a href=""http://docs.python.org/lib/module-os.path.html"" rel=""nofollow"">os.path</a></p>

<p>You may try using realpath() to get what the symlink points to, then trying to determine if it's a valid file using is file.</p>

<p>(I'm not able to try that out at the moment, so you'll have to play around with it and see what you get)</p>
"
20983,2168,2008-08-21T19:57:36Z,20927,5,"<p>You would also need to then save the message.  Then it that should work.</p>
"
21221,2363,2008-08-21T21:24:10Z,4942,6,"<p>The best sell of Python I've ever seen was by a manager in our group who had a young daughter.  He used a quote attributed to Einstein:</p>

<blockquote>
  <p>If you can't explain something to a six-year-old, you really don't understand it yourself.</p>
</blockquote>

<p>The next few slides of his presentation demonstrated how he was able to teach his young daughter some basic Python in less than 30 minutes, with examples of the code she wrote and an explanation of what it did.</p>

<p>He ended the presentation with a picture of his daughter and her quote ""Programming is fun!""</p>

<p>I would focus on Python's user friendliness and wealth of libraries and frameworks.  There are also a lot of little libraries that you might not get in other languages, and would have to write yourself (i.e. <a href=""http://blog.programmerslog.com/?p=124"">How a C++ developer writes Python</a>).</p>

<p>Good luck!</p>
"
21302,792,2008-08-21T22:02:01Z,19030,2,"<blockquote>
  <p>I want to add a rule that checks for
  the presence of a folder.jpg file in
  each directory, but to add this would
  make the code substantially more messy
  in it's current state..</p>
</blockquote>

<p>This doesn't look bad.  In fact your current code does it very nicely, and Sven mentioned a good way to do it as well:</p>

<ol>
<li>Get a list of all the files</li>
<li>Check for ""required"" files</li>
</ol>

<p>You would just have have add to your dictionary a list of required files:</p>

<pre><code>checker = {
  ...
  'required': ['file', 'list', 'for_required']
}
</code></pre>

<p>As far as there being a better/extensible way to do this?  I am not exactly sure.  I could only really think of a way to possibly drop the ""multiple"" regular expressions and build off of Sven's idea for using a delimiter.  So my strategy would be defining a dictionary as follows (and I'm sorry I don't know Python syntax and I'm a tad to lazy to look it up but it should make sense.  The /regex/ is shorthand for a regex):</p>

<pre><code>check_dict = {
  'delim'    : /\-/,
  'parts'    : [ 'Show Name', 'Episode Name', 'Episode Number' ],
  'patterns' : [/valid name/, /valid episode name/, /valid number/ ],
  'required' : ['list', 'of', 'files'],
  'ignored'  : ['.*', 'hidden.txt'],
  'start_dir': '/path/to/dir/to/test/'
}
</code></pre>

<ol>
<li>Split the filename based on the delimiter.</li>
<li>Check each of the parts.</li>
</ol>

<p>Because its an ordered list you can determine what parts are missing and if a section doesn't match any pattern it is malformed.  Here the <code>parts</code> and <code>patterns</code> have a 1 to 1 ratio.  Two arrays instead of a dictionary enforces the order.</p>

<p>Ignored and required files can be listed.  The <code>.</code> and <code>..</code> files should probably be ignored automatically.  The user should be allowed to input ""globs"" which can be shell expanded.  I'm thinking here of <code>svn:ignore</code> properties, but globbing is natural for listing files.</p>

<p>Here <code>start_dir</code> would be default to the current directory but if you wanted a single file to run automated testing of a bunch of directories this would be useful.</p>

<p>The real loose end here is the path template and along the same lines what path is required for ""valid files"".  I really couldn't come up with a solid idea without writing one large regular expression and taking groups from it... to build a template.  It felt a lot like writing a TextMate language grammar.  But that starts to stray on the ease of use.  The real problem was that the path template was not composed of <code>parts</code>, which makes sense but adds complexity.</p>

<p>Is this strategy in tune with what you were thinking of?</p>
"
21468,446497,2008-08-21T23:54:52Z,21454,75,"<p>From the <a href=""https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.choices"" rel=""nofollow"">Django documentation</a>:</p>

<pre><code>MAYBECHOICE = (
    ('y', 'Yes'),
    ('n', 'No'),
    ('u', 'Unknown'),
)
</code></pre>

<p>And you define a charfield in your model :</p>

<pre><code>married = models.CharField(max_length=1, choices=MAYBECHOICE)
</code></pre>

<p>You can do the same with integer fields if you don't like to have letters
in your db.</p>

<p>In that case, rewrite your choices:</p>

<pre><code>MAYBECHOICE = (
    (0, 'Yes'),
    (1, 'No'),
    (2, 'Unknown'),
)
</code></pre>
"
21937,2257,2008-08-22T07:40:12Z,21934,8,"<p>I think the article ""<a href=""http://www.ibm.com/developerworks/java/library/j-jtp10283/"">Java theory and practice: A brief history of garbage collection</a>"" from IBM should help explain some of the questions you have.</p>
"
21964,2260,2008-08-22T09:10:06Z,21934,40,"<p>There are drawbacks of using reference counting. One of the most mentioned is circular references: Suppose A references B, B references C and C references B. If A were to drop its reference to B, both B and C will still have a reference count of 1 and won't be deleted with traditional reference counting. CPython (reference counting is not part of python itself, but part of the C implementation thereof) catches circular references with a separate garbage collection routine that it runs periodically...</p>

<p>Another drawback: Reference counting can make execution slower. Each time an object is referenced and dereferenced, the interpreter/VM must check to see if the count has gone down to 0 (and then deallocate if it did). Garbage Collection does not need to do this.</p>

<p>Also, Garbage Collection can be done in a separate thread (though it can be a bit tricky). On machines with lots of RAM and for processes that use memory only slowly, you might not want to be doing GC at all! Reference counting would be a bit of a drawback there in terms of performance...</p>
"
21973,1421,2008-08-22T09:21:55Z,21961,1,"<pre><code>mktime(...)
    mktime(tuple) -&gt; floating point number

    Convert a time tuple in local time to seconds since the Epoch.
</code></pre>

<p>local time... fancy that.</p>

<p>The time tuple:</p>

<pre><code>The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (four digits, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.
</code></pre>

<p>Incidentally, we seem to be 6 hours apart:</p>

<pre><code>&gt;&gt;&gt; time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233356400.0
&gt;&gt;&gt; (1233378000.0 - 1233356400)/(60*60)
6.0
</code></pre>
"
21974,2260,2008-08-22T09:22:08Z,21961,0,"<p>Interesting. I don't know, but I did try this:</p>

<pre><code>&gt;&gt;&gt; now = time.mktime((2008, 8, 22, 11 ,17, -1, -1, -1, -1))
&gt;&gt;&gt; tomorrow = time.mktime((2008, 8, 23, 11 ,17, -1, -1, -1, -1))
&gt;&gt;&gt; tomorrow - now
86400.0
</code></pre>

<p>which is what you expected. My guess? Maybe some time correction was done since the epoch. This could be only a few seconds, something like a leap year. I think I heard something like this before, but can't remember exactly how and when it is done...</p>
"
21975,1087,2008-08-22T09:24:25Z,21961,7,"<p>Short answer: Because of timezones.</p>

<p>The Epoch is in UTC.</p>

<p>For example, I'm on IST (Irish Stsandard Time) or GMT+1. time.mktime() is relative to my timezone, so on my system this refers to</p>

<pre><code>&gt;&gt;&gt; time.mktime((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233360000.0
</code></pre>

<p>Because you got the result 1233378000, that would suggest that you're 5 hours behind me</p>

<pre><code>&gt;&gt;&gt; (1233378000 - 1233360000) / (60*60)    
5
</code></pre>

<p>Have a look at the time.gmtime() function which works off UTC.</p>
"
22021,2427,2008-08-22T10:12:25Z,21961,1,"<p>Phil's answer really solved it, but I'll elaborate a little more. Since the epoch is in UTC, if I want to compare other times to the epoch, I need to interpret them as UTC as well.</p>

<pre><code>&gt;&gt;&gt; calendar.timegm((2009, 1, 31, 0, 0, 0, 5, 31, -1))
1233360000
&gt;&gt;&gt; 1233360000 / (60*60*24)
14275
</code></pre>

<p>By converting the time tuple to a timestamp treating is as UTC time, I get a number which <em>is</em> evenly divisible by the number of seconds in a day.</p>

<p>I can use this to convert a date to a days-from-the-epoch representation which is what I'm ultimately after.</p>
"
22157,309844,2008-08-22T12:03:47Z,22149,0,"<p>Python stores Unicode as UTF-16. str() will return the UTF-8 representation of the UTF-16 string.</p>
"
22168,1993,2008-08-22T12:10:14Z,22149,-1,"<p>From <a href=""http://en.wikipedia.org/wiki/UTF-8"" rel=""nofollow"">Wikipedia on UTF-8</a>: </p>

<blockquote>
UTF-8 (8-bit UCS/Unicode Transformation Format) is a <strong>variable-length character encoding for Unicode. It is able to represent any character in the Unicode standard</strong>, yet the initial encoding of byte codes and character assignments for UTF-8 is backwards compatible with ASCII. For these reasons, it is steadily becoming the preferred encoding for e-mail, web pages[1], and other places where characters are stored or streamed.
</blockquote>

<p>So, it's anywhere between one and four bytes depending on which character you wish to represent within the realm of Unicode.</p>

<p><a href=""http://en.wikipedia.org/wiki/Unicode"" rel=""nofollow"">From Wikipedia on Unicode:</a></p>

<blockquote>
In computing, Unicode is an industry standard allowing computers to consistently represent and manipulate text expressed in <strong>most of the world's writing systems</strong>. 
</blockquote>

<p>So it's able to represent most (but not all) of the world's writing systems. </p>

<p>I hope this helps :)</p>
"
22206,370899,2008-08-22T12:32:04Z,22149,-2,"<blockquote>
  <p>so what is a ""Unicode string"" in
  Python?</p>
</blockquote>

<p>Python 'knows' that your string is Unicode. Hence if you do regex on it, it will know which is character and which is not etc, which is really helpful. If you did a strlen it will also give the correct result. As an example if you did string count on Hello, you will get 5 (even if it's Unicode). But if you did a string count of a foreign word and that string was not a Unicode string than you will have much larger result. Pythong uses the information form the Unicode Character Database to identify each character in the Unicode String. Hope that helps. </p>
"
22208,2077,2008-08-22T12:32:59Z,22149,8,"<p>Meanwhile, I did a refined research to verify what the internal representation in Python is, and also what its limits are. ""<a href=""http://www.cmlenz.net/archives/2008/07/the-truth-about-unicode-in-python"">The Truth About Unicode In Python</a>"" is a very good article which cites directly from the Python developers. Apparently, internal representation is either UCS-2 or UCS-4 depending on a compile-time switch. So Jon, it's not UTF-16, but your answer put me on the right track anyway, thanks.</p>
"
22219,1694,2008-08-22T12:40:03Z,21934,11,"<p>Darren Thomas gives a good answer.  However, one big difference between the Java and Python approaches is that with reference counting in the common case (no circular references) objects are cleaned up immediately rather than at some indeterminate later date.</p>

<p>For example, I can write sloppy, non-portable code in CPython such as</p>

<pre><code>def parse_some_attrs(fname):
    return open(fname).read().split(""~~~"")[2:4]
</code></pre>

<p>and the file descriptor for that file I opened will be cleaned up immediately because as soon as the reference to the open file goes away, the file is garbage collected and the file descriptor is freed.  Of course, if I run Jython or IronPython or possibly PyPy, then the garbage collector won't necessarily run until much later; possibly I'll run out of file descriptors first and my program will crash.</p>

<p>So you SHOULD be writing code that looks like</p>

<pre><code>def parse_some_attrs(fname):
    with open(fname) as f:
        return f.read().split(""~~~"")[2:4]
</code></pre>

<p>but sometimes people like to rely on reference counting to always free up their resources because it can sometimes make your code a little shorter.</p>

<p>I'd say that the best garbage collector is the one with the best performance, which currently seems to be the Java-style generational garbage collectors that can run in a separate thread and has all these crazy optimizations, etc.  The differences to how you write your code should be negligible and ideally non-existent.</p>
"
22525,2482,2008-08-22T14:40:21Z,972,3,"<p>What Jason Pratt posted is correct.</p>

<pre><code>&gt;&gt;&gt; class Test(object):
...   def a(self):
...     pass
... 
&gt;&gt;&gt; def b(self):
...   pass
... 
&gt;&gt;&gt; Test.b = b
&gt;&gt;&gt; type(b)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(Test.a)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; type(Test.b)
&lt;type 'instancemethod'&gt;
</code></pre>

<p>As you can see, Python doesn't consider b() any different than a(). In Python all methods are just variables that happen to be functions. </p>
"
22624,1968,2008-08-22T15:12:41Z,22617,103,"<p>Formatting in Python is done via the <a href=""http://docs.python.org/2/library/stdtypes.html#string-formatting"">string formatting (<code>%</code>) operator</a>:</p>

<pre><code>""%02d:%02d:%02d"" % (hours, minutes, seconds)
</code></pre>

<p>/Edit: There's also <a href=""https://docs.python.org/2/library/time.html#time.strftime"">strftime</a>.</p>
"
22630,736,2008-08-22T15:13:45Z,22617,3,"<p>You can use C style string formatting:</p>

<pre><code>""%d:%d:d"" % (hours, minutes, seconds)
</code></pre>

<p>See here, especially: <a href=""https://web.archive.org/web/20120415173443/http://diveintopython3.ep.io/strings.html"" rel=""nofollow"">https://web.archive.org/web/20120415173443/http://diveintopython3.ep.io/strings.html</a></p>
"
22682,1595,2008-08-22T15:38:22Z,22676,286,"<p>In Python 2, use urllib2 which comes with the standard library.</p>

<pre><code>import urllib2
response = urllib2.urlopen('http://www.example.com/')
html = response.read()
</code></pre>

<p>This is the most basic way to use the library, minus any error handling.  You can also do more complex stuff such as changing headers.  The documentation can be found <a href=""http://docs.python.org/2/library/urllib2.html"">here.</a></p>
"
22721,30,2008-08-22T15:58:17Z,22676,118,"<pre class=""lang-py prettyprint-override""><code>import urllib2
mp3file = urllib2.urlopen(""http://www.example.com/songs/mp3.mp3"")
with open('test.mp3','wb') as output:
  output.write(mp3file.read())
</code></pre>

<p>The <code>wb</code> in <code>open('test.mp3','wb')</code> opens a file (and erases any existing file) in binary mode so you can save data with it instead of just text.</p>
"
22723,145,2008-08-22T15:58:52Z,22676,9,"<p>I agree with Corey, urllib2 is more complete than <a href=""http://docs.python.org/lib/module-urllib.html"">urllib</a> and should likely be the module used if you want to do more complex things, but to make the answers more complete, urllib is a simpler module if you want just the basics:</p>

<pre><code>import urllib
response = urllib.urlopen('http://www.example.com/sound.mp3')
mp3 = response.read()
</code></pre>

<p>Will work fine. Or, if you don't want to deal with the ""response"" object you can call <strong>read()</strong> directly:</p>

<pre><code>import urllib
mp3 = urllib.urlopen('http://www.example.com/sound.mp3').read()
</code></pre>
"
22776,394,2008-08-22T16:19:09Z,22676,759,"<p>One more, using <a href=""http://docs.python.org/2/library/urllib.html#urllib.urlretrieve""><code>urlretrieve</code></a>:</p>

<pre><code>import urllib
urllib.urlretrieve (""http://www.example.com/songs/mp3.mp3"", ""mp3.mp3"")
</code></pre>

<p>(for Python 3+ use 'import urllib.request' and urllib.request.urlretrieve)</p>

<p>Yet another one, with a ""progressbar""</p>

<pre><code>import urllib2

url = ""http://download.thinkbroadband.com/10MB.zip""

file_name = url.split('/')[-1]
u = urllib2.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders(""Content-Length"")[0])
print ""Downloading: %s Bytes: %s"" % (file_name, file_size)

file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if not buffer:
        break

    file_size_dl += len(buffer)
    f.write(buffer)
    status = r""%10d  [%3.2f%%]"" % (file_size_dl, file_size_dl * 100. / file_size)
    status = status + chr(8)*(len(status)+1)
    print status,

f.close()
</code></pre>
"
23041,106,2008-08-22T17:58:23Z,22059,0,"<p>Open Calais probably use language parsing technology and language statics to guess which words or phrases are Names, Places, Companies, etc. Then, it is just another step to do some kind of search for those entities and return meta data.</p>

<p>Zementa probably does something similar, but matches the phrases against meta-data attached to images in order to acquire related results.</p>

<p>It certainly isn't easy.</p>
"
23414,2016,2008-08-22T20:34:00Z,23397,0,"<p>Possibly a version of spawn() for python? <a href=""http://en.wikipedia.org/wiki/Spawn_(operating_system)"" rel=""nofollow"">http://en.wikipedia.org/wiki/Spawn_(operating_system)</a></p>
"
23422,893,2008-08-22T20:38:18Z,23397,4,"<p>Have a look at the process management functions in the <a href=""http://python.org/doc/2.5/lib/os-process.html"" rel=""nofollow"">os module</a>. There are function for starting new processes in many different ways, both synchronously and asynchronously.</p>

<p>I should note also that Windows doesn't provide functionality that is exactly like fork() on other systems. To do multiprocessing on Windows, you will need to use the <a href=""http://python.org/doc/2.5/lib/module-threading.html"" rel=""nofollow"">threading</a> module.</p>
"
23510,1694,2008-08-22T21:16:07Z,23397,3,"<p>In addition to the process management code in the os module that Greg pointed out, you should also take a look at the threading module: <a href=""https://docs.python.org/library/threading.html"" rel=""nofollow"">https://docs.python.org/library/threading.html</a></p>

<pre><code>from threading import Thread

def separate_computations(x, y):
    print sum(x for i in range(y))  # really expensive multiplication

Thread(target=separate_compuations, args=[57, 83]).start()
print ""I'm continuing while that other function runs in another thread!""
</code></pre>
"
23703,2551,2008-08-22T22:58:36Z,21934,2,"<p>The latest Sun Java VM actually have multiple GC algorithms which you can tweak.  The Java VM specifications intentionally omitted specifying actual GC behaviour to allow different (and multiple) GC algorithms for different VMs.</p>

<p>For example, for all the people who dislike the ""stop-the-world"" approach of the default Sun Java VM GC behaviour, there are VM such as <a href=""http://www-01.ibm.com/software/webservers/realtime/"" rel=""nofollow"">IBM's WebSphere Real Time</a> which allows real-time application to run on Java.</p>

<p>Since the Java VM spec is publicly available, there is (theoretically) nothing stopping anyone from implementing a Java VM that uses CPython's GC algorithm.</p>
"
24061,1586,2008-08-23T07:43:18Z,13857,11,"<p>To be honest, I understand closures perfectly well except I've never been clear about what exactly is the thing which is the ""closure"" and what's so ""closure"" about it. I recommend you give up looking for any logic behind the choice of term.</p>

<p>Anyway, here's my explanation:</p>

<pre><code>def foo():
   x = 3
   def bar():
      print x
   x = 5
   return bar

bar = foo()
bar()   # print 5
</code></pre>

<p>A key idea here is that the function object returned from foo retains a hook to the local var 'x' even though 'x' has gone out of scope and should be defunct. This hook is to the var itself, not just the value that var had at the time, so when bar is called, it prints 5, not 3.</p>

<p>Also be clear that Python 2.x has limited closure: there's no way I can modify 'x' inside 'bar' because writing 'x = bla' would declare a local 'x' in bar, not assign to 'x' of foo. This is a side-effect of Python's assignment=declaration. To get around this, Python 3.0 introduces the nonlocal keyword:</p>

<pre><code>def foo():
   x = 3
   def bar():
      print x
   def ack():
      nonlocal x
      x = 7
   x = 5
   return (bar, ack)

bar, ack = foo()
ack()   # modify x of the call to foo
bar()   # print 7
</code></pre>
"
24190,893,2008-08-23T12:39:52Z,23907,4,"<p>The first thing that jumps to mind is the possibility of your git history having a nonlinear history. You might have difficulty determining a sensible sequence of commits.</p>

<p>Having said that, it seems like you could keep a log of commit ids and the corresponding lines of code in that commit. In a post-commit hook, starting from the HEAD revision, work backwards (branching to multiple parents if necessary) until all paths reach a commit that you've already seen before. That should give you the total lines of code for each commit id.</p>

<p>Does that help any? I have a feeling that I've misunderstood something about your question.</p>
"
24199,893,2008-08-23T12:49:12Z,24193,2,"<p>I recall that in previous versions of VS, there was a way to add custom build steps to the build process. I used that a lot to do exactly the kind of automated code generation you describe.</p>

<p>I imagine the custom build step feature is still there in 2008.</p>
"
24236,2384,2008-08-23T13:42:39Z,24193,1,"<p>I don't understand what you are trying to do here. Are you trying to execute a Python script that generates a C# file and then compile that with the project? Or are you trying to compile a Python script to C#?</p>
"
24248,2384,2008-08-23T14:07:27Z,24193,1,"<p>OK, I see. Well, as far as I know there isn't any code generator for Python. There is a good introduction on how to roll your own <a href=""http://www.drewnoakes.com/snippets/WritingACustomCodeGeneratorToolForVisualStudio/"" rel=""nofollow"">here</a>.</p>

<p>Actually, that's quite an under-used part of the environment, I suppose it's so because it needs you to use the IDE to compile the project, as it'd seem only the IDE knows about these ""generators"", but MSBuild ignores them.</p>
"
24377,2611,2008-08-23T16:57:28Z,19151,374,"<p>Iterator objects in python conform to the iterator protocol, which basically means they provide two methods: <code>__iter__()</code>  and  <code>next()</code>.  The <code>__iter__</code> returns the iterator object and is implicitly called at the start of loops.  The <code>next()</code> method returns the next value and is implicitly called at each loop increment.  <code>next()</code> raises a StopIteration exception when there are no more value to return, which is implicitly captured by looping constructs to stop iterating.</p>

<p>Here's a simple example of a counter:</p>

<pre><code>class Counter:
    def __init__(self, low, high):
        self.current = low
        self.high = high

    def __iter__(self):
        return self

    def next(self): # Python 3: def __next__(self)
        if self.current &gt; self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.current - 1


for c in Counter(3, 8):
    print c
</code></pre>

<p>This will print:</p>

<pre><code>3
4
5
6
7
8
</code></pre>

<p>This is easier to write using a generator, as covered in a previous answer:</p>

<pre><code>def counter(low, high):
    current = low
    while current &lt;= high:
        yield current
        current += 1

for c in counter(3, 8):
    print c
</code></pre>

<p>The printed output will be the same.  Under the hood, the generator object supports the iterator protocol and does something roughly similar to the class Counter.</p>

<p>David Mertz's article, <a href=""https://www.ibm.com/developerworks/library/l-pycon/"">Iterators and Simple Generators</a>, is a pretty good introduction. </p>
"
24939,267,2008-08-24T09:05:20Z,24931,0,"<p>In which context are you asking?</p>

<p>Are you trying to capture the output from a program you start on the command line?</p>

<p>if so, then this is how to execute it:</p>

<pre><code>somescript.py | your-capture-program-here
</code></pre>

<p>and to read the output, just read from standard input.</p>

<p>If, on the other hand, you're executing that script or cmd.exe or similar from within your program, and want to wait until the script/program has finished, and capture all its output, then you need to look at the library calls you use to start that external program, most likely there is a way to ask it to give you some way to read the output and wait for completion.</p>
"
24942,429,2008-08-24T09:27:54Z,24931,1,"<p>You want <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess</a>. Look specifically at Popen in 17.1.1 and communicate in 17.1.2.</p>
"
24949,2010,2008-08-24T09:39:08Z,24931,9,"<p>If you are talking about the python interpreter or CMD.exe that is the 'parent' of your script then no, it isn't possible. In every POSIX-like system (now you're running Windows, it seems, and that might have some quirk I don't know about, YMMV) each process has three streams, standard input, standard output and standard error. Bu default (when running in a console) these are directed to the console, but redirection is possible using the pipe notation:</p>

<pre><code>python script_a.py | python script_b.py
</code></pre>

<p>This ties the standard output stream of script a to the standard input stream of script B. Standard error still goes to the console in this example. See the article on <a href=""http://en.wikipedia.org/wiki/Standard_streams"" rel=""nofollow"">standard streams</a> on Wikipedia.</p>

<p>If you're talking about a child process, you can launch it from python like so (stdin is also an option if you want two way communication):</p>

<pre><code>import subprocess
# Of course you can open things other than python here :)
process = subprocess.Popen([""python"", ""main.py""], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
x = process.stderr.readline()
y = process.stdout.readline()
process.wait()
</code></pre>

<p>See the Python <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess</a> module for information on managing the process. For communication, the process.stdin and process.stdout pipes are considered standard <a href=""http://docs.python.org/lib/bltin-file-objects.html"" rel=""nofollow"">file objects</a>.</p>

<p>For use with pipes, reading from standard input as <a href=""http://stackoverflow.com/questions/24931/how-to-capture-python-interpreters-andor-cmdexes-output-from-a-python-script#24939"" rel=""nofollow"">lassevk</a> suggested you'd do something like this:</p>

<pre><code>import sys
x = sys.stderr.readline()
y = sys.stdin.readline()
</code></pre>

<p>sys.stdin and sys.stdout are standard file objects as noted above, defined in the <a href=""http://docs.python.org/lib/module-sys.html"" rel=""nofollow"">sys</a> module. You might also want to take a look at the <a href=""http://docs.python.org/lib/module-pipes.html"" rel=""nofollow"">pipes</a> module.</p>

<p>Reading data with readline() as in my example is a pretty naïve way of getting data though. If the output is not line-oriented or indeterministic you probably want to look into <a href=""http://docs.python.org/lib/poll-objects.html"" rel=""nofollow"">polling</a> which unfortunately does not work in windows, but I'm sure there's some alternative out there.</p>
"
24962,188,2008-08-24T10:32:49Z,22617,0,"<p><em>str()</em> in python on an integer will <strong>not</strong> print any decimal places.</p>

<p>If you have a float that you want to ignore the decimal part, then you can use str(int(floatValue)).</p>

<p>Perhaps the following code will demonstrate:</p>

<pre><code>&gt;&gt;&gt; str(5)
'5'
&gt;&gt;&gt; int(8.7)
8
</code></pre>
"
25117,2260,2008-08-24T15:38:21Z,23397,2,"<p>You might also like using the processing module (<a href=""http://pypi.python.org/pypi/processing"" rel=""nofollow"">http://pypi.python.org/pypi/processing</a>). It has lot's of functionality for writing parallel systems with the same API as the threading module...</p>
"
25123,1638,2008-08-24T15:50:54Z,25116,3,"<p>Look at the struct package: <a href=""https://docs.python.org/library/struct.html"" rel=""nofollow"">https://docs.python.org/library/struct.html</a>, it allows you to interpret strings as packed binary data.</p>

<p>Not sure if this will completely answer your question but you can use struct.unpack() to convert binary data to python objects.</p>

<pre>
<code>
import struct
f = open(filename, ""rb"")
s = f.read(8)
x, y = struct.unpack("">hl"", s)
</code>
</pre>

<p>int this example, the "">"" tells to read big-endian the ""h"" reads a 2-byte short, and the ""l"" is for a 4-byte long. you can obviously change these to whatever you need to read out of the binary data...</p>
"
25136,2363,2008-08-24T16:08:37Z,16861,23,"<p>Here is a snippet that will remove all tags not on the white list, and all tag attributes not on the attribues whitelist (so you can't use <code>onclick</code>).</p>

<p>It is a modified version of <a href=""http://www.djangosnippets.org/snippets/205/"">http://www.djangosnippets.org/snippets/205/</a>, with the regex on the attribute values to prevent people from using <code>href=""javascript:...""</code>, and other cases described at <a href=""http://ha.ckers.org/xss.html"">http://ha.ckers.org/xss.html</a>.<br>
(e.g. <code>&lt;a href=""ja&amp;#x09;vascript:alert('hi')""&gt;</code> or <code>&lt;a href=""ja  vascript:alert('hi')""&gt;</code>, etc.)</p>

<p>As you can see, it uses the (awesome) <a href=""http://www.crummy.com/software/BeautifulSoup/"">BeautifulSoup</a> library.</p>

<pre><code>import re
from urlparse import urljoin
from BeautifulSoup import BeautifulSoup, Comment

def sanitizeHtml(value, base_url=None):
    rjs = r'[\s]*(&amp;#x.{1,7})?'.join(list('javascript:'))
    rvb = r'[\s]*(&amp;#x.{1,7})?'.join(list('vbscript:'))
    re_scripts = re.compile('(%s)|(%s)' % (rjs, rvb), re.IGNORECASE)
    validTags = 'p i strong b u a h1 h2 h3 pre br img'.split()
    validAttrs = 'href src width height'.split()
    urlAttrs = 'href src'.split() # Attributes which should have a URL
    soup = BeautifulSoup(value)
    for comment in soup.findAll(text=lambda text: isinstance(text, Comment)):
        # Get rid of comments
        comment.extract()
    for tag in soup.findAll(True):
        if tag.name not in validTags:
            tag.hidden = True
        attrs = tag.attrs
        tag.attrs = []
        for attr, val in attrs:
            if attr in validAttrs:
                val = re_scripts.sub('', val) # Remove scripts (vbs &amp; js)
                if attr in urlAttrs:
                    val = urljoin(base_url, val) # Calculate the absolute url
                tag.attrs.append((attr, val))

    return soup.renderContents().decode('utf8')
</code></pre>

<p>As the other posters have said, pretty much all Python db libraries take care of SQL injection, so this should pretty much cover you.</p>
"
25151,2010,2008-08-24T16:23:13Z,16861,4,"<p>I don't do web development much any longer, but when I did, I did something like so:</p>

<p>When no parsing is supposed to happen, I usually just escape the data to not interfere with the database when I store it, and escape everything I read up from the database to not interfere with html when I display it (cgi.escape() in python).</p>

<p>Chances are, if someone tried to input html characters or stuff, they actually wanted that to be displayed as text anyway. If they didn't, well tough :)</p>

<p>In short always escape what can affect the current target for the data.</p>

<p>When I did need some parsing (markup or whatever) I usually tried to keep that language in a non-intersecting set with html so I could still just store it suitably escaped (after validating for syntax errors) and parse it to html when displaying without having to worry about the data the user put in there interfering with your html.</p>

<p>See also <a href=""http://wiki.python.org/moin/EscapingHtml"" rel=""nofollow"">Escaping HTML</a></p>
"
25180,2010,2008-08-24T16:52:29Z,25116,24,"<p>As long as you don't try to put any unicode data into your <code>StringIO</code> and you are careful NOT to use <code>cStringIO</code> you should be fine.</p>

<p>According to the <a href=""https://docs.python.org/library/stringio.html"" rel=""nofollow"">StringIO</a> documentation, as long as you keep to either unicode or 8-bits everything works as expected. Presumably, <code>StringIO</code> does something special when someone does a <code>f.write(u""asdf"")</code> (which ZipFile does not do, to my knowledge). Anyway;</p>

<pre><code>import zipfile
import StringIO

s = StringIO.StringIO()
z = zipfile.ZipFile(s, ""w"")
z.write(""test.txt"")
z.close()
f = file(""x.zip"", ""w"")
f.write(s.getvalue())
s.close()
f.close()
</code></pre>

<p>works just as expected, and there's no difference between the file in the resulting archive and the original file.</p>

<p>If you know of a particular case where this approach does not work, I'd be most interested to hear about it :)</p>
"
25193,1421,2008-08-24T17:07:57Z,19339,17,"<p>You could also do</p>

<pre><code>result = ([ a for a,b in original ], [ b for a,b in original ])
</code></pre>

<p>It <em>should</em> scale better. Especially if Python makes good on not expanding the list comprehensions unless needed.</p>

<p>(Incidentally, it makes a 2-tuple (pair) of lists, rather than a list of tuples, like <code>zip</code> does.)</p>

<p>If generators instead of actual lists are ok, this would do that:</p>

<pre><code>result = (( a for a,b in original ), ( b for a,b in original ))
</code></pre>

<p>The generators don't munch through the list until you ask for each element, but on the other hand, they do keep references to the original list.</p>
"
25213,1421,2008-08-24T17:28:26Z,594,4,"<p>There's also the way <code>psyco-pg</code> seems to do it... From what I gather, it seems to create dictionary-like row-proxies to map key lookup into the memory block returned by the query. In that case, fetching the whole answer and working with a similar proxy-factory over the rows seems like useful idea. Come to think of it though, it feels more like Lua than Python.</p>

<p>Also, this should be applicable to all <a href=""http://www.python.org/dev/peps/pep-0249/"" rel=""nofollow"">PEP-249 DBAPI2.0</a> interfaces, not just Oracle, or did you mean just <em>fastest</em> using <em>Oracle</em>?</p>
"
25761,1662,2008-08-25T08:08:46Z,25661,1,"<p>You may be interested in <a href=""http://www.daa.com.au/pipermail/pygtk/2006-September/012888.html"" rel=""nofollow"">this message thread</a>.  Looks like they recommend against it.</p>
"
25815,2168,2008-08-25T09:22:22Z,25807,36,"<p><code>C.__bases__</code> is an array of the super classes, so you could implement your hypothetical function like so:</p>

<pre><code>def magicGetSuperClasses(cls):
  return cls.__bases__
</code></pre>

<p>But I imagine it would be easier to just reference <code>cls.__bases__</code> directly in most cases.</p>
"
26611,199,2008-08-25T18:38:10Z,26595,223,"<p><code>is</code> always returns <code>True</code> if it compares the same object instance</p>

<p>Whereas <code>==</code> is ultimately determined by the <code>__eq__()</code> method</p>

<p>i.e.</p>

<pre><code>
>>> class foo(object):
       def __eq__(self, other):
           return True

>>> f = foo()
>>> f == None
True
>>> f is None
False
</code></pre>
"
26626,2772,2008-08-25T18:48:20Z,26595,46,"<p>You may want to read this <a href=""http://mail.python.org/pipermail/python-list/2001-November/094920.html"">object identity and equivalence</a>.</p>

<p>The statement 'is' is used for object identity, it checks if objects refer to the same instance (same address in memory).</p>

<p>And the '==' statement refers to equality (same value).</p>
"
26654,360,2008-08-25T19:04:59Z,26595,3,"<p>For None there shouldn't be a difference between equality (==) and identity (is). The NoneType probably returns identity for equality. Since None is the only instance you can make of NoneType (I think this is true), the two operations are the same. In the case of other types this is not always the case. For example:</p>

<pre><code>list1 = [1, 2, 3]
list2 = [1, 2, 3]
if list1==list2: print ""Equal""
if list1 is list2: print ""Same""
</code></pre>

<p>This would print ""Equal"" since lists have a comparison operation that is not the default returning of identity.</p>
"
26707,1785,2008-08-25T19:45:40Z,26706,1,"<p>One solution, which is a hack of limited usefulness, is when a drag is initiated, store the dragged data in a global or static reference somewhere. This way, in the OnEnter and OnDragOver handlers, it is possible to get a reference to the data being dragged. This is of course only useful for drags within the same application (the same instance of the application, actually).</p>
"
26910,2900,2008-08-25T21:11:03Z,20063,85,"<p><strong>This answer suggests <code>optparse</code> which is appropriate for older Python versions. For Python 2.7 and above, <code>argparse</code> replaces <code>optparse</code>. See <a href=""http://stackoverflow.com/questions/3217673/why-use-argparse-rather-than-optparse"">this answer</a> for more information.</strong></p>

<p>As other people pointed out, you are better off going with optparse over getopt.  getopt is pretty much a one-to-one mapping of the standard getopt(3) C library functions, and not very easy to use.</p>

<p>optparse, while being a bit more verbose, is much better structured and simpler to extend later on.</p>

<p>Here's a typical line to add an option to your parser:</p>

<pre><code>parser.add_option('-q', '--query',
            action=""store"", dest=""query"",
            help=""query string"", default=""spam"")
</code></pre>

<p>It pretty much speaks for itself; at processing time, it will accept -q or --query as options, store the argument in an attribute called query and has a default value if you don't specify it.  It is also self-documenting in that you declare the help argument (which will be used when run with -h/--help) right there with the option.</p>

<p>Usually you parse your arguments with:</p>

<pre><code>options, args = parser.parse_args()
</code></pre>

<p>This will, by default, parse the standard arguments passed to the script (sys.argv[1:])</p>

<p>options.query will then be set to the value you passed to the script.</p>

<p>You create a parser simply by doing</p>

<pre><code>parser = optparse.OptionParser()
</code></pre>

<p>These are all the basics you need.  Here's a complete Python script that shows this:</p>

<pre><code>import optparse

parser = optparse.OptionParser()

parser.add_option('-q', '--query',
    action=""store"", dest=""query"",
    help=""query string"", default=""spam"")

options, args = parser.parse_args()

print 'Query string:', options.query
</code></pre>

<p>5 lines of python that show you the basics.</p>

<p>Save it in sample.py, and run it once with</p>

<pre><code>python sample.py
</code></pre>

<p>and once with</p>

<pre><code>python sample.py --query myquery
</code></pre>

<p>Beyond that, you will find that optparse is very easy to extend.
In one of my projects, I created a Command class which allows you to nest subcommands in a command tree easily.  It uses optparse heavily to chain commands together.  It's not something I can easily explain in a few lines, but feel free to <a href=""https://thomas.apestaart.org/moap/trac/browser/trunk/moap/extern/command/command.py"">browse around in my repository</a> for the main class, as well as <a href=""https://thomas.apestaart.org/moap/trac/browser/trunk/moap/command/doap.py"">a class that uses it and the option parser</a></p>
"
26957,2900,2008-08-25T21:32:20Z,20794,18,"<p>A common Python saying is that it's easier to ask forgiveness than permission.  While I'm not a fan of this statement in real life, it does apply in a lot of cases.  Usually you want to avoid code that chains two system calls on the same file, because you never know what will happen to the file in between your two calls in your code.</p>

<p><strong>A typical mistake is to write something like</strong>:</p>

<pre><code>if os.path.exists(path):
    os.unlink(path)
</code></pre>

<p>The second call (os.unlink) may fail if something else deleted it after your if test, raise an Exception, and stop the rest of your function from executing.  (You might think this doesn't happen in real life, but we just fished another bug like that out of our codebase last week - and it was the kind of bug that left a few programmers scratching their head and claiming 'Heisenbug' for the last few months)</p>

<p>So, in your particular case, I would probably do:</p>

<pre><code>try:
    os.stat(path)
except OSError, e:
    if e.errno == errno.ENOENT:
        print 'path %s does not exist or is a broken symlink' % path
    else:
        raise e
</code></pre>

<p>The annoyance here is that stat returns the same error code for a symlink that just isn't there and a broken symlink.</p>

<p>So, I guess you have no choice than to break the atomicity, and do something like</p>

<pre><code>if not os.path.exists(os.readlink(path)):
    print 'path %s is a broken symlink' % path
</code></pre>
"
26963,1821,2008-08-25T21:35:14Z,26595,4,"<p>@<a href=""http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none#26698"" rel=""nofollow"">Jason</a>:</p>

<blockquote>
  <p>I recommend using something more along the lines of</p>

<pre><code>if foo:
    #foo isn't None
else:
    #foo is None
</code></pre>
</blockquote>

<p>I don't like using ""if foo:"" unless foo truly represents a boolean value (i.e. 0 or 1). If foo is a string or an object or something else, ""if foo:"" may work, but it looks like a lazy shortcut to me. If you're checking to see if x is None, say ""if x is None:"".</p>
"
27600,2018,2008-08-26T09:06:33Z,27567,2,"<p>Are you looking for Python specific translation, or just the general ""how do you compile some code to bytecode""? If the latter is your case, check <a href=""http://llvm.org/docs/tutorial/"" rel=""nofollow"">the LLVM tutorial</a>. I especially find chapter two, which teaches you to write a compiler for your own language, interesting.</p>
"
27780,2990,2008-08-26T11:30:50Z,742,0,"<p>If you want to share common functionality between pages I suggest you look at custom tags. They're quite <a href=""https://docs.djangoproject.com/en/1.1/howto/custom-template-tags/"" rel=""nofollow"">easy to create</a>, and are very powerful.</p>

<p>Also, <a href=""https://code.djangoproject.com/wiki/ExtendingTemplates"" rel=""nofollow"">templates can extend from other templates</a>. This allows you to have a base template to set up the layout of the page and to share this between other templates which fill in the blanks. You can nest templates to any depth; allowing you to specify the layout on separate groups of related pages in one place.</p>
"
27792,2384,2008-08-26T11:38:36Z,742,2,"<p>You can always create a class, override the <em><code>__call__</code></em> function and then point the URL file to an instance of the class. You can take a look at the <a href=""http://code.djangoproject.com/browser/django/trunk/django/contrib/formtools/wizard.py"" rel=""nofollow"">FormWizard</a> class to see how this is done.</p>
"
27974,620,2008-08-26T13:06:39Z,8692,106,"<p><a href=""http://xmlsoft.org/python.html"">libxml2</a> has a number of advantages:</p>

<ol>
<li>Compliance to the <a href=""http://www.w3.org/TR/xpath"">spec</a></li>
<li>Active development and a community participation </li>
<li>Speed. This is really a python wrapper around a C implementation. </li>
<li>Ubiquity. The libxml2 library is pervasive and thus well tested.</li>
</ol>

<p>Downsides include:</p>

<ol>
<li>Compliance to the <a href=""http://www.w3.org/TR/xpath"">spec</a>. It's strict. Things like default namespace handling are easier in other libraries.</li>
<li>Use of native code. This can be a pain depending on your how your application is distributed / deployed. RPMs are available that ease some of this pain.</li>
<li>Manual resource handling. Note in the sample below the calls to freeDoc() and xpathFreeContext(). This is not very Pythonic.</li>
</ol>

<p>If you are doing simple path selection, stick with <a href=""http://effbot.org/zone/element-xpath.htm"">ElementTree</a> ( which is included in Python 2.5 ). If you need full spec compliance or raw speed and can cope with the distribution of native code, go with libxml2.</p>

<p><strong>Sample of libxml2 XPath Use</strong></p>

<hr>

<pre><code>import libxml2

doc = libxml2.parseFile(""tst.xml"")
ctxt = doc.xpathNewContext()
res = ctxt.xpathEval(""//*"")
if len(res) != 2:
    print ""xpath query: wrong node set size""
    sys.exit(1)
if res[0].name != ""doc"" or res[1].name != ""foo"":
    print ""xpath query: wrong node set value""
    sys.exit(1)
doc.freeDoc()
ctxt.xpathFreeContext()
</code></pre>

<p><strong>Sample of ElementTree XPath Use</strong></p>

<hr>

<pre><code>from elementtree.ElementTree import ElementTree
mydoc = ElementTree(file='tst.xml')
for e in mydoc.findall('/foo/bar'):
    print e.get('title').text</code></pre>

<hr>
"
28067,2979,2008-08-26T13:44:11Z,26595,21,"<p>A word of caution: </p>

<pre><code>if foo:
  # do something
</code></pre>

<p>Is <strong>not</strong> exactly the same as:</p>

<pre><code>if x is not None:
  # do something
</code></pre>

<p>The former is a boolean value test and can evaluate to false in different contexts. There are a number of things that represent false in a boolean value tests for example empty containers, boolean values. None also evaluates to false in this situation but other things do too.</p>
"
28199,2314,2008-08-26T14:30:17Z,28165,1,"<p>Some of the user-contributed notes and functions in <a href=""http://us3.php.net/sprintf"" rel=""nofollow"">PHP's documentation for sprintf</a> come quite close.</p>

<p>Note: search the page for ""sprintf2"".</p>
"
28247,1585,2008-08-26T14:49:54Z,28165,4,"<pre><code>function subst($str, $dict){
    return preg_replace(array_map(create_function('$a', 'return ""/%\\($a\\)s/"";'), array_keys($dict)), array_values($dict), $str);
 }
</code></pre>

<p>You call it like so:</p>

<pre><code>echo subst('The %(site)s site %(adj)s because it %(adj)s', array('site'=&gt;'Stackoverflow', 'adj'=&gt;'rocks'));
</code></pre>
"
28349,2506,2008-08-26T15:21:51Z,28165,3,"<p>@<a href=""http://stackoverflow.com/questions/28165/does-php-have-an-equivalent-to-this-type-of-python-string-substitution#28199"" rel=""nofollow"">Marius</a></p>

<p>I don't know if it's faster, but you can do it without regexes:</p>

<pre><code>function subst($str, $dict)
{
  foreach ($dict AS $key, $value)
  {
    $str = str_replace($key, $value, $str);
  }

  return $str;
}
</code></pre>
"
28426,3051,2008-08-26T15:41:50Z,1854,30,"<p>You can also use sys.platform if you already have imported sys and you don't want to import another module</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.platform
'linux2'
</code></pre>
"
28436,72,2008-08-26T15:44:31Z,28369,2,"<p>Writing your own parser could be fun!  It might be a better option because people are expecting to use the familiar spreadsheet syntax (Excel, etc) and not Python when they're entering formulas.  I'm not familiar with safe_eval but I would imagine that anything like this certainly has the potential for exploitation.</p>
"
28467,3051,2008-08-26T15:58:08Z,16067,10,"<p>I haven't used SWIG or SIP, but I find writing Python wrappers with <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/index.html"" rel=""nofollow"">boost.python</a> to be very powerful and relatively easy to use.</p>

<p>I'm not clear on what your requirements are for passing types between C/C++ and python, but you can do that easily by either exposing a C++ type to python, or by using a generic <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/v2/object.html"" rel=""nofollow"">boost::python::object</a> argument to your C++ API. You can also register converters to automatically convert python types to C++ types and vice versa.</p>

<p>If you plan use boost.python, the <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/tutorial/doc/html/index.html"" rel=""nofollow"">tutorial</a> is a good place to start.</p>

<p>I have implemented something somewhat similar to what you need. I have a C++ function that 
accepts a python function and an image as arguments, and applies the python function to each pixel in the image.</p>

<pre><code>Image* unary(boost::python::object op, Image&amp; im)
{
    Image* out = new Image(im.width(), im.height(), im.channels());
    for(unsigned int i=0; i&lt;im.size(); i++)
    {
        (*out)[i] == extract&lt;float&gt;(op(im[i]));
    }
    return out;
}
</code></pre>

<p>In this case, Image is a C++ object exposed to python (an image with float pixels), and op is a python defined function  (or really any python object with a &#95;&#95;call&#95;&#95; attribute). You can then use this function as follows (assuming unary is located in the called image that also contains Image and a load function):</p>

<pre><code>import image
im = image.load('somefile.tiff')
double_im = image.unary(lambda x: 2.0*x, im)
</code></pre>

<p>As for using arrays with boost, I personally haven't done this, but I know the functionality to expose arrays to python using boost is available - <a href=""http://www.boost.org/doc/libs/1_35_0/libs/python/doc/v2/faq.html#question2"" rel=""nofollow"">this</a> might be helpful.</p>
"
28563,1199,2008-08-26T16:42:27Z,28559,2,"<p>Maybe it's not terribly idiomatic, but I'd be inclined to go with</p>

<pre><code>x = next()
while x != END:
    do_something_with_x
    x = next()
</code></pre>

<p>... but that's because I find that sort of thing easy to read</p>
"
28566,2132,2008-08-26T16:42:49Z,28559,1,"<p>What are you trying to do here?
If you're iterating over a list, you can use <code>for e in L</code> where e is the element and L is the list. If you're filtering a list, you can use list comprehensions (i.e. <code>[ e for e in L if e % 2 == 0 ]</code> to get all the even numbers in a list).</p>
"
28568,3102,2008-08-26T16:44:42Z,28559,5,"<p>It depends a bit what you want to do. To match your example as far as possible, I would make next a generator and iterate over it:</p>

<pre><code>def next():
   for num in range(10):
      yield num

for x in next():
   print x
</code></pre>
"
28580,3002,2008-08-26T16:49:52Z,28559,1,"<p>If you need to do this more than once, the pythonic way would use an iterator</p>

<pre><code>for x in iternext():
    do_something_with_x
</code></pre>

<p>where <code>iternext</code> would be defined using something like
(<a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""nofollow"">explicit is better than implicit!</a>):</p>

<pre><code>def iternext():
    x = next()
    while x != END:
        yield x
        x = next()
</code></pre>
"
28692,1627,2008-08-26T17:36:19Z,28668,5,"<p>It has been a <strong>really</strong> long time since I did anything with FileMaker Pro, but I know that it does have capabilities for an ODBC (and JDBC) connection to be made to it (however, I don't know how, or if, that translates to the linux/perl/python world though).  </p>

<p>This article shows how to share/expose your FileMaker data via ODBC &amp; JDBC:<br />
<a href=""http://www.filemaker.com/help/15-Using%20ODBC2.html"">Sharing FileMaker Pro data via ODBC or JDBC</a>   </p>

<p>From there, if you're able to create an ODBC/JDBC connection you could query out data as needed.</p>
"
28711,1233,2008-08-26T17:48:49Z,8948,0,"<p>If you can use IronPython, there is TagLibSharp.  <a href=""http://stackoverflow.com/questions/28664/what-is-the-besta-very-good-meta-data-reader-library#28687"">It can be used from any .NET language</a>.</p>
"
28714,2132,2008-08-26T17:50:30Z,28559,4,"<p>Short answer: there's no way to do inline variable assignment in a while loop in Python. Meaning that I <strong>cannot</strong> say:</p>

<pre><code>while x=next():
    // do something here!
</code></pre>

<p>Since that's not possible, there are a number of ""idiomatically correct"" ways of doing this:</p>

<pre><code>while 1:
    x = next()
    if x != END:
        // Blah
    else:
        break
</code></pre>

<p>Obviously, this is kind of ugly. You can also use one of the ""iterator"" approaches listed above, but, again, that may not be ideal. Finally, you can use the ""pita pocket"" approach that I actually just found while googling:</p>

<pre><code>class Pita( object ):
    __slots__ = ('pocket',)
    marker = object()
    def __init__(self, v=marker):
        if v is not self.marker:
            self.pocket = v
    def __call__(self, v=marker):
        if v is not self.marker:
            self.pocket = v
        return self.pocket
</code></pre>

<p>Now you can do:</p>

<pre><code>p = Pita()
while p( next() ) != END:
    // do stuff with p.pocket!
</code></pre>

<p>Thanks for this question; learning about the <code>__call__</code> idiom was really cool! :)</p>

<p>EDIT: I'd like to give credit where credit is due. The 'pita pocket' idiom was found <a href=""http://mail.python.org/pipermail/python-list/2003-July/216789.html"" rel=""nofollow"">here</a></p>
"
28780,1694,2008-08-26T18:18:42Z,28559,1,"<p>Can you provide more information about what you're trying to accomplish?  It's not clear to me why you can't just say</p>

<pre><code>for x in everything():
    ...
</code></pre>

<p>and have the everything function return everything, instead of writing a next function to just return one thing at a time.  Generators can even do this quite efficiently.</p>
"
28935,3119,2008-08-26T19:36:24Z,25661,7,"<p>I've never attempted it myself, but hearing plenty about other people who've tried, it's not a road you want to go down.</p>

<p>There is the alternative of putting the gui in pygame itself. There are plenty of gui toolkits built specifically for pygame that you could use. Most of them are rather unfinished, but there are 2 big, actively maintained ones: <a href=""http://www.pygame.org/project/108/"" rel=""nofollow"">PGU</a> and <a href=""http://www.pygame.org/project/125/"" rel=""nofollow"">OcempGUI</a>. The full list on the pygame site is <a href=""http://www.pygame.org/tags/gui"" rel=""nofollow"">here</a>.</p>
"
29169,2900,2008-08-26T23:16:16Z,24931,3,"<p>Actually, you definitely can, and it's beautiful, ugly, and crazy at the same time!</p>

<p>You can replace sys.stdout and sys.stderr with StringIO objects that collect the output.</p>

<p>Here's an example, save it as evil.py:</p>

<pre><code>import sys
import StringIO

s = StringIO.StringIO()

sys.stdout = s

print ""hey, this isn't going to stdout at all!""
print ""where is it ?""

sys.stderr.write('It actually went to a StringIO object, I will show you now:\n')
sys.stderr.write(s.getvalue())
</code></pre>

<p>When you run this program, you will see that:</p>

<ul>
<li>nothing went to stdout (where print usually prints to)</li>
<li>the first string that gets written to stderr is the one starting with 'It'</li>
<li>the next two lines are the ones that were collected in the StringIO object</li>
</ul>

<p>Replacing sys.stdout/err like this is an application of what's called monkeypatching.  Opinions may vary whether or not this is 'supported', and it is definitely an ugly hack, but it has saved my bacon when trying to wrap around external stuff once or twice.</p>

<p>Tested on Linux, not on Windows, but it should work just as well.  Let me know if it works on Windows!</p>
"
29255,3002,2008-08-27T00:35:29Z,29243,8,"<p>Setting an attribute on an object won't give a compile-time or a run-time error, it will just do nothing useful if the object doesn't access it (i.e. ""<code>node.noSuchAttr = 'bar'</code>"" would also not give an error).</p>

<p>Unless you need a specific feature of <code>minidom</code>, I would look at <code>ElementTree</code>:</p>

<pre><code>import sys
from xml.etree.cElementTree import Element, ElementTree

def make_xml():
    node = Element('foo')
    node.text = 'bar'
    doc = ElementTree(node)
    return doc

if __name__ == '__main__':
    make_xml().write(sys.stdout)
</code></pre>
"
29262,1638,2008-08-27T00:42:32Z,29243,8,"<p>@Daniel</p>

<p>Thanks for the reply, I also figured out how to do it with the minidom (I'm not sure of the difference between the ElementTree vs the minidom)</p>

<pre>
<code>
from xml.dom.minidom import *
def make_xml():
    doc = Document();
    node = doc.createElement('foo')
    node.appendChild(doc.createTextNode('bar'))
    doc.appendChild(node)
    return doc
if __name__ == '__main__':
    make_xml().writexml(sys.stdout)
</code>
</pre>

<p>I swear I tried this before posting my question...</p>
"
29264,2908,2008-08-27T00:45:14Z,29243,3,"<p>I found a <a href=""http://www.boddie.org.uk/python/XML_intro.html"" rel=""nofollow"">pretty verbose tutorial on the minidom method</a></p>

<p>Here's a <a href=""http://drfox.com/cgi-bin/topic_display.py?name=climbing_etree"" rel=""nofollow"">tutorial for the etree method</a>. It's much nicer to read, and seems quite simple. It also goes over parsing of xml (briefly)</p>
"
29347,1815,2008-08-27T01:50:48Z,28796,-18,"<p>Most editors support the ""whole word"" search option. It's usually a checkbox in the search dialog, and what it does is only match the search term if it has leading and trailing spaces, dots, and most other delimiters.
It will probably work in your case.</p>
"
29390,3119,2008-08-27T02:37:05Z,28369,1,"<p>Although that code looks quite secure, I've always held the opinion that any sufficiently motivated person could break it given adequate time. I do think it will take quite a bit of determination to get through that, but I'm relatively sure it could be done.</p>
"
29575,2928,2008-08-27T05:12:47Z,29562,13,"<p>See the <a href=""http://docs.python.org/dist/simple-example.html"" rel=""nofollow"">distutils simple example</a>. That's basically what it is like, except real install scripts usually contain a bit more information. I have not seen any that are fundamentally more complicated, though. In essence, you just give it a list of what needs to be installed. Sometimes you need to give it some mapping dicts since the source and installed trees might not be the same.</p>

<p>Here is a real-life (anonymized) example:</p>

<pre><code>#!/usr/bin/python 

from distutils.core import setup 

setup (name = 'Initech Package 3', 
          description = ""Services and libraries ABC, DEF"", 
          author = ""That Guy, Initech Ltd"", 
          author_email = ""that.guy@initech.com"", 
          version = '1.0.5', 
          package_dir = {'Package3' : 'site-packages/Package3'}, 
          packages = ['Package3', 'Package3.Queries'], 
          data_files = [ 
                       ('/etc/Package3', ['etc/Package3/ExternalResources.conf']) 
          ])
</code></pre>
"
29770,2900,2008-08-27T09:15:42Z,28796,43,"<p>In the meantime, I've tried it two tools that have some sort of integration with vim.</p>

<p>The first is <a href=""http://rope.sourceforge.net/"">Rope</a>, a python refactoring library that comes with a Vim (and emacs) plug-in.  I tried it for a few renames, and that definitely worked as expected.  It allowed me to preview the refactoring as a diff, which is nice.  It is a bit text-driven, but that's alright for me, just takes longer to learn.</p>

<p>The second is <a href=""http://bicyclerepair.sourceforge.net/"">Bicycle Repair Man</a> which I guess wins points on name.  Also plugs into vim and emacs.  Haven't played much with it yet, but I remember trying it a long time ago.</p>

<p>Haven't played with both enough yet, or tried more types of refactoring, but I will do some more hacking with them.</p>
"
29839,2990,2008-08-27T10:04:25Z,29562,2,"<p>Most Python programs will use distutils. <a href=""http://www.djangoproject.com"" rel=""nofollow"">Django</a> is a one - see <a href=""http://code.djangoproject.com/svn/django/trunk/setup.py"" rel=""nofollow"">http://code.djangoproject.com/svn/django/trunk/setup.py</a></p>

<p>You should also read <a href=""http://docs.python.org/dist/dist.html"" rel=""nofollow"">the documentation</a>, as it's very comprehensive and has some good examples.</p>
"
30591,2438,2008-08-27T16:30:06Z,29856,1,"<p>Not sure I entirely understand your question, but can't you simply build and install a 64 bit version and then create symbolic links so that /Library/Python/2.5 and below point to your freshly built version of python?</p>
"
30973,720,2008-08-27T19:27:06Z,20063,2,"<p>I think the best way for larger projects is optparse, but if you are looking for an easy way, maybe <a href=""http://werkzeug.pocoo.org/documentation/script"" rel=""nofollow"">http://werkzeug.pocoo.org/documentation/script</a> is something for you.</p>

<pre><code>from werkzeug import script

# actions go here
def action_foo(name=""""):
    """"""action foo does foo""""""
    pass

def action_bar(id=0, title=""default title""):
    """"""action bar does bar""""""
    pass

if __name__ == '__main__':
    script.run()
</code></pre>

<p>So basically every function action_* is exposed to the command line and a nice
help message is generated for free. </p>

<pre><code>python foo.py 
usage: foo.py &lt;action&gt; [&lt;options&gt;]
       foo.py --help

actions:
  bar:
    action bar does bar

    --id                          integer   0
    --title                       string    default title

  foo:
    action foo does foo

    --name                        string
</code></pre>
"
31126,3119,2008-08-27T20:13:49Z,683,6,"<p>you could always write one yourself:</p>

<pre><code>def iterattr(iterator, attributename):
    for obj in iterator:
        yield getattr(obj, attributename)
</code></pre>

<p>will work with anything that iterates, be it a tuple, list, or whatever.</p>

<p>I love python, it makes stuff like this very simple and no more of a hassle than neccessary, and in use stuff like this is hugely elegant.</p>
"
31188,2147,2008-08-27T20:30:22Z,683,2,"<p>If you plan on searching anything of remotely decent size, your best bet is going to be to use a dictionary or a set.  Otherwise, you basically have to iterate through every element of the iterator until you get to the one you want.</p>

<p>If this isn't necessarily performance sensitive code, then the list comprehension way should work.  But note that it is fairly inefficient because it goes over every element of the iterator and then goes BACK over it again until it finds what it wants.</p>

<p>Remember, python has one of the most efficient hashing algorithms around.  Use it to your advantage.</p>
"
31225,2147,2008-08-27T20:42:16Z,29562,1,"<p>distutils really isn't all that difficult once you get the hang of it.  It's really just a matter of putting in some meta-information (program name, author, version, etc) and then selecting what files you want to include.  For example, here's a sample distutils setup.py module from a decently complex python library:</p>

<p><a href=""http://code.google.com/p/kamaelia/source/browse/trunk/Code/Python/Kamaelia/setup.py"" rel=""nofollow"">Kamaelia setup.py</a></p>

<p>Note that this doesn't deal with any data files or or whatnot, so YMMV.</p>

<p>On another note, I agree that the distutils documentation is probably some of python's worst documentation.  It is extremely inclusive in some areas, but neglects some really important information in others.</p>
"
31331,3431280,2008-08-27T23:38:27Z,29856,0,"<p>Essentially, yes. I was not sure you could do it like that (current version does not do it like that). When using the python install script, however, there is no option (that I can find) to specify where to put directories and files (eg --prefix). I was hoping to match the current layout of python related files so as to avoid 'polluting' my machine with redundant files.</p>
"
31358,1638,2008-08-27T23:52:59Z,31340,18,"<p>Below is a basic threading sample. It will spawn 20 threads; each thread will output its thread number. Run it and observe the order in which they print.</p>

<pre><code>import threading
class Foo (threading.Thread):
    def __init__(self,x):
        self.__x = x
        threading.Thread.__init__(self)
    def run (self):
          print str(self.__x)

for x in xrange(20):
    Foo(x).start()
</code></pre>

<p>As you have hinted at Python threads are implemented through time-slicing. This is how they get the ""parallel"" effect. </p>

<p>In my example my Foo class extends thread, I then implement the <code>run</code> method, which is where the code that you would like to run in a thread goes. To start the thread you call <code>start()</code> on the thread object, which will automatically invoke the <code>run</code> method...</p>

<p>Of course, this is just the very basics. You will eventually want to learn about semaphores, mutexes, and locks for thread synchronization and message passing.</p>
"
31372,2147,2008-08-28T00:00:18Z,31340,32,"<p>Python's a fairly easy language to thread in, but there are caveats.  The biggest thing you need to know about is the Global Interpreter Lock.  This allows only one thread to access the interpreter.  This means two things:  1)  you rarely ever find yourself using a lock statement in python and 2) if you want to take advantage of multi-processor systems, you have to use separate processes.  EDIT:  I should also point out that you can put some of the code in C/C++ if you want to get around the GIL as well.</p>

<p>Thus, you need to re-consider why you want to use threads.  If you want to parallelize your app to take advantage of dual-core architecture, you need to consider breaking your app up into multiple processes.</p>

<p>If you want to improve responsiveness, you should CONSIDER using threads.  There are other alternatives though, namely <a href=""http://en.wikipedia.org/wiki/Microthread"" rel=""nofollow"">microthreading</a>.  There are also some frameworks that you should look into:</p>

<ul>
<li><a href=""http://www.stackless.com/"" rel=""nofollow"">stackless python</a></li>
<li><a href=""http://greenlet.readthedocs.org/en/latest/"" rel=""nofollow"">greenlets</a></li>
<li><a href=""http://www.gevent.org/"" rel=""nofollow"">gevent</a></li>
<li><a href=""https://github.com/saucelabs/monocle"" rel=""nofollow"">monocle</a></li>
</ul>
"
31384,2147,2008-08-28T00:09:56Z,29856,1,"<p>Personally, I wouldn't worry about it until you see a problem.  Messing with the default python install on a *Nix system can cause more trouble than it's worth.  I can say from personal experience that you never truly understand what python has done for the nix world until you have a problem with it.</p>

<p>You can also add a second python installation, but that also causes more problems than it's worth IMO.</p>

<p>So I suppose the best question to start out with would be why exactly do you want to use the 64 bit version of python?</p>
"
31398,720,2008-08-28T00:19:50Z,31340,41,"<p>Yes, because of the Global Interpreter Lock (GIL) there can only run one thread at a time. Here are some links with some insights about this:</p>

<ul>
<li><a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=214235"">http://www.artima.com/weblogs/viewpost.jsp?thread=214235</a></li>
<li><a href=""http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/"">http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/</a></li>
</ul>

<p>From the last link an interesting quote:</p>

<blockquote>
  <p>Let me explain what all that means. 
  Threads run inside the same virtual
  machine, and hence run on the same
  physical machine.  Processes can run
  on the same physical machine or in
  another physical machine.  If you
  architect your application around
  threads, you’ve done nothing to access
  multiple machines.  So, you can scale
  to as many cores are on the single
  machine (which will be quite a few
  over time), but to really reach web
  scales, you’ll need to solve the
  multiple machine problem anyway.</p>
</blockquote>

<p>If you want to use multi core, <a href=""http://www.python.org/dev/peps/pep-0371/"">pyprocessing</a> defines an process based API to do real parallelization. The <a href=""http://en.wikipedia.org/wiki/Python_Enhancement_Proposal#Development"">PEP</a> also includes some interesting benchmarks.</p>
"
31425,3431280,2008-08-28T00:33:52Z,29856,0,"<p>The short answer is because I can. The long answer, expanding on what the OP said, is to be more compatible with apache and mysql/postgresql. They are all 64bit (apache is a fat binary with ppc, ppc64 x86 and x86 and x86_64, the others just straight 64bit). <strong>Mysqldb and mod_python wont compile unless they are all running the  same architecture.</strong> Yes I could run them all in 32bit (and have in the past) but this is much more work then compiling one program.</p>

<p>EDIT: You pretty much convinced though to just let the installer do its thing and update the PATH to reflect this.</p>
"
31552,1455,2008-08-28T02:34:18Z,31340,9,"<p>Use threads in python if the individual workers are doing I/O bound operations. If you are trying to scale across multiple cores on a machine either find a good <a href=""http://www.python.org/dev/peps/pep-0371/"">IPC</a> framework for python or pick a different language.</p>
"
31765,2774,2008-08-28T07:16:15Z,29856,1,"<p>Hyposaurus,</p>

<p>It is possible to have multiple versions of Python installed simultaneously. Installing two versions in parallel solves your problem and helps avoid the problems laid out by Jason Baker above. </p>

<p>The easiest way, and the way I recommend, is to use <a href=""http://www.macports.org/"" rel=""nofollow"">MacPorts</a>, which will install all its software separately. By default, for example, everything is installed in /opt/local</p>

<p>Another method is to simply download the source and compile with a specified prefix. Note that this method doesn't modify your PATH environment variable, so you'll need to do that yourself if you want to avoid typing the fully qualified path to the python executable each time</p>

<pre><code>./configure --prefix=/usr/local/python64
make
sudo make install
</code></pre>

<p>Then you can simply point your Apache install at the new version using mod_python's <a href=""http://www.modpython.org/live/current/doc-html/dir-other-pi.html"" rel=""nofollow"">PythonInterpreter</a> directive</p>
"
31859,3363,2008-08-28T08:41:45Z,2933,39,"<p>Another system (not mentioned in the accepted answer yet) is PyInstaller, which worked for a PyQt project of mine when py2exe would not. I found it easier to use.</p>

<p><a href=""http://www.pyinstaller.org/"">http://www.pyinstaller.org/</a></p>

<p>Pyinstaller is based on Gordon McMillan's Python Installer. Which is no longer available.</p>
"
31926,3374,2008-08-28T09:47:57Z,28961,3,"<p>If I have to expose APIs, I prefer doing it as JSON. Python has excellent support for JSON objects (JSON Objects are infact python dictionaries)</p>
"
31950,2774,2008-08-28T10:04:23Z,25661,1,"<p>PyGame works much better when it can manage its own window, or even better, use the whole screen. GTK has flexible enough widgets to allow creation of a drawing area. </p>

<p><a href=""http://faq.pygtk.org/index.py?req=show&amp;file=faq23.042.htp"" rel=""nofollow"">This page</a> may help, though, if you want to try it.</p>
"
31964,2774,2008-08-28T10:12:03Z,28369,0,"<p>Daniel,
<a href=""http://jinja.pocoo.org/2/documentation/intro"" rel=""nofollow"">Jinja</a> implements a sandboxe environment that may or may not be useful to you. From what I remember, it doesn't yet ""comprehend"" list comprehensions. </p>

<p><a href=""http://jinja.pocoo.org/2/documentation/sandbox"" rel=""nofollow"">Sanbox info</a> </p>
"
32028,2603,2008-08-28T11:35:19Z,28369,1,"<p>Depends on your definition of safe I suppose. A lot of the security depends on what you pass in and what you are allowed to pass in the context. For instance, if a file is passed in, I can open arbitrary files:</p>

<pre><code>&gt;&gt;&gt; names['f'] = open('foo', 'w+')
&gt;&gt;&gt; safe_eval.safe_eval(""baz = type(f)('baz', 'w+')"", names)
&gt;&gt;&gt; names['baz']
&lt;open file 'baz', mode 'w+' at 0x413da0&gt;
</code></pre>

<p>Furthermore, the environment is very restricted (you cannot pass in modules), thus, you can't simply pass in a module of utility functions like re or random.</p>

<p>On the other hand, you don't need to write your own parser, you could just write your own evaluator for the python ast:</p>

<pre><code>&gt;&gt;&gt; import compiler
&gt;&gt;&gt; ast = compiler.parse(""print 'Hello world!'"")
</code></pre>

<p>That way, hopefully, you could implement safe imports. The other idea is to use Jython or IronPython and take advantage of Java/.Net sandboxing capabilities.</p>
"
32125,1421,2008-08-28T12:47:29Z,32044,23,"<p>I think the canonical answer is: ""Don't"".</p>

<p>What you should probably do instead is unravel the thing in your <em>view</em> code, so it's just a matter of iterating over (in|de)dents in the template. I think I'd do it by appending indents and dedents to a list while recursing through the tree and then sending that ""travelogue"" list to the template. (the template would then insert <code>&lt;li&gt;</code> and <code>&lt;/li&gt;</code> from that list, creating the recursive structure with ""understanding"" it.)</p>

<p>I'm also pretty sure recursively including template files is really a <em>wrong</em> way to do it...</p>
"
32402,3207,2008-08-28T14:27:37Z,32385,2,"<p>Python's standard library provides pretty good facilities for working with Python source; note the <a href=""https://docs.python.org/2/library/tokenize.html"" rel=""nofollow"">tokenize</a> and <a href=""https://docs.python.org/2/library/parser.html"" rel=""nofollow"">parser</a> modules.</p>
"
32440,3399,2008-08-28T14:39:04Z,32404,169,"<p>Yes you can. I do it using the pythoncom libraries that come included with <a href=""http://www.activestate.com/Products/activepython/index.mhtml"" rel=""nofollow"">ActivePython</a> or can be installed with <a href=""https://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> (Python for Windows extensions).</p>

<p>This is a basic skeleton for a simple service:</p>

<pre><code>import win32serviceutil
import win32service
import win32event
import servicemanager
import socket


class AppServerSvc (win32serviceutil.ServiceFramework):
    _svc_name_ = ""TestService""
    _svc_display_name_ = ""Test Service""

    def __init__(self,args):
        win32serviceutil.ServiceFramework.__init__(self,args)
        self.hWaitStop = win32event.CreateEvent(None,0,0,None)
        socket.setdefaulttimeout(60)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,
                              servicemanager.PYS_SERVICE_STARTED,
                              (self._svc_name_,''))
        self.main()

    def main(self):
        pass

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(AppServerSvc)
</code></pre>

<p>Your code would go in the main() method, usually with some kind of infinite loop that might be interrumped by checking a flag, that you set in the SvcStop method</p>
"
32857,NA,2008-08-28T17:23:22Z,32044,18,"<p>this might be way more than you need, but there is a django module called 'mptt' - this stores a hierarchical tree structure in an sql database, and includes templates for display in the view code.  you might be able to find something useful there.</p>

<p>here's the link : <a href=""https://github.com/django-mptt/django-mptt/"" rel=""nofollow"">django-mptt</a></p>
"
32939,3448,2008-08-28T18:02:33Z,32899,75,"<p>i use something like this:</p>

<pre><code>import unittest

l = [[""foo"", ""a"", ""a"",], [""bar"", ""a"", ""b""], [""lee"", ""b"", ""b""]]

class TestSequense(unittest.TestCase):
    pass

def test_generator(a, b):
    def test(self):
        self.assertEqual(a,b)
    return test

if __name__ == '__main__':
    for t in l:
        test_name = 'test_%s' % t[0]
        test = test_generator(t[1], t[2])
        setattr(TestSequense, test_name, test)
    unittest.main()
</code></pre>

<p>The <a href=""https://github.com/wolever/nose-parameterized""><code>nose-parameterized</code></a> package can be used to automate this process:</p>

<pre><code>from nose_parameterized import parameterized

class TestSequence(unittest.TestCase):
    @parameterized.expand([
        [""foo"", ""a"", ""a"",],
        [""bar"", ""a"", ""b""],
        [""lee"", ""b"", ""b""],
    ])
    def test_sequence(self, name, a, b):
        self.assertEqual(a,b)
</code></pre>

<p>Which will generate the tests:</p>

<pre><code>test_sequence_0_foo (__main__.TestSequence) ... ok
test_sequence_1_bar (__main__.TestSequence) ... FAIL
test_sequence_2_lee (__main__.TestSequence) ... ok

======================================================================
FAIL: test_sequence_1_bar (__main__.TestSequence)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/site-packages/nose_parameterized/parameterized.py"", line 233, in &lt;lambda&gt;
    standalone_func = lambda *a: func(*(a + p.args), **p.kwargs)
  File ""x.py"", line 12, in test_sequence
    self.assertEqual(a,b)
AssertionError: 'a' != 'b'
</code></pre>
"
33325,3504,2008-08-28T20:33:29Z,32385,0,"<p>I had the same issue and I simply opened the file and did some replace: then reload the file in the Python interpreter. This works fine and is easy to do. </p>

<p>Otherwise AFAIK you have to use some conf objects.</p>
"
33486,3279,2008-08-28T21:53:10Z,33475,3,"<blockquote>
<pre><code>s = p.stderr.readline()
</code></pre>
</blockquote>

<p>I suspect it's the above line.  When you invoke a command directly through ssh, you don't get your full pty (assuming Linux), and thus no stderr to read from.</p>

<p>When you log in interactively, stdin, stdout, and stderr are set up for you, and so your script works.</p>
"
33556,3119,2008-08-28T22:28:36Z,33534,0,"<p>Ints are immutable and you can't modify them in place, so you should go with option #2 (because option #1 is impossible without some trickery).</p>
"
33563,2774,2008-08-28T22:32:40Z,33534,5,"<p><strong>int</strong> is a value type, so each time you do an assignment, (e.g. both instances of <strong>+=</strong> above), it doesn't modify the object you have on the heap, but replaces the reference with one of the result of the right hand side of the assignment (i.e. an int)</p>

<p><strong>list</strong> isn't a value type, so it isn't bound by the same rules.</p>

<p>this page has more details on the differences: <a href=""http://docs.python.org/ref/objects.html"">http://docs.python.org/ref/objects.html</a></p>

<p>IMO, yes, you should define a new class that keeps an int as an instance variable</p>
"
33663,3002,2008-08-28T23:41:55Z,33534,22,"<p>Your two <code>xint</code> examples don't work for two different reasons.</p>

<p>The first doesn't work because <code>self += value</code> is equivalent to <code>self = self + value</code> which just reassigns the local variable <code>self</code> to a different object (an integer) but doesn't change the original object. You can't really get this </p>

<pre><code>&gt;&gt;&gt; x = xint(10)
&gt;&gt;&gt; x.add(2)
</code></pre>

<p>to work with a subclass of <code>int</code> since integers are <a href=""http://docs.python.org/ref/objects.html"">immutable</a>.</p>

<p>To get the second one to work you can define an <a href=""http://docs.python.org/ref/numeric-types.html""><code>__add__</code> method</a>, like so:</p>

<pre><code>class xint(int):
    def __add__(self, value):
        return xint(int.__add__(self, value))

&gt;&gt;&gt; x = xint(10)
&gt;&gt;&gt; type(x)
&lt;class '__main__.xint'&gt;
&gt;&gt;&gt; x += 3
&gt;&gt;&gt; x
13
&gt;&gt;&gt; type(x)
&lt;class '__main__.xint'&gt;
</code></pre>
"
33673,3467,2008-08-28T23:50:19Z,33475,0,"<p>what if you do the following:</p>

<h2><code>ssh &lt;remote host&gt; '&lt;your command&gt; ;&lt;your regexp using awk or something&gt;'</code></h2>

<p>For example</p>

<h2><code>ssh &lt;remote host&gt; '&lt;your program&gt;; ps aux | awk \'/root/ {print $2}\''</code></h2>

<p>This will connect to , execute  and then print each PSID for any user root or any process with root in its description.</p>

<p>I have used this method for running all kinds of commands on remote machines.  The catch is to wrap the command(s) you wish to execute in single quotation marks (') and to separate each command with a semi-colon (;).</p>
"
33873,742,2008-08-29T02:42:07Z,33475,0,"<p>@Ben Collins</p>

<p>I think you're right about stderr being an issue. I am pretty sure it's blocking on the readline() call. </p>

<p>In the end, I gave up and decided to use the pxssh module from <a href=""http://pexpect.sourceforge.net"" rel=""nofollow"">pexpect</a> to automate my interaction with an ssh session.</p>

<p>@Misha M</p>

<p>Unfortunately, the semi-colon trick doesn't work here: it blocks on executing my program. </p>
"
33932,3207,2008-08-29T03:57:14Z,21454,26,"<p>Using the <code>choices</code> parameter won't use the ENUM db type; it will just create a VARCHAR or INTEGER, depending on whether you use <code>choices</code> with a CharField or IntegerField.  Generally, this is just fine.  If it's important to you that the ENUM type is used at the database level, you have three options:</p>

<ol>
<li>Use ""./manage.py sql appname"" to see the SQL Django generates, manually modify it to use the ENUM type, and run it yourself.  If you create the table manually first, ""./manage.py syncdb"" won't mess with it.</li>
<li>If you don't want to do this manually every time you generate your DB, put some custom SQL in appname/sql/modelname.sql to perform the appropriate ALTER TABLE command.</li>
<li>Create a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields"" rel=""nofollow"">custom field type</a> and define the db_type method appropriately.</li>
</ol>

<p>With any of these options, it would be your responsibility to deal with the implications for cross-database portability.  In option 2, you could use <a href=""http://www.djangoproject.com/documentation/model-api/#database-backend-specific-sql-data"" rel=""nofollow"">database-backend-specific custom SQL</a> to ensure your ALTER TABLE is only run on MySQL.  In option 3, your db_type method would need to check the database engine and set the db column type to a type that actually exists in that database.</p>

<p><strong>UPDATE</strong>: Since the migrations framework was added in Django 1.7, options 1 and 2 above are entirely obsolete. Option 3 was always the best option anyway. The new version of options 1/2 would involve a complex custom migration using <code>SeparateDatabaseAndState</code> -- but really you want option 3.</p>
"
33957,3207,2008-08-29T04:29:22Z,742,36,"<p>I've created and used my own generic view classes, defining <strong><code>__call__</code></strong> so an instance of the class is callable.  I really like it; while Django's generic views allow some customization through keyword arguments, OO generic views (if their behavior is split into a number of separate methods) can have much more fine-grained customization via subclassing, which lets me repeat myself a lot less.  (I get tired of rewriting the same create/update view logic anytime I need to tweak something Django's generic views don't quite allow).</p>

<p>I've posted some code at <a href=""http://www.djangosnippets.org/snippets/1009/"">djangosnippets.org</a>.</p>

<p>The only real downside I see is the proliferation of internal method calls, which may impact performance somewhat. I don't think this is much of a concern; it's rare that Python code execution would be your performance bottleneck in a web app.</p>

<p><strong>UPDATE</strong>: Django's own <a href=""http://docs.djangoproject.com/en/dev/topics/class-based-views/"">generic views</a> are now class-based.</p>

<p><strong>UPDATE</strong>: FWIW, I've changed my opinion on class-based views since this answer was written. After having used them extensively on a couple of projects, I feel they tend to lead to code that is satisfyingly DRY to write, but very hard to read and maintain later, because functionality is spread across so many different places, and subclasses are so dependent on every implementation detail of the superclasses and mixins. I now feel that <a href=""https://docs.djangoproject.com/en/dev/ref/template-response/"">TemplateResponse</a> and view decorators is a better answer for decomposing view code.</p>
"
34011,1416,2008-08-29T05:33:49Z,33978,3,"<p>I haven't any personal experience with either of the following, but a simple search for a ""Python [memory] profiler"" yield:</p>

<ul>
<li><p>PySizer, ""a memory profiler for Python,"" found at <a href=""http://pysizer.8325.org/"" rel=""nofollow"">http://pysizer.8325.org/</a>.  However the page seems to indicate that the project hasn't been updated for a while, and refers to...</p></li>
<li><p>Heapy, ""support[ing] debugging and optimization regarding memory related issues in Python programs,"" found at <a href=""http://guppy-pe.sourceforge.net/#Heapy"" rel=""nofollow"">http://guppy-pe.sourceforge.net/#Heapy</a>.</p></li>
</ul>

<p>Hope that helps.</p>
"
34024,1662,2008-08-29T05:50:47Z,34020,-2,"<p>I've used it in several applications and have never had nor heard of threading being anything other than 100% reliable, as long as you know its limits.  You can't spawn 1000 threads at the same time and expect your program to run properly on Windows, however you can easily write a worker pool and just feed it 1000 operations, and keep everything nice and under control.</p>
"
34031,2010,2008-08-29T05:58:34Z,34020,3,"<p>As far as I know there are no real bugs, but the performance when threading in cPython is really bad (compared to most other threading implementations, but usually good enough if all most of the threads do is block) due to the <a href=""http://docs.python.org/api/threads.html"" rel=""nofollow"">GIL</a> (Global Interpreter Lock), so really it is implementation specific rather than language specific. Jython, for example, does not suffer from this due to using the Java thread model.</p>

<p>See <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=214235"" rel=""nofollow"">this</a> post on why it is not really feasible to remove the GIL from the cPython implementation, and <a href=""http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html"" rel=""nofollow"">this</a> for some practical elaboration and workarounds.</p>

<p>Do a quick google for <a href=""http://www.google.com/search?q=python+gil"" rel=""nofollow"">""Python GIL""</a> for more information.</p>
"
34060,1476,2008-08-29T06:33:54Z,34020,43,"<p>Python threads are good for <strong>concurrent I/O programming</strong>. Threads are swapped out of the CPU as soon as they block waiting for input from file, network, etc. This allows other Python threads to use the CPU while others wait. This would allow you to write a multi-threaded web server or web crawler, for example.</p>

<p>However, Python threads are serialized by the <a href=""http://en.wikipedia.org/wiki/Global_Interpreter_Lock"">GIL</a> when they enter interpreter core. This means that if two threads are crunching numbers, only one can run at any given moment. It also means that you can't take advantage of multi-core or multi-processor architectures.</p>

<p>There are solutions like running multiple Python interpreters concurrently, using a C based threading library. This is not for the faint of heart and the benefits might not be worth the trouble. Let's hope for an all Python solution in a future release.</p>
"
34078,2260,2008-08-29T06:55:14Z,34020,7,"<p>The GIL (Global Interpreter Lock) might be a problem, but the API is quite OK. Try out the excellent <code>processing</code> module, which implements the Threading API for separate processes. I am using that right now (albeit on OS X, have yet to do some testing on Windows) and am really impressed. The Queue class is really saving my bacon in terms of managing complexity!</p>

<p><strong>EDIT</strong>: it seemes the processing module is being included in the standard library as of version 2.6 (<code>import multiprocessing</code>). Joy!</p>
"
34094,3571,2008-08-29T07:10:31Z,32899,48,"<p>The <a href=""https://nose.readthedocs.org/en/latest/"">nose</a> testing framework <a href=""https://nose.readthedocs.org/en/latest/writing_tests.html#test-generators"">supports this</a>. </p>

<p>Example (the code below is the entire contents of the file containing the test):</p>

<pre><code>param_list = [('a', 'a'), ('a', 'b'), ('b', 'b')]

def test_generator():
    for params in param_list:
        yield check_em, params[0], params[1]

def check_em(a, b):
    assert a == b
</code></pre>

<p>The output of the nosetests command:</p>

<pre><code>> nosetests -v
testgen.test_generator('a', 'a') ... ok
testgen.test_generator('a', 'b') ... FAIL
testgen.test_generator('b', 'b') ... ok

======================================================================
FAIL: testgen.test_generator('a', 'b')
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/usr/lib/python2.5/site-packages/nose-0.10.1-py2.5.egg/nose/case.py"", line 203, in runTest
    self.test(*self.arg)
  File ""testgen.py"", line 7, in check_em
    assert a == b
AssertionError

----------------------------------------------------------------------
Ran 3 tests in 0.006s

FAILED (failures=1)
</code></pre>
"
34116,3056,2008-08-29T07:30:35Z,34079,53,"<p>This works for me:  </p>

<pre><code>import urllib2

proxy = urllib2.ProxyHandler({'http': 'http://
username:password@proxyurl:proxyport'})
auth = urllib2.HTTPBasicAuthHandler()
opener = urllib2.build_opener(proxy, auth, urllib2.HTTPHandler)
urllib2.install_opener(opener)

conn = urllib2.urlopen('http://python.org')
return_str = conn.read()
</code></pre>
"
34266,2990,2008-08-29T09:39:47Z,34243,4,"<p>I've not heard of a direct equivalent either. You could probably achieve the same effect with macros, especially in a language like Lisp which has extremely powerful macros.</p>

<p>I wouldn't be at all surprised if other languages start to incorporate something similar because it is so powerful.</p>
"
34330,2257,2008-08-29T10:20:39Z,34328,8,"<p>Here is code to install a python-script as a service, written in python :)</p>

<p><a href=""http://code.activestate.com/recipes/551780/"">http://code.activestate.com/recipes/551780/</a></p>

<p>This post could also help you out:</p>

<p><a href=""http://essiene.blogspot.com/2005/04/python-windows-services.html"">http://essiene.blogspot.com/2005/04/python-windows-services.html</a></p>
"
34391,2384,2008-08-29T11:39:27Z,34209,2,"<p>This is simple. I started getting this problems a few revisions ago. Basically, just remove the ""core=True"" parameter in the ImageField in the models, and then follow the instructions <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#inlinemodeladmin-objects"" rel=""nofollow"">here</a> to convert to what the newforms admin uses.</p>
"
34418,3458,2008-08-29T15:00:52Z,34328,3,"<p>As with most ""aware"" things in Windows, the answer is ""Registry"".</p>

<p>Take a look at this Microsoft Knowledge Base article: <a href=""http://support.microsoft.com/kb/103000"" rel=""nofollow"">http://support.microsoft.com/kb/103000</a></p>

<p>Search for ""A Win32 program that can be started by the Service Controller and that obeys the service control protocol."" This is the kind of service you're interested in.</p>

<p>The service registration (contents of KEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
\myservice) carries information about the service, including things like its executable location, what to do when it fails (halt the OS?), what services must be started before this one, what user it runs as.</p>

<p>As to service control protocol, main() of your program is supposed to invoke a Windows API call, setting up callbacks for start, stop, pause for your service. What you do in those callbacks is all up to you.</p>
"
34421,1638,2008-08-29T15:01:50Z,34328,0,"<p>You can use srvany.exe from Windows NT Resource Kit to create a user defined service that will show up in the admin tools...</p>

<p><a href=""http://support.microsoft.com/kb/137890"" rel=""nofollow"">http://support.microsoft.com/kb/137890</a></p>

<p>I am using this method to run tracd (a python script / server) for trac. </p>

<p>Here are some very clear instructions: <a href=""http://www.tacktech.com/display.cfm?ttid=197"" rel=""nofollow"">http://www.tacktech.com/display.cfm?ttid=197</a></p>

<p>It does require some registry editing (very minimal and easy) but will allow you to make any command line / script a windows service. </p>
"
34452,3394,2008-08-29T15:09:05Z,34439,188,"<p>It appears you can use this code, replacing 'object' with the object you're interested in:-</p>

<pre><code>[method for method in dir(object) if callable(getattr(object, method))]
</code></pre>

<p>I discovered it at <a href=""http://www.diveintopython.net/power_of_introspection/index.html"">this site</a>, hopefully that should provide some further detail!</p>
"
34467,1288,2008-08-29T15:36:55Z,34439,78,"<p>You can use the built in <code>dir()</code> function to get a list of all the attributes a module has.  Try this at the command line to see how it works.</p>

<pre><code>&gt;&gt;&gt; import moduleName
&gt;&gt;&gt; dir(moduleName)
</code></pre>

<p>Also, you can use the <code>hasattr(module_name, ""attr_name"")</code> function to find out if a module has a specific attribute.</p>

<p>See the <a href=""http://www.ibm.com/developerworks/library/l-pyint.html"">Guide to Python introspection</a> for more information.</p>
"
34472,NA,2008-08-29T15:40:05Z,34439,20,"<p>To check if it has a particular method:</p>

<pre><code>hasattr(object,""method"")
</code></pre>
"
34481,1480,2008-08-29T15:47:04Z,34439,11,"<p>On top of the more direct answers, I'd be remiss if I didn't mention <a href=""http://ipython.scipy.org/"">iPython</a>.
Hit 'tab' to see the available methods, with autocompletion.</p>

<p>And once you've found a method, try:</p>

<pre><code>help(object.method) 
</code></pre>

<p>to see the pydocs, method signature, etc.</p>

<p>Ahh... <a href=""http://en.wikipedia.org/wiki/REPL"">REPL</a>.</p>
"
34482,2140,2008-08-29T15:47:05Z,13941,9,"<p>If you have PyObjC (the Python - Objective-C bridge) installed or are running on OS X 10.5's system python (which ships with PyObjC), you can do</p>

<pre><code>from AppKit import NSBeep
NSBeep()
</code></pre>

<p>to play the system alert.</p>
"
34782,3189,2008-08-29T17:17:18Z,34020,13,"<p>The standard implementation of Python (generally known as CPython as it is written in C) uses OS threads, but since there is the <a href=""http://en.wikipedia.org/wiki/Global_Interpreter_Lock"" rel=""nofollow"">Global Interpreter Lock</a>, only one thread at a time is allowed to run Python code.  But within those limitations, the threading libraries are robust and widely used.</p>

<p>If you want to be able to use multiple CPU cores, there are a few options.  One is to use multiple python interpreters concurrently, as mentioned by others.  Another option is to use a different implementation of Python that does not use a GIL.  The two main options are <a href=""http://en.wikipedia.org/wiki/Jython"" rel=""nofollow"">Jython</a> and <a href=""http://en.wikipedia.org/wiki/IronPython"" rel=""nofollow"">IronPython</a>.</p>

<p>Jython is written in Java, and is now fairly mature, though some incompatibilities remain.  For example, the web framework <a href=""http://zyasoft.com/pythoneering/2008/01/django-on-jython-minding-gap.html"" rel=""nofollow"">Django does not run perfectly yet</a>, but is getting closer all the time.  Jython is <a href=""http://mail.python.org/pipermail/python-list/2001-December/116555.html"" rel=""nofollow"">great for thread safety</a>, comes out <a href=""http://blogs.warwick.ac.uk/dwatkins/entry/benchmarking_parallel_python_1_2/"" rel=""nofollow"">better in benchmarks</a> and has a <a href=""http://cgwalters.livejournal.com/17956.html"" rel=""nofollow"">cheeky message for those wanting the GIL</a>.</p>

<p>IronPython uses the .NET framework and is written in C#.  Compatibility is reaching the stage where <a href=""http://www.infoq.com/news/2008/03/django-and-ironpython"" rel=""nofollow"">Django can run on IronPython</a> (at least as a demo) and there are <a href=""http://www.voidspace.org.uk/ironpython/threading.shtml"" rel=""nofollow"">guides to using threads in IronPython</a>.</p>
"
35089,444,2008-08-29T19:20:47Z,34209,3,"<p>The <code>core</code> attribute isn't used anymore.</p>

<p>From <a href=""http://oebfare.com/blog/2008/jul/20/newforms-admin-migration-and-screencast/"" rel=""nofollow"">Brian Rosner's Blog</a>:</p>

<blockquote>
  <p>You can safely just remove any and all <code>core</code> arguments. They are no longer used. <em>newforms-admin</em> now provides a nice delete checkbox for exisiting instances in inlines.</p>
</blockquote>
"
35110,199,2008-08-29T19:30:29Z,34916,4,"<p>I hear you, I've followed the Pylons mailing list for a while looking for something similar. There have been some attempts in the past (see <a href=""http://adminpylon.devjavu.com/"" rel=""nofollow"">AdminPylon</a> and <a href=""http://code.google.com/p/restin/"" rel=""nofollow"">Restin</a>) but none have really kept up with SQLAlchemy's rapidly developing orm api.</p>

<p>Since DBSprockets is likely to be incorporated into TurboGears it will likely be maintained. I'd bite the bullet and go with that.</p>
"
35111,3594,2008-08-29T19:30:31Z,25807,11,"<p>@John: Your snippet doesn't work -- you are returning the <em>class</em> of the base classes (which are also known as metaclasses). You really just want <code>cls.__bases__</code>:</p>

<pre><code>class A: pass
class B: pass
class C(A, B): pass

c = C() # Instance

assert C.__bases__ == (A, B) # Works
assert c.__class__.__bases__ == (A, B) # Works

def magicGetSuperClasses(clz):
  return tuple([base.__class__ for base in clz.__bases__])

assert magicGetSuperClasses(C) == (A, B) # Fails
</code></pre>

<p>Also, if you're using Python 2.4+ you can use <a href=""http://www.python.org/dev/peps/pep-0289/"">generator expressions</a> instead of creating a list (via []), then turning it into a tuple (via <code>tuple</code>). For example:</p>

<pre><code>def get_base_metaclasses(cls):
    """"""Returns the metaclass of all the base classes of cls.""""""
    return tuple(base.__class__ for base in clz.__bases__)
</code></pre>

<p>That's a somewhat confusing example, but genexps are generally easy and cool. :)</p>
"
35443,3665,2008-08-29T22:52:47Z,34079,8,"<p>The best way of going through a proxy that requires authentication is using <a href=""http://docs.python.org/lib/module-urllib2.html"">urllib2</a> to build a custom url opener, then using that to make all the requests you want to go through the proxy. Note in particular, you probably don't want to embed the proxy password in the url or the python source code (unless it's just a quick hack).</p>

<pre><code>import urllib2

def get_proxy_opener(proxyurl, proxyuser, proxypass, proxyscheme=""http""):
    password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
    password_mgr.add_password(None, proxyurl, proxyuser, proxypass)

    proxy_handler = urllib2.ProxyHandler({proxyscheme: proxyurl})
    proxy_auth_handler = urllib2.ProxyBasicAuthHandler(password_mgr)

    return urllib2.build_opener(proxy_handler, proxy_auth_handler)

if __name__ == ""__main__"":
    import sys
    if len(sys.argv) &gt; 4:
        url_opener = get_proxy_opener(*sys.argv[1:4])
        for url in sys.argv[4:]:
            print url_opener.open(url).headers
    else:
        print ""Usage:"", sys.argv[0], ""proxy user pass fetchurls...""
</code></pre>

<p>In a more complex program, you can seperate these components out as appropriate (for instance, only using one password manager for the lifetime of the application). The python documentation has <a href=""http://docs.python.org/lib/urllib2-examples.html"">more examples on how to do complex things with urllib2</a> that you might also find useful.</p>
"
35543,3560,2008-08-30T01:20:52Z,35538,7,"<p>XHTML is easy, use <a href=""http://lxml.de/validation.html"" rel=""nofollow"">lxml</a>.</p>

<p>HTML is harder, since there's traditionally not been as much interest in validation among the HTML crowd (run StackOverflow itself through a validator, yikes). The easiest solution would be to execute external applications such as <a href=""http://www.jclark.com/sp/"" rel=""nofollow"">nsgmls</a> or <a href=""http://openjade.sourceforge.net/"" rel=""nofollow"">OpenJade</a>, and then parse their output.</p>
"
35562,619,2008-08-30T01:48:07Z,35538,3,"<p>I think that <a href=""http://tidy.sourceforge.net/"" rel=""nofollow"">HTML tidy</a> will do what you want. There is a Python binding for it.</p>
"
35572,2603,2008-08-30T01:55:50Z,35538,5,"<p>Try tidylib. You can get some really basic bindings as part of the elementtidy module (builds elementtrees from HTML documents). <a href=""http://effbot.org/downloads/#elementtidy"">http://effbot.org/downloads/#elementtidy</a></p>

<pre><code>&gt;&gt;&gt; import _elementtidy
&gt;&gt;&gt; xhtml, log = _elementtidy.fixup(""&lt;html&gt;&lt;/html&gt;"")
&gt;&gt;&gt; print log
line 1 column 1 - Warning: missing &lt;!DOCTYPE&gt; declaration
line 1 column 7 - Warning: discarding unexpected &lt;/html&gt;
line 1 column 14 - Warning: inserting missing 'title' element
</code></pre>

<p>Parsing the log should give you pretty much everything you need.</p>
"
35582,3002,2008-08-30T02:01:57Z,35569,8,"<p>Check out <a href=""http://mail.python.org/pipermail/python-3000/2007-September/010209.html"" rel=""nofollow"">this thread</a> for a discussion on the reasons behind this behavior (including that Guido likes it, and it's <a href=""http://mail.python.org/pipermail/python-3000/2007-September/010222.html"" rel=""nofollow"">not likely to change</a>).</p>
"
35633,3207,2008-08-30T03:04:44Z,34209,3,"<p>To get rid of ""This field is required,"" you need to make it not required, by using blank=True (and possibly null=True as well, if it's not a CharField).</p>
"
35635,3560,2008-08-30T03:06:02Z,35634,12,"<p>Use <code>a.equal? b</code></p>

<p><a href=""http://www.ruby-doc.org/core/classes/Object.html"">http://www.ruby-doc.org/core/classes/Object.html</a></p>

<blockquote>
  <p>Unlike ==, the equal? method should never be overridden by subclasses: it is used to determine object identity (that is, a.equal?(b) iff a is the same object as b). </p>
</blockquote>
"
35645,3702,2008-08-30T03:25:43Z,33978,67,"<p><strong>There's no easy way to find out the memory size of a python object</strong>. One of the problems you may find is that Python objects - like lists and dicts - may have references to other python objects (in this case, what would your size be? The size containing the size of each object or not?). There are some pointers overhead and internal structures related to object types and garbage collection. Finally, some python objects have non-obvious behaviors. For instance, lists reserve space for more objects than they have, most of the time; dicts are even more complicated since they can operate in different ways (they have a different implementation for small number of keys and sometimes they over allocate entries).</p>

<p>There is a <a href=""http://code.activestate.com/recipes/544288/"">big chunk of code</a> (and an <a href=""http://code.activestate.com/recipes/546530/"">updated big chunk of code</a>) out there to try to best approximate the size of a python object in memory. There's also some <a href=""https://mail.python.org/pipermail/python-list/2008-January/483475.html"">simpler approximations</a>. But they will always be approximations.</p>

<p>You may also want to check some <a href=""http://mail.python.org/pipermail/python-list/2002-March/135223.html"">old description about PyObject</a> (the internal C struct that represents virtually all python objects).</p>
"
35664,3702,2008-08-30T03:55:23Z,23907,22,"<p>You may get both added and removed lines with git log, like:</p>

<pre><code>git log --shortstat --reverse --pretty=oneline
</code></pre>

<p>From this, you can write a similar script to the one you did using this info. In python:</p>

<pre><code>#!/usr/bin/python

""""""
Display the per-commit size of the current git branch.
""""""

import subprocess
import re
import sys

def main(argv):
  git = subprocess.Popen([""git"", ""log"", ""--shortstat"", ""--reverse"",
                        ""--pretty=oneline""], stdout=subprocess.PIPE)
  out, err = git.communicate()
  total_files, total_insertions, total_deletions = 0, 0, 0
  for line in out.split('\n'):
    if not line: continue
    if line[0] != ' ': 
      # This is a description line
      hash, desc = line.split("" "", 1)
    else:
      # This is a stat line
      data = re.findall(
        ' (\d+) files changed, (\d+) insertions\(\+\), (\d+) deletions\(-\)', 
        line)
      files, insertions, deletions = ( int(x) for x in data[0] )
      total_files += files
      total_insertions += insertions
      total_deletions += deletions
      print ""%s: %d files, %d lines"" % (hash, total_files,
                                        total_insertions - total_deletions)


if __name__ == '__main__':
  sys.exit(main(sys.argv))
</code></pre>
"
35667,3446,2008-08-30T03:56:57Z,22059,7,"<p>I'm not familiar with the specific services listed, but the field of natural language processing has developed a number of techniques that enable this sort of information extraction from general text.  As Sean stated, once you have candidate terms, it's not to difficult to search for those terms with some of the other entities in context and then use the results of that search to determine how confident you are that the term extracted is an actual entity of interest.</p>

<p><a href=""http://opennlp.sourceforge.net/"">OpenNLP</a> is a great project if you'd like to play around with natural language processing.  The capabilities you've named would probably be best accomplished with Named Entity Recognizers (NER) (algorithms that locate proper nouns, generally, and sometimes dates as well) and/or Word Sense Disambiguation (WSD) (eg: the word 'bank' has different meanings depending on it's context, and that can be very important when extracting information from text.  Given the sentences: ""the plane banked left"", ""the snow bank was high"", and ""they robbed the bank"" you can see how dissambiguation can play an important part in language understanding)</p>

<p>Techniques generally build on each other, and NER is one of the more complex tasks, so to do NER successfully, you will generally need accurate tokenizers (natural language tokenizers, mind you -- statistical approaches tend to fare the best), string stemmers (algorithms that conflate similar words to common roots: so words like informant and informer are treated equally), sentence detection ('Mr. Jones was tall.' is only one sentence, so you can't just check for punctuation), part-of-speech taggers (POS taggers), and WSD.</p>

<p>There is a python port of (parts of) OpenNLP called NLTK (<a href=""http://nltk.sourceforge.net"">http://nltk.sourceforge.net</a>) but I don't have much experience with it yet.  Most of my work has been with the Java and C# ports, which work well.  </p>

<p>All of these algorithms are language-specific, of course, and they can take significant time to run (although, it is generally faster than reading the material you are processing).  Since the state-of-the-art is largely based on statistical techniques, there is also a considerable error rate to take into account.  Furthermore, because the error rate impacts all the stages, and something like NER requires numerous stages of processing, (tokenize -> sentence detect -> POS tag -> WSD -> NER) the error rates compound.</p>
"
35757,720,2008-08-30T07:19:40Z,35753,16,"<p>In my opinion python is more than ready for developing complex applications. I see pythons strength more on the server side than writing graphical clients. But have a look at <a href=""http://www.resolversystems.com/"" rel=""nofollow"">http://www.resolversystems.com/</a>. They develop a whole spreadsheet in python using the .net ironpython port.</p>

<p>If you are familiar with eclipse have a look at <a href=""http://pydev.sourceforge.net/"" rel=""nofollow"">pydev</a> which provides auto-completion and debugging support for python with all the other eclipse goodies like svn support. The guy developing it has just been bought by <a href=""http://aptana.com/blog/pcolton/pydev_news"" rel=""nofollow"">aptana</a>, so this will be solid choice for the future.</p>

<p>@Marcin</p>

<blockquote>
  <p>Cons: as a dynamic language, has way
  worse IDE support (proper syntax
  completion requires static typing,
  whether explicit in Java or inferred
  in SML),</p>
</blockquote>

<p>You are right, that static analysis may not provide full syntax completion for dynamic languages, but I thing pydev gets the job done very well. Further more I have a different development style when programming python. I have always an ipython session open and with one F5 I do not only get the perfect completion from ipython, but object introspection and manipulation as well.</p>

<blockquote>
  <p>But if you want to write second Google
  or Yahoo, you will be much better with
  C# or Java.</p>
</blockquote>

<p><a href=""http://www.jaiku.com/blog/2008/08/18/from-the-dev-corner-an-under-the-hood-preview-of-our-new-engine/"" rel=""nofollow"">Google just rewrote jaiku</a> to work on top of App Engine, all in python. And as far as I know they use a lot of python inside google too.</p>
"
35759,893,2008-08-30T07:22:03Z,35753,11,"<p>I really like python, it's usually my language of choice these days for small (non-gui) stuff that I do on my own.</p>

<p>However, for some larger Python projects I've tackled, I'm finding that it's not quite the same as programming in say, C++. I was working on a language parser, and needed to represent an AST in Python. This is certainly within the scope of what Python can do, but I had a bit of trouble with some refactoring. I was changing the representation of my AST and changing methods and classes around a lot, and I found I missed the strong typing that would be available to me in a C++ solution. Python's duck typing was almost <em>too</em> flexible and I found myself adding a lot of <code>assert</code> code to try to check my types as the program ran. And then I couldn't really be sure that everything was properly typed unless I had 100% code coverage testing (which I didn't at the time).</p>

<p>Actually, that's another thing that I miss sometimes. It's possible to write syntactically correct code in Python that simply won't run. The compiler is incapable of telling you about it until it actually executes the code, so in infrequently-used code paths such as error handlers you can easily have unseen bugs lurking around. Even code that's as simple as printing an error message with a % format string can fail at runtime because of mismatched types.</p>

<p>I haven't used Python for any GUI stuff so I can't comment on that aspect.</p>
"
35776,3594,2008-08-30T08:21:18Z,35753,8,"<p>Python is considered (among Python programmers :) to be a great language for rapid prototyping. There's not a lot of extraneous syntax getting in the way of your thought processes, so most of the work you do tends to go into the code. (There's far less idioms required to be involved in writing good Python code than in writing good C++.)</p>

<p>Given this, most Python (CPython) programmers ascribe to the ""premature optimization is the root of all evil"" philosophy. By writing high-level (and significantly slower) Python code, one can optimize the bottlenecks out using C/C++ bindings when your application is nearing completion. At this point it becomes more clear what your processor-intensive algorithms are through proper profiling. This way, you write most of the code in a very readable and maintainable manner while allowing for speedups down the road. You'll see several Python library modules written in C for this very reason.</p>

<p>Most graphics libraries in Python (i.e. wxPython) are just Python wrappers around C++ libraries anyway, so you're pretty much writing to a C++ backend.</p>

<p>To address your IDE question, <a href=""http://pythonide.blogspot.com/"">SPE</a> (Stani's Python Editor) is a good IDE that I've used and <a href=""http://www.eclipse.org/"">Eclipse</a> with <a href=""http://pydev.sourceforge.net/"">PyDev</a> gets the job done as well. Both are OSS, so they're free to try!</p>

<p>[Edit] @Marcin: Have you had experience writing > 30k LOC in Python? It's also funny that you should mention Google's scalability concerns, since they're Python's biggest supporters! Also a small organization called NASA also uses Python frequently ;) see <a href=""http://www.python.org/about/success/usa/"">""One coder and 17,000 Lines of Code Later""</a>.</p>
"
35777,3105,2008-08-30T08:21:24Z,35753,19,"<p>You'll find mostly two answers to that &ndash; the religous one (Yes! Of course! It's the best language ever!) and the other religious one (you gotta be kidding me! Python? No... it's not mature enough). I will maybe skip the last religion (Python?! Use Ruby!). The truth, as always, is far from obvious. </p>

<p><strong>Pros</strong>: it's easy, readable, batteries included, has lots of good libraries for pretty much everything. It's expressive and dynamic typing makes it more concise in many cases.</p>

<p><strong>Cons</strong>: as a dynamic language, has way worse IDE support (proper syntax completion <strong>requires</strong> static typing, whether explicit in Java or inferred in SML), its object system is far from perfect (interfaces, anyone?) and it is easy to end up with messy code that has methods returning either int or boolean or object or some sort under unknown circumstances.</p>

<p>My take &ndash; I love Python for scripting, automation, tiny webapps and other simple well defined tasks. In my opinion it is by far <strong>the best</strong> dynamic language on the planet. That said, I would <strong>never</strong> use it <strong>any</strong> dynamically typed language to develop an application of substantial size.</p>

<p>Say &ndash; it would be fine to use it for Stack Overflow, which has three developers and I guess no more than 30k lines of code. For bigger things &ndash; first your development would be super fast, and then once team and codebase grow things are slowing down more than they would with Java or C#. You need to offset lack of compilation time checks by writing more unittests, refactorings get harder cause you never know what your refacoring broke until you run all tests or even the whole big app, etc.</p>

<p>Now &ndash; decide on how big your team is going to be and how big the app is supposed to be once it is done. If you have 5 or less people and the target size is roughly Stack Overflow, go ahead, write in Python. You will finish in no time and be happy with good codebase. But if you want to write second Google or Yahoo, you will be much better with C# or Java.</p>

<p>Side-note on C/C++ you have mentioned: if you are not writing performance critical software (say massive parallel raytracer that will run for three months rendering a film) or a very mission critical system (say Mars lander that will fly three years straight and has only one chance to land right or you lose $400mln) do not use it. For web apps, most desktop apps, most apps in general it is not a good choice. You will die debugging pointers and memory allocation in complex business logic.</p>
"
35786,3594,2008-08-30T08:35:08Z,32385,0,"<p>Most of these kinds of things can be determined programatically in Python, using modules like sys, os, and the special <a href=""http://pyref.infogami.com/__file__"" rel=""nofollow""></a> identifier which tells you where you are in the filesystem path.</p>

<p>It's important to keep in mind that when a module is first imported it will execute everything in the file-scope, which is important for developing system-dependent behaviors. For example, the os module basically determines what operating system you're using on import and then adjusts its implementation accordingly (by importing another module corresponding to Linux, OSX, Windows, etc.).</p>

<p>There's a lot of power in this feature and something along these lines is probably what you're looking for. :)</p>

<p>[Edit] I've also used socket.gethostname() in some rare, hackish instances. ;)</p>
"
35823,3207,2008-08-30T09:33:00Z,35805,38,"<p><code>B.name</code> is a class attribute, not an instance attribute.  It shows up in <code>B.__dict__</code>, but not in <code>b = B(); b.__dict__</code>.</p>

<p>The distinction is obscured somewhat because when you access an attribute on an instance, the class dict is a fallback.  So in the above example, <code>b.name</code> will give you the value of <code>B.name</code>.</p>
"
35831,755,2008-08-30T09:43:50Z,35817,3,"<p>I believe that os.system just invokes whatever command shell is configured for the user, so I don't think you can do it in a platform independent way.  My command shell could be anything from bash, emacs, ruby, or even quake3.  Some of these programs aren't expecting the kind of arguments you are passing to them and even if they did there is no guarantee they do their escaping the same way.</p>
"
35838,2422,2008-08-30T09:49:27Z,35753,0,"<p>I know I'm probably stating the obvious, but don't forget that the quality of the development team and their familiarity with the technology will have a major impact on your ability to deliver. </p>

<p>If you have a strong team, then it's probably not an issue if they're familiar. But if you have people who are more 9 to 5'rs who aren't familiar with the technology, they will need more support and you'd need to make a call if the productivity gains are worth whatever the cost of that support is.</p>
"
35841,755,2008-08-30T09:53:02Z,35753,2,"<p>Refactoring is inevitable on larger codebases and the lack of static typing makes this much harder in python than in statically typed languages.</p>
"
35857,893,2008-08-30T10:13:11Z,35817,44,"<p>This is what I use:</p>

<pre><code>def shellquote(s):
    return ""'"" + s.replace(""'"", ""'\\''"") + ""'""
</code></pre>

<p>The shell will always accept a quoted filename and remove the surrounding quotes before passing it to the program in question. Notably, this avoids problems with filenames that contain spaces or any other kind of nasty shell metacharacter.</p>

<p><strong>Update</strong>: If you are using Python 3.3 or later, use <a href=""http://docs.python.org/dev/library/shlex.html#shlex.quote"">shlex.quote</a> instead of rolling your own.</p>
"
35858,3363,2008-08-30T10:15:02Z,35817,49,"<p>Perhaps you have a specific reason for using <code>os.system()</code>. But if not you should probably be using the <a href=""http://docs.python.org/lib/module-subprocess.html""><code>subprocess</code> module</a>. You can specify the pipes directly and avoid using the shell.</p>

<p>The following is from <a href=""http://www.python.org/dev/peps/pep-0324/"">PEP324</a>:</p>

<blockquote>
<pre><code>Replacing shell pipe line
-------------------------

output=`dmesg | grep hda`
==&gt;
p1 = Popen([""dmesg""], stdout=PIPE)
p2 = Popen([""grep"", ""hda""], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</code></pre>
</blockquote>
"
35900,745,2008-08-30T11:43:44Z,35817,-2,"<p>If you do use the system command, I would try and whitelist what goes into the os.system() call.. For example..</p>

<pre><code>clean_user_input re.sub(""[^a-zA-Z]"", """", user_input)
os.system(""ls %s"" % (clean_user_input))
</code></pre>

<p>The subprocess module is a better option, and I would recommend trying to avoid using anything like os.system/subprocess wherever possible.</p>
"
35978,3171,2008-08-30T14:16:54Z,35948,9,"<p>I'm assuming that the part the doesn't work is <code>{{ user.item }}</code>.</p>

<p>Django will be trying a dictionary lookup, but using the string <code>""item""</code> and not the value of the <code>item</code> loop variable.  Django did the same thing when it resolved <code>{{ user.name  }}</code> to the <code>name</code> attribute of the <code>user</code> object, rather than looking for a variable called <code>name</code>.</p>

<p>I think you will need to do some preprocessing of the data in your view before you render it in your template.</p>
"
35990,305,2008-08-30T14:35:29Z,35988,47,"<p>How about a dictionary?</p>

<p>Something like this:</p>

<pre><code>myStruct = {'field1': 'some val', 'field2': 'some val'}
</code></pre>

<p>Then you can use this to manipulate values:</p>

<pre><code>print myStruct['field1']
myStruct['field2'] = 'some other values'
</code></pre>

<p>And the values don't have to be strings.  They can be pretty much any other object.</p>
"
35993,3002,2008-08-30T14:38:38Z,35988,70,"<p>You can use a tuple for a lot of things where you would use a struct in C (something like x,y coordinates or RGB colors for example).</p>

<p>For everything else you can use dictionary, or a utility class like <a href=""http://code.activestate.com/recipes/52308/"">this one</a>:</p>

<pre><code>&gt;&gt;&gt; class Bunch:
...     def __init__(self, **kwds):
...         self.__dict__.update(kwds)
...
&gt;&gt;&gt; mystruct = Bunch(field1=value1, field2=value2)
</code></pre>

<p>I think the ""definitive"" discussion is <a href=""http://books.google.com/books?id=Q0s6Vgb98CQC&amp;lpg=PT212&amp;dq=Python%20Cookbook%20%22Collecting%20a%20Bunch%20of%20Named%20Items%22&amp;hl=en&amp;pg=PT213#v=onepage&amp;q&amp;f=false"">here</a>, in the published version of the Python Cookbook.</p>
"
36033,3665,2008-08-30T15:18:59Z,35988,202,"<p>Use a <a href=""https://docs.python.org/2/library/collections.html#collections.namedtuple"">named tuple</a>, which was added to the <a href=""http://docs.python.org/library/collections.html"">collections module</a> in the standard library in Python 2.6. It's also possible to use Raymond Hettinger's <a href=""http://code.activestate.com/recipes/500261/"">named tuple</a> recipe if you need to support Python 2.4.</p>

<p>It's nice for your basic example, but also covers a bunch of edge cases you might run into later as well. Your fragment above would be written as:</p>

<pre><code>from collections import namedtuple
MyStruct = namedtuple(""MyStruct"", ""field1 field2 field3"")
</code></pre>

<p>The newly created type can be used like this:</p>

<pre><code>m = MyStruct(""foo"", ""bar"", ""baz"")
</code></pre>

<p>Or you can use named arguments:</p>

<pre><code>m = MyStruct(field1 = ""foo"", field2 = ""bar"", field3 = ""baz"")
</code></pre>
"
36034,4381,2008-08-30T15:20:15Z,35988,17,"<blockquote>
  <p>dF: that's pretty cool... I didn't
  know that I could access the fields in
  a class using dict.</p>
  
  <p>Mark: the situations that I wish I had
  this are precisely when I want a tuple
  but nothing as ""heavy"" as a
  dictionary.</p>
</blockquote>

<p>You can access the fields of a class using a dictionary because the fields of a class, its methods and all its properties are stored internally using dicts (at least in CPython).</p>

<p>...Which leads us to your second comment. Believing that Python dicts are ""heavy"" is an extremely non-pythonistic concept. And reading such comments kills my Python Zen. That's not good.</p>

<p>You see, when you declare a class you are actually creating a pretty complex wrapper around a dictionary - so, if anything, you are adding more overhead than by using a simple dictionary. An overhead which, by the way, is meaningless in any case. If you are working on performance critical applications, use C or something.</p>
"
36061,394,2008-08-30T15:53:10Z,35988,13,"<p>You can also pass the init parameters to the instance variables by position</p>

<pre><code># Abstract struct class       
class Struct:
    def __init__ (self, *argv, **argd):
        if len(argd):
            # Update by dictionary
            self.__dict__.update (argd)
        else:
            # Update by position
            attrs = filter (lambda x: x[0:2] != ""__"", dir(self))
            for n in range(len(argv)):
                setattr(self, attrs[n], argv[n])

# Specific class
class Point3dStruct (Struct):
    x = 0
    y = 0
    z = 0

pt1 = Point3dStruct()
pt1.x = 10

print pt1.x
print ""-""*10

pt2 = Point3dStruct(5, 6)

print pt2.x, pt2.y
print ""-""*10

pt3 = Point3dStruct (x=1, y=2, z=3)
print pt3.x, pt3.y, pt3.z
print ""-""*10
</code></pre>
"
36143,2474,2008-08-30T17:04:40Z,36139,23,"<pre><code>list.sort()
</code></pre>

<p>It really is that simple :)</p>
"
36156,1694,2008-08-30T17:10:12Z,36139,270,"<p>Basic answer:</p>

<pre><code>mylist = [""b"", ""C"", ""A""]
mylist.sort()
</code></pre>

<p>This modifies your original list (i.e. sorts in-place). To get a sorted copy of the list, without changing the original, use the <a href=""http://docs.python.org/library/functions.html#sorted""><code>sorted()</code></a> function:</p>

<pre><code>for x in sorted(mylist):
    print x
</code></pre>

<p>However, the examples above are a bit naive, because they don't take locale into account, and perform a case-sensitive sorting. You can take advantage of the optional parameter <code>key</code> to specify custom sorting order (the alternative, using <code>cmp</code>, is a deprecated solution, as it has to be evaluated multiple times - <code>key</code> is only computed once per element).</p>

<p>So, to sort according to the current locale, taking language-specific rules into account (<a href=""http://docs.python.org/library/functools.html#functools.cmp_to_key""><code>cmp_to_key</code></a> is a helper function from functools):</p>

<pre><code>sorted(mylist, key=cmp_to_key(locale.strcoll))
</code></pre>

<p>And finally, if you need, you can specify a <a href=""http://docs.python.org/library/locale.html"">custom locale</a> for sorting:</p>

<pre><code>import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8') # vary depending on your lang/locale
assert sorted((u'Ab', u'ad', u'aa'),
  key=cmp_to_key(locale.strcoll)) == [u'aa', u'Ab', u'ad']
</code></pre>

<p>Last note: you will see examples of case-insensitive sorting which use the <code>lower()</code> method - those are incorrect, because they work only for the ASCII subset of characters. Those two are wrong for any non-English data:</p>

<pre><code># this is incorrect!
mylist.sort(key=lambda x: x.lower())
# alternative notation, a bit faster, but still wrong
mylist.sort(key=str.lower)
</code></pre>
"
36219,3665,2008-08-30T18:10:33Z,12591,0,"<p>It seems that lxml does not expose this libxml2 feature, grepping the source only turns up some #defines for the error handling:</p>

<pre><code>C:\Dev&gt;grep -ir --include=*.px[id] catalog lxml-2.1.1/src | sed -r ""s/\s+/ /g""
lxml-2.1.1/src/lxml/dtd.pxi: catalog.
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_FROM_CATALOG = 20 # The Catalog module
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_WAR_CATALOG_PI = 93 # 93
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_MISSING_ATTR = 1650
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_ENTRY_BROKEN = 1651 # 1651
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_PREFER_VALUE = 1652 # 1652
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_NOT_CATALOG = 1653 # 1653
lxml-2.1.1/src/lxml/xmlerror.pxd: XML_CATALOG_RECURSION = 1654 # 1654
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG=20
lxml-2.1.1/src/lxml/xmlerror.pxi:WAR_CATALOG_PI=93
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_MISSING_ATTR=1650
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_ENTRY_BROKEN=1651
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_PREFER_VALUE=1652
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_NOT_CATALOG=1653
lxml-2.1.1/src/lxml/xmlerror.pxi:CATALOG_RECURSION=1654
</code></pre>

<p>From the <a href=""http://xmlsoft.org/catalog.html"" rel=""nofollow"">catalog implementation in libxml2 page</a> it seems possible that the 'transparent' handling through installation in /etc/xml/catalog may still work in lxml, but if you need more than that you can always abandon lxml and use the default python bindings, which do expose the catalog functions.</p>
"
36220,3560,2008-08-30T18:10:45Z,36139,6,"<blockquote>
  <p>But how does this handle language specific sorting rules? Does it take locale into account?</p>
</blockquote>

<p>No, <code>list.sort()</code> is a generic sorting function. If you want to sort according to the Unicode rules, you'll have to define a custom sort key function. You can try using the <a href=""http://jtauber.com/blog/2006/01/27/python_unicode_collation_algorithm/"">pyuca</a> module, but I don't know how complete it is.</p>
"
36238,3189,2008-08-30T18:42:19Z,35753,4,"<p>One way to judge what python is used for is to look at what products use python at the moment.  This <a href=""http://en.wikipedia.org/wiki/Python_software"" rel=""nofollow"">wikipedia page</a> has a long list including various web frameworks, content management systems, version control systems, desktop apps and IDEs.</p>

<p>As it says <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29#Usage"" rel=""nofollow"">here</a> - ""Some of the largest projects that use Python are the Zope application server, YouTube, and the original BitTorrent client. Large organizations that make use of Python include Google, Yahoo!, CERN and NASA. ITA uses Python for some of its components.""</p>

<p>So in short, yes, it is ""proper for production use in the development of stand-alone complex applications"".  So are many other languages, with various pros and cons.  Which is the best language for your particular use case is too subjective to answer, so I won't try, but often the answer will be ""the one your developers know best"".</p>
"
36327,3002,2008-08-30T20:34:35Z,36324,12,"<p>It's a bug, see the <a href=""http://docs.python.org/lib/node528.html"" rel=""nofollow"">documentation of <code>subprocess.Popen</code></a>. There either needs to be a <code>""shell=True</code>"" option, or the first argument needs to be a sequence <code>['svn', '--version']</code>. As it is now, <code>Popen</code> is looking for an executable named, literally, ""svn --version"" which it doesn't find.</p>

<p>I don't know why it would work for your colleagues though, if they are running the same OS and version of Python... FWIW it gives me the same error message on a mac, and either of the two ways I gave fixes it.</p>
"
36395,893,2008-08-30T22:14:36Z,36139,29,"<p>It is also worth noting the <code>sorted()</code> function:</p>

<pre><code>for x in sorted(list):
    print x
</code></pre>

<p>This returns a new, sorted version of a list without changing the original list.</p>
"
36818,3839,2008-08-31T12:19:14Z,36812,-1,"<p>Follow the Django tutorial for setting up the ""admin"" part of an application. This will allow you to modify your database.</p>

<p><a href=""https://docs.djangoproject.com/en/dev/intro/tutorial02/"" rel=""nofollow"">Django Admin Setup</a></p>

<p>Alternatively, you can just connect directly to the database using the standard tools for whatever database type you are using.</p>
"
36827,3448,2008-08-31T12:31:49Z,36812,0,"<p>This topic is covered in <a href=""https://code.djangoproject.com/wiki/Tutorials"" rel=""nofollow"">Django tutorials</a>.</p>
"
36852,3861,2008-08-31T13:11:03Z,28668,3,"<p>You'll need the FileMaker Pro installation CD to get the drivers. <a href=""http://www.filemaker.com/downloads/pdf/fm9_odbc_jdbc_guide_en.pdf"" rel=""nofollow"">This document</a> details the process for FMP 9 - it is similar for versions 7.x and 8.x as well. Versions 6.x and earlier are completely different and I wouldn't bother trying (xDBC support in those previous versions is ""minimal"" at best).</p>

<p>FMP 9 supports SQL-92 standard syntax (mostly). Note that rather than querying tables directly you query using the ""table occurrence"" name which serves as a table alias of sorts. If the data tables are stored in multiple files it is possible to create a single FMP file with table occurrences/aliases pointing to those data tables. There's an ""undocumented feature"" where such a file must have a table defined in it as well and that table ""related"" to any other table on the relationships graph (doesn't matter which one) for ODBC access to work. Otherwise your queries will always return no results.</p>

<p>The PDF document details all of the limitations of using the xDBC interface FMP provides. Performance of simple queries is reasonably fast, ymmv. I have found the performance of queries specifying the ""LIKE"" operator to be less than stellar.</p>

<p>FMP also has an XML/XSLT interface that you can use to query FMP data over an HTTP connection. It also provides a PHP class for accessing and using FMP data in web applications.</p>
"
36902,2600,2008-08-31T15:07:48Z,36901,9,"<p>From the Python documentation:</p>

<blockquote>
  <p>If there are more positional arguments than there are formal parameter slots, a TypeError exception is raised, unless a formal parameter using the syntax ""*identifier"" is present; in this case, that formal parameter receives a tuple containing the excess positional arguments (or an empty tuple if there were no excess positional arguments). </p>
  
  <p>If any keyword argument does not correspond to a formal parameter name, a TypeError exception is raised, unless a formal parameter using the syntax ""**identifier"" is present; in this case, that formal parameter receives a dictionary containing the excess keyword arguments (using the keywords as keys and the argument values as corresponding values), or a (new) empty dictionary if there were no excess keyword arguments. </p>
</blockquote>
"
36908,720,2008-08-31T15:17:31Z,36901,877,"<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href=""http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions"">more on defining functions</a> in the Python documentation.</p>

<p>The <code>*args</code> will give you all function parameters <a href=""https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists"">as a tuple</a>:</p>

<pre><code>In [1]: def foo(*args):
   ...:     for a in args:
   ...:         print a
   ...:         
   ...:         

In [2]: foo(1)
1


In [4]: foo(1,2,3)
1
2
3
</code></pre>

<p>The <code>**kwargs</code> will give you all 
<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>

<pre><code>In [5]: def bar(**kwargs):
   ...:     for a in kwargs:
   ...:         print a, kwargs[a]
   ...:         
   ...:         

In [6]: bar(name='one', age=27)
age 27
name one
</code></pre>

<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>

<pre><code>def foo(kind, *args, **kwargs):
   pass
</code></pre>

<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>

<pre><code>In [9]: def foo(bar, lee):
   ...:     print bar, lee
   ...:     
   ...:     

In [10]: l = [1,2]

In [11]: foo(*l)
1 2
</code></pre>

<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=""http://www.python.org/dev/peps/pep-3132/"">Extended Iterable Unpacking</a>):</p>

<pre><code>first, *rest = [1,2,3,4]
first, *l, last = [1,2,3,4]
</code></pre>

<p>Also Python 3 adds new semantic (refer <a href=""https://www.python.org/dev/peps/pep-3102/"">PEP 3102</a>):</p>

<pre><code>def func(arg1, arg2, arg3='default', *, kwarg1='abc', kwarg2='xyz'):
    pass
</code></pre>

<p>Such function accepts only 2 positional arguments, and everything after <code>*</code> can only be passed as keyword argument, not positional one.</p>

<p>In Python 2 similar was true for all parameters after <code>*args</code>.</p>
"
36911,2373,2008-08-31T15:20:21Z,36901,89,"<p>The single * means that there can be any number of extra positional arguments. <code>foo()</code> can be invoked like <code>foo(1,2,3,4,5)</code>. In the body of foo() param2 is a sequence containing 2-5.</p>

<p>The double ** means there can be any number of extra named parameters. <code>bar()</code> can be invoked like <code>bar(1, a=2, b=3)</code>. In the body of bar() param2 is a dictionary containing {'a':2, 'b':3 }</p>

<p>With the following code:</p>

<pre><code>def foo(param1, *param2):
    print param1
    print param2

def bar(param1, **param2):
    print param1
    print param2

foo(1,2,3,4,5)
bar(1,a=2,b=3)
</code></pre>

<p>the output is</p>

<pre><code>1
(2, 3, 4, 5)
1
{'a': 2, 'b': 3}
</code></pre>
"
36926,742,2008-08-31T15:47:25Z,36901,244,"<p>It's also worth noting that you can use * and ** when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:</p>

<pre><code>def foo(x,y,z):
    print ""x="" + str(x)
    print ""y="" + str(y)
    print ""z="" + str(z)
</code></pre>

<p>You can do things like:</p>

<pre><code>&gt;&gt;&gt; mylist = [1,2,3]
&gt;&gt;&gt; foo(*mylist)
x=1
y=2
z=3

&gt;&gt;&gt; mydict = {'x':1,'y':2,'z':3}
&gt;&gt;&gt; foo(**mydict)
x=1
y=2
z=3

&gt;&gt;&gt; mytuple = (1, 2, 3)
&gt;&gt;&gt; foo(*mytuple)
x=1
y=2
z=3
</code></pre>
"
36935,3207,2008-08-31T15:59:11Z,36812,7,"<p>You will want to wire your URL to the Django <a href=""https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-create-update-create-object"" rel=""nofollow"">create_object generic view</a>, and pass it either ""model"" (the model you want to create) or ""form_class"" (a customized <a href=""https://docs.djangoproject.com/en/1.1/topics/forms/modelforms/#topics-forms-modelforms"" rel=""nofollow"">ModelForm</a> class).  There are a number of <a href=""https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-create-update-create-object"" rel=""nofollow"">other arguments</a> you can also pass to override default behaviors.</p>

<p>Sample URLconf for the simplest case:</p>

<pre><code>from django.conf.urls.defaults import *
from django.views.generic.create_update import create_object

from my_products_app.models import Product

urlpatterns = patterns('',
    url(r'^admin/products/add/$', create_object, {'model': Product}))
</code></pre>

<p>Your template will get the context variable ""form"", which you just need to wrap in a &lt;form> tag and add a submit button.  The simplest working template (by default should go in ""my_products_app/product_form.html""):</p>

<pre><code>&lt;form action=""."" method=""POST""&gt;
  {{ form }}
  &lt;input type=""submit"" name=""submit"" value=""add""&gt;
&lt;/form&gt;
</code></pre>

<p>Note that your Product model must have a get_absolute_url method, or else you must pass in the post_save_redirect parameter to the view.  Otherwise it won't know where to redirect to after save.</p>
"
36937,3280,2008-08-31T16:06:14Z,36932,610,"<p>Before PEP 435, Python didn't have an equivalent but you could implement your own.</p>

<p>Myself, I like keeping it simple (I've seen some horribly complex examples on the net), something like this ...</p>

<pre><code>class Animal:
    DOG = 1
    CAT = 2

x = Animal.DOG
</code></pre>

<hr>

<p>In Python 3.4 (<a href=""http://www.python.org/dev/peps/pep-0435/"">PEP 435</a>), you can make Enum the base class.  This gets you a little bit of extra functionality, described in the PEP.  For example, enum values are distinct from integers.</p>

<pre><code>class Animal(Enum):
    DOG = 1
    CAT = 2

print(Animal.DOG)
&lt;Animal.DOG: 1&gt;
</code></pre>

<hr>

<p>If you don't want to type the values, use the following shortcut:</p>

<pre><code>class Animal(Enum):
    DOG, CAT = range(2)
</code></pre>
"
36940,2384,2008-08-31T16:09:53Z,36932,17,"<p>Hmmm... I suppose the closest thing to an enum would be a dictionary, defined either like this:</p>

<pre><code>months = {
    'January': 1,
    'February': 2,
    ...
}
</code></pre>

<p>or</p>

<pre><code>months = dict(
    January=1,
    February=2,
    ...
)
</code></pre>

<p>Then, you can use the symbolic name for the constants like this:</p>

<pre><code>mymonth = months['January']
</code></pre>

<p>There are other options, like a list of tuples, or a tuple of tuples, but the dictionary is the only one that provides you with a ""symbolic"" (constant string) way to access the 
value.</p>

<p>Edit: I like Alexandru's answer too!</p>
"
36978,927,2008-08-31T17:14:06Z,36953,4,"<p>Have a look at the standard module <a href=""http://docs.python.org/lib/module-shlex.html"" rel=""nofollow"">shlex</a> and modify one copy of it to match the syntax you use for your shell, it is a good starting point</p>

<p>If you want all the power of a complete solution for lexing/parsing, <a href=""http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget"" rel=""nofollow"">ANTLR</a> can generate python too.</p>
"
37000,3002,2008-08-31T18:10:50Z,36932,42,"<p>Python doesn't have a built-in equivalent to <code>enum</code>, and other answers have ideas for implementing your own (you may also be interested in the <a href=""http://code.activestate.com/recipes/67107/"">over the top version</a> in the Python cookbook).</p>

<p>However, in situations where an <code>enum</code> would be called for in C, I usually end up <strong><em>just using simple strings</em></strong>: because of the way objects/attributes are implemented, (C)Python is optimized to work very fast with short strings anyway, so there wouldn't really be any performance benefit to using integers. To guard against typos / invalid values you can insert checks in selected places.</p>

<pre><code>ANIMALS = ['cat', 'dog', 'python']

def take_for_a_walk(animal):
    assert animal in ANIMALS
    ...
</code></pre>

<p>(One disadvantage compared to using a class is that you lose the benefit of autocomplete)</p>
"
37009,3560,2008-08-31T18:20:51Z,36806,5,"<p>What happens if you remove the <code>Alias /</code> directive?</p>
"
37081,116,2008-08-31T20:31:22Z,36932,140,"<p>If you need the numeric values, here's the quickest way:</p>

<pre><code>dog, cat, rabbit = range(3)
</code></pre>
"
37146,3560,2008-08-31T21:43:58Z,37142,1,"<p>Use an interface that runs each response in a separate interpreter, such as <code>mod_wsgi</code> for Python. This lets multi-threading be used without encountering the GIL.</p>

<p>EDIT: Apparently, <code>mod_wsgi</code> no longer supports multiple interpreters per process because idiots couldn't figure out how to properly implement extension modules. It still supports running requests in separate processes FastCGI-style, though, so that's apparently the current accepted solution.</p>
"
37153,720,2008-08-31T21:53:30Z,37142,4,"<p>I'm not totally sure which problem you want so solve, but if you deploy your python/django application via an apache prefork MPM using mod_python apache will start several worker processes for handling different requests.</p>

<p>If one request needs so much resources, that you want to use multiple cores have a look at <a href=""http://pyprocessing.berlios.de/"" rel=""nofollow"">pyprocessing</a>. But I don't think that would be wise.</p>
"
37190,2947,2008-08-31T22:29:14Z,35948,0,"<p>shouldn't this:</p>

<pre><code>{{ user.item }}
</code></pre>

<p>be this?</p>

<pre><code>{{ item }}
</code></pre>

<p>there is no user object in the context within that loop....?</p>
"
37203,234,2008-08-31T22:41:55Z,37142,4,"<p>The 'standard' way to do this with rails is to run a ""pack"" of Mongrel instances (ie: 4 copies of the rails application) and then use apache or nginx or some other piece of software to sit in front of them and act as a load balancer. </p>

<p>This is probably how it's done with other ruby frameworks such as merb etc, but I haven't used those personally.</p>

<p>The OS will take care of running each mongrel on it's own CPU.</p>

<p>If you install <a href=""http://www.modrails.com/"" rel=""nofollow"">mod_rails aka phusion passenger</a> it will start and stop multiple copies of the rails process for you as well, so it will end up spreading the load across multiple CPUs/cores in a similar way.</p>
"
37218,3560,2008-08-31T22:51:15Z,36806,5,"<blockquote>
  <p>It works. I have no idea why, but it does.</p>
</blockquote>

<p>For future reference:</p>

<p>It works because Apache processes alias directives in order, and uses the first match. It was always hitting <code>Alias /</code>, which will match anything, before <code>WSGIScriptAlias</code>.</p>

<p>From the <a href=""http://httpd.apache.org/docs/2.2/mod/mod_alias.html"" rel=""nofollow""><code>mod_alias</code> documentation</a>:</p>

<blockquote>
  <p>First, all Redirects are processed before Aliases are processed, and therefore a request that matches a <code>Redirect</code> or <code>RedirectMatch</code> will never have Aliases applied. Second, the Aliases and Redirects are processed in the order they appear in the configuration files, with the first match taking precedence.</p>
</blockquote>
"
37245,3926,2008-08-31T23:14:54Z,36953,3,"<p>I suggest <a href=""http://www.canonware.com/Parsing/"" rel=""nofollow"">http://www.canonware.com/Parsing/</a>, since it is pure python and you don't need to learn a grammar, but it isn't widely used, and has comparatively little documentation. The heavyweight is ANTLR and PyParsing. ANTLR can generate java and C++ parsers too, and AST walkers but you will have to learn what amounts to a new language.</p>
"
37252,3926,2008-08-31T23:27:16Z,773,24,"<p>A neato trick with groupby is to run length encoding in one line:</p>

<pre><code>[(c,len(list(cgen))) for c,cgen in groupby(some_string)]
</code></pre>

<p>will give you a list of 2-tuples where the first element is the char and the 2nd is the number of repetitions.</p>
"
37488,3560,2008-09-01T05:26:06Z,37479,0,"<blockquote>
  <p>Is what I'm trying to do possible? If so, what am I doing wrong?</p>
</blockquote>

<p>It's certainly possible. What's wrong is that <code>HTMLDecorator.__init__()</code> doesn't accept parameters.</p>

<p>Here's a simple example:</p>

<pre><code>def decorator (func):
    def new_func ():
        return ""new_func %s"" % func ()
    return new_func

@decorator
def a ():
    return ""a""

def b ():
    return ""b""

print a() # new_func a
print decorator (b)() # new_func b
</code></pre>
"
37496,3056,2008-09-01T05:35:08Z,37486,4,"<p>How about parsing the HTML data and extracting the data with the help of the parser ?</p>

<p>I'd try something like the author described in <a href=""http://diveintopython.net/html_processing/extracting_data.html"" rel=""nofollow"">chapter 8.3 in the Dive Into Python book</a> </p>
"
37502,1265,2008-09-01T05:49:04Z,37486,6,"<p>While I agree with Lucas that regular expressions are not all that scary, I still think that you should go with a specialized HTML parser. This is because the HTML standard is hairy enough (especially if you want to parse arbitrarily ""HTML"" pages taken off the Internet) that you would need to write a lot of code to handle the corner cases. It seems that <a href=""http://docs.python.org/lib/module-htmllib.html"" rel=""nofollow"">python includes one out of the box</a>. </p>

<p>You should also check out the <a href=""http://utidylib.berlios.de/"" rel=""nofollow"">python bindings for TidyLib</a> which can clean up broken HTML, making the success rate of any HTML parsing much higher.</p>
"
37504,813,2008-09-01T05:50:44Z,37486,1,"<p>You might need something more complicated than a regular expression. Web pages often have angle brackets that aren't part of a tag, like this:</p>

<pre><code> &lt;div&gt;5 &lt; 7&lt;/div&gt;
</code></pre>

<p>Stripping the tags with regex will return the string ""5 "" and treat</p>

<pre><code> &lt; 7&lt;/div&gt;
</code></pre>

<p>as a single tag and strip it out.</p>

<p>I suggest looking for already-written code that does this for you. I did a search and found this: <a href=""http://zesty.ca/python/scrape.html"" rel=""nofollow"">http://zesty.ca/python/scrape.html</a> It also can resolve HTML entities.</p>
"
37506,3560,2008-09-01T05:53:39Z,37486,15,"<p>Use <a href=""http://www.crummy.com/software/BeautifulSoup/"">BeautifulSoup</a>! It's perfect for this, where you have incoming markup of dubious virtue and need to get something reasonable out of it. Just pass in the original text, extract all the string tags, and join them.</p>
"
37512,720,2008-09-01T06:07:01Z,37486,38,"<p>Use <a href=""http://codespeak.net/lxml/lxmlhtml.html"">lxml</a> which is the best xml/html library for python.</p>

<pre><code>import lxml.html
t = lxml.html.fromstring(""..."")
t.text_content()
</code></pre>

<p>And if you just want to sanitize the html look at the lxml.html.clean <a href=""http://codespeak.net/lxml/lxmlhtml.html#cleaning-up-html"">module</a></p>
"
37513,1057,2008-09-01T06:10:04Z,37479,0,"<p>@John (37448):</p>

<p>Sorry, I might have misled you with the name (bad choice).  I'm not really looking for a decorator function, or anything to do with decorators at all.  What I'm after is for the html(self) def to use ClassX or ClassY's <code>__repr__</code>.  I want this to work without modifying ClassX or ClassY.</p>
"
37526,3560,2008-09-01T06:25:43Z,37479,0,"<p>Ah, in that case, perhaps code like this will be useful? It doesn't really have anything to do with decorators, but demonstrates how to pass arguments to a class's initialization function and to retrieve those arguments for later.</p>

<pre><code>import cgi

class ClassX(object):
    def __repr__ (self):
        return ""&lt;class X&gt;""

class HTMLDecorator(object):
    def __init__ (self, wrapped):
        self.__wrapped = wrapped

    def html (self):
        sep = cgi.escape (repr (self.__wrapped))
        return sep.join ((""&lt;H1&gt;"", ""&lt;/H1&gt;""))

inst_x=ClassX()
inst_b=True

print HTMLDecorator(inst_x).html()
print HTMLDecorator(inst_b).html()
</code></pre>
"
37544,1057,2008-09-01T06:55:13Z,37479,0,"<p>@John (37479):</p>

<p>Very close, but then I lose everything from ClassX.  Below is something a collegue gave me that does do the trick, but it's hideous.  There has to be a better way.</p>

<pre><code>import cgi
from math import sqrt

class ClassX(object): 
  def __repr__(self): 
    return ""Best Guess""

class ClassY(object):
  pass # ... with own __repr__

inst_x=ClassX()

inst_y=ClassY()

inst_z=[ i*i for i in range(25) ]

inst_b=True

avoid=""__class__ __init__ __dict__ __weakref__""

class HTMLDecorator(object):
    def __init__(self,master):
        self.master = master
        for attr in dir(self.master):
            if ( not attr.startswith(""__"") or 
                attr not in avoid.split() and ""attr"" not in attr):
                self.__setattr__(attr, self.master.__getattribute__(attr))

    def html(self): # an ""enhanced"" version of __repr__
        return cgi.escape(self.__repr__()).join((""&lt;H1&gt;"",""&lt;/H1&gt;""))

    def length(self):
        return sqrt(sum(self.__iter__()))

print HTMLDecorator(inst_x).html()
print HTMLDecorator(inst_y).html()
wrapped_z = HTMLDecorator(inst_z)
print wrapped_z.length()
inst_z[0] += 70
#wrapped_z[0] += 71
wrapped_z.__setitem__(0,wrapped_z.__getitem__(0)+ 71)
print wrapped_z.html()
print HTMLDecorator(inst_b).html()
</code></pre>

<p>Output:</p>

<pre>&lt;H1&gt;Best Guess&lt;/H1&gt;
&lt;H1&gt;&lt;__main__.ClassY object at 0x891df0c&gt;&lt;/H1&gt;
70.0
&lt;H1&gt;[141, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576]&lt;/H1&gt;
&lt;H1&gt;True&lt;/H1&gt;</pre>
"
37553,1448,2008-09-01T07:02:10Z,37535,7,"<p>You can try this <a href=""http://code.activestate.com/recipes/362715/"" rel=""nofollow"">recipe on Active State</a>. </p>

<p>There is also a <a href=""http://code.google.com/p/lino/source/browse/lino/utils/dbfreader.py"" rel=""nofollow"">DBFReader module</a> which you can try.</p>

<p>For support for <a href=""http://www.physics.ox.ac.uk/users/santoso/dbf.py.src"" rel=""nofollow"">memo fields</a>.</p>
"
37571,3560,2008-09-01T07:33:45Z,37479,2,"<blockquote>
  <p>Very close, but then I lose everything from ClassX. Below is something a collegue gave me that does do the trick, but it's hideous. There has to be a better way.</p>
</blockquote>

<p>Looks like you're trying to set up some sort of proxy object scheme. That's doable, and there are better solutions than your colleague's, but first consider whether it would be easier to just patch in some extra methods. This won't work for built-in classes like <code>bool</code>, but it will for your user-defined classes:</p>

<pre><code>def HTMLDecorator (obj):
    def html ():
        sep = cgi.escape (repr (obj))
        return sep.join ((""&lt;H1&gt;"", ""&lt;/H1&gt;""))
    obj.html = html
    return obj
</code></pre>

<p>And here is the proxy version:</p>

<pre><code>class HTMLDecorator(object):
    def __init__ (self, wrapped):
        self.__wrapped = wrapped

    def html (self):
        sep = cgi.escape (repr (self.__wrapped))
        return sep.join ((""&lt;H1&gt;"", ""&lt;/H1&gt;""))

    def __getattr__ (self, name):
        return getattr (self.__wrapped, name)

    def __setattr__ (self, name, value):
        if not name.startswith ('_HTMLDecorator__'):
            setattr (self.__wrapped, name, value)
            return
        super (HTMLDecorator, self).__setattr__ (name, value)

    def __delattr__ (self, name):
        delattr (self.__wraped, name)
</code></pre>
"
37604,3207,2008-09-01T08:15:28Z,37486,0,"<p>Regular expressions are not scary, but writing your own regexes to strip HTML is a sure path to madness (and it won't work, either).  Follow the path of wisdom, and use one of the many good HTML-parsing libraries.</p>

<p>Lucas' example is also broken because ""sub"" is not a method of a Python string.  You'd have to ""import re"", then call re.sub(pattern, repl, string).  But that's neither here nor there, as the correct answer to your question does not involve writing any regexes.</p>
"
37619,3207,2008-09-01T08:30:41Z,37479,2,"<p>Both of John's solutions would work.  Another option that allows HTMLDecorator to remain very simple and clean is to monkey-patch it in as a base class.  This also works only for user-defined classes, not builtin types:</p>

<pre><code>import cgi

class ClassX(object):
    pass # ... with own __repr__

class ClassY(object):
    pass # ... with own __repr__

inst_x=ClassX()
inst_y=ClassY()

class HTMLDecorator:
    def html(self): # an ""enhanced"" version of __repr__
        return cgi.escape(self.__repr__()).join((""&lt;H1&gt;"",""&lt;/H1&gt;""))

ClassX.__bases__ += (HTMLDecorator,)
ClassY.__bases__ += (HTMLDecorator,)

print inst_x.html()
print inst_y.html()
</code></pre>

<p>Be warned, though -- monkey-patching like this comes with a high price in readability and maintainability of your code.  When you go back to this code a year later, it can become very difficult to figure out how your ClassX got that html() method, especially if ClassX is defined in some other library.</p>
"
37917,1709,2008-09-01T13:12:53Z,37535,16,"<p>I prefer <a href=""http://sourceforge.net/projects/dbfpy/"">dbfpy</a>. It supports both reading and writing of <code>.DBF</code> files and can cope with most variations of the format. It's the only implementation I have found that could both read and write the legacy DBF files of some older systems I have worked with.</p>
"
38092,2603,2008-09-01T16:05:25Z,36932,72,"<p>The typesafe enum pattern which was used in Java pre-JDK 5 has a
number of advantages. Much like in Alexandru's answer, you create a
class and class level fields are the enum values; however, the enum
values are instances of the class rather than small integers. This has
the advantage that your enum values don't inadvertently compare equal
to small integers, you can control how they're printed, add arbitrary
methods if that's useful and make assertions using isinstance:</p>

<pre><code>class Animal:
   def __init__(self, name):
       self.name = name

   def __str__(self):
       return self.name

   def __repr__(self):
       return ""&lt;Animal: %s&gt;"" % self

Animal.DOG = Animal(""dog"")
Animal.CAT = Animal(""cat"")

&gt;&gt;&gt; x = Animal.DOG
&gt;&gt;&gt; x
&lt;Animal: dog&gt;
&gt;&gt;&gt; x == 1
False
</code></pre>

<hr>

<p>A recent <a href=""http://mail.python.org/pipermail/python-dev/2010-November/105873.html"">thread on python-dev</a> pointed out there are a couple of enum libraries in the wild, including:</p>

<ul>
<li><a href=""http://packages.python.org/flufl.enum/docs/using.html"">flufl.enum</a></li>
<li><a href=""http://pypi.python.org/pypi/lazr.enum"">lazr.enum</a></li>
<li>... and the imaginatively named <a href=""http://pypi.python.org/pypi/enum/"">enum</a></li>
</ul>
"
38254,2603,2008-09-01T18:27:27Z,38238,22,"<p>Alternative constructors are the classic example.</p>
"
38276,3560,2008-09-01T18:45:56Z,38238,142,"<p>Class methods are for when you need to have methods that aren't specific to any particular instance, but still involve the class in some way. The most interesting thing about them is that they can be overridden by subclasses, something that's simply not possible in Java's static methods or Python's module-level functions.</p>

<p>If you have a class <code>MyClass</code>, and a module-level function that operates on MyClass (factory, dependency injection stub, etc), make it a <code>classmethod</code>. Then it'll be available to subclasses.</p>
"
38287,2147,2008-09-01T18:54:29Z,38238,4,"<p>Honestly?  I've never found a use for staticmethod or classmethod.  I've yet to see an operation that can't be done using a global function or an instance method.</p>

<p>It would be different if python used private and protected members more like Java does.  In Java, I need a static method to be able to access an instance's private members to do stuff.  In Python, that's rarely necessary.</p>

<p>Usually, I see people using staticmethods and classmethods when all they really need to do is use python's module-level namespaces better.</p>
"
38303,4080,2008-09-01T19:08:25Z,38238,53,"<p>Factory methods (alternative constructors) are indeed a classic example of class methods.</p>

<p>Basically, class methods are suitable anytime you would like to have a method which naturally fits into the namespace of the class, but is not associated with a particular instance of the class.</p>

<p>As an example, in the excellent <a href=""http://pypi.python.org/pypi/Unipath/0.2.1"">unipath</a> module:</p>

<h2>Current directory</h2>

<ul>
<li><code>Path.cwd()</code>
<ul>
<li>Return the actual current directory; e.g., <code>Path(""/tmp/my_temp_dir"")</code>. This is a class method.</li>
</ul></li>
<li><code>.chdir()</code>
<ul>
<li>Make self the current directory.</li>
</ul></li>
</ul>

<p>As the current directory is process wide, the <code>cwd</code> method has no particular instance with which it should be associated.  However, changing the <code>cwd</code> to the directory of a given <code>Path</code> instance should indeed be an instance method.</p>

<p>Hmmm... as <code>Path.cwd()</code> does indeed return a <code>Path</code> instance, I guess it could be considered to be a factory method...</p>
"
38442,2193,2008-09-01T21:14:43Z,38435,1,"<p>My solution to this, that I hope can be bettered, is to use Oracle to explicitly convert the TIMESTAMP into a string:</p>

<pre><code>cursor.execute(""SELECT TO_CHAR(WhenAdded, 'YYYY-MM-DD HH:MI:SSAM') FROM Log"")
</code></pre>

<p>This works, but isn't portable. I'd like to use the same Python script against a SQL Server database, so an Oracle-specific solution (such as TO_CHAR) won't work.</p>
"
38513,2600,2008-09-01T22:03:17Z,38508,7,"<p>Returning a tuple is the usual way to do this in Python.</p>
"
38514,3694,2008-09-01T22:03:41Z,38508,14,"<p>Return a tuple.</p>

<pre><code>def f(x):
    # do stuff
    return (True, modified_string)

success, modified_string = f(something)
</code></pre>
"
38516,3560,2008-09-01T22:04:02Z,38508,105,"<pre><code>def f(in_str):
    out_str = in_str.upper()
    return True, out_str # Creates tuple automatically

succeeded, b = f(""a"") # Automatic tuple unpacking
</code></pre>
"
38524,2147,2008-09-01T22:09:00Z,38508,27,"<p>Why not throw an exception if the operation wasn't successful?  Personally, I tend to be of the opinion that if you need to return more than one value from a function, you should reconsider if you're doing things the right way or use an object.</p>

<p>But more directly to the point, if you throw an exception, you're forcing them to deal with the problem.  If you try to return a value that indicates failure, it's very well possible somebody could not check the value and end up with some potentially hard to debug errors.</p>
"
38646,1157,2008-09-02T00:11:49Z,37486,0,"<p>Looking at the amount of sense people are demonstrating in other answers here, I'd say that using a regex probably isn't the best idea for your situation. Go for something tried and tested, and treat my previous answer as a demonstration that regexes need not be <em>that</em> scary.</p>
"
38718,3154,2008-09-02T02:33:57Z,38435,2,"<p>I believe this is a bug in the Oracle ODBC driver. Basically, the Oracle ODBC driver does not support the <code>TIMESTAMP WITH (LOCAL) TIME ZONE</code> data types, only the <code>TIMESTAMP</code> data type. As you have discovered, one workaround is in fact to use the <code>TO_CHAR</code> method.</p>

<p>In your example you are not actually reading the time zone information. If you have control of the table you could convert it to a straight <code>TIMESTAMP</code> column. If you don't have control over the table, another solution may be to create a view that converts from <code>TIMESTAMP WITH TIME ZONE</code> to <code>TIMESTAMP</code> via a string - sorry, I don't know if there is a way to convert directly from <code>TIMESTAMP WITH TIME ZONE</code> to <code>TIMESTAMP</code>.</p>
"
38760,3286,2008-09-02T03:15:49Z,38508,3,"<p>Throwing an exception for failure is one good way to proceed, and if you're returning a lot of different values, you can return a tuple.  For the specific case you're citing, I often take an intermediate approach: return the modified string on success, and return None on failure.  I'm enough of an unreconstructed C programmer to want to return a NULL pointer to char on failure.</p>

<p>If I were writing a routine to be used as part of a larger library and consumed by other developers, I'd throw an exception on failure.  When I'm eating my own dogfood, I'll probably return different types and test on return.</p>
"
38762,3286,2008-09-02T03:20:30Z,36932,13,"<p>davidg recommends using dicts.  I'd go one step further and use sets:</p>

<pre><code>months = set('January', 'February', ..., 'December')
</code></pre>

<p>Now you can test whether a value matches one of the values in the set like this:</p>

<pre><code>if m in months:
</code></pre>

<p>like dF, though, I usually just use string constants in place of enums.</p>
"
38916,3207,2008-09-02T06:10:58Z,38601,141,"<p>The growing complexity of this answer over time, and the many hacks required, probably ought to caution you against doing this at all. It's relying on undocumented internal implementation details of the admin, is likely to break again in future versions of Django, and is no easier to implement than just finding another JS calendar widget and using that.</p>

<p>That said, here's what you have to do if you're determined to make this work:</p>

<ol>
<li><p>Define your own ModelForm subclass for your model (best to put it in forms.py in your app), and tell it to use the AdminDateWidget / AdminTimeWidget / AdminSplitDateTime (replace 'mydate' etc with the proper field names from your model):</p>

<pre><code>from django import forms
from my_app.models import Product
from django.contrib.admin import widgets                                       

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
    def __init__(self, *args, **kwargs):
        super(ProductForm, self).__init__(*args, **kwargs)
        self.fields['mydate'].widget = widgets.AdminDateWidget()
        self.fields['mytime'].widget = widgets.AdminTimeWidget()
        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()
</code></pre></li>
<li><p>Change your URLconf to pass 'form_class': ProductForm instead of 'model': Product to the generic create_object view (that'll mean ""from my_app.forms import ProductForm"" instead of ""from my_app.models import Product"", of course).</p></li>
<li><p>In the head of your template, include {{ form.media }} to output the links to the Javascript files.</p></li>
<li><p>And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:</p>

<pre><code>&lt;script type=""text/javascript"" src=""/my_admin/jsi18n/""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""/media/admin/js/core.js""&gt;&lt;/script&gt;
</code></pre>

<p>You may also wish to use the following admin CSS (thanks <a href=""http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/719583#719583"">Alex</a> for mentioning this):</p>

<pre><code>&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/forms.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/base.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/global.css""/&gt;
&lt;link rel=""stylesheet"" type=""text/css"" href=""/media/admin/css/widgets.css""/&gt;
</code></pre></li>
</ol>

<p>This implies that Django's admin media (ADMIN_MEDIA_PREFIX) is at /media/admin/ - you can change that for your setup.  Ideally you'd use a context processor to pass this values to your template instead of hardcoding it, but that's beyond the scope of this question.</p>

<p>This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks <a href=""http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/408230#408230"">Jeremy</a> for pointing this out).  Sample code for your URLconf:</p>

<pre><code>(r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),
</code></pre>

<p>Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:</p>

<pre><code>{% load adminmedia %} /* At the top of the template. */

/* In the head section of the template. */
&lt;script type=""text/javascript""&gt;
window.__admin_media_prefix__ = ""{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}"";
&lt;/script&gt;
</code></pre>

<p>Thanks <a href=""http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/2818128#2818128"">lupefiasco</a> for this addition.</p>
"
38989,893,2008-09-02T07:49:27Z,38987,25,"<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())
print z
</code></pre>

<p>For items with keys in both dictionaries ('b'), you can control which one ends up in the output by putting that one last.</p>
"
38990,2900,2008-09-02T07:50:12Z,38987,1292,"<p>In your case, what you can do is:</p>

<pre><code>z = dict(x.items() + y.items())
</code></pre>

<p>This will, as you want it, put the final dict in <code>z</code>, and make the value for key <code>b</code> be properly overridden by the second (<code>y</code>) dict's value:</p>

<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; z = dict(x.items() + y.items())
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>

<p>If you use Python 3, it is only a little more complicated.  To create <code>z</code>:</p>

<pre><code>&gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</code></pre>
"
39062,2018,2008-09-02T09:02:34Z,35634,2,"<p>You could also use <code>__id__</code>. This gives you the objects internal ID number, which is always unique. To check if to objects are the same, try</p>

<blockquote>
  <p><code>a.__id__ = b.__id__</code></p>
</blockquote>

<p>This is how Ruby's standard library does it as far as I can tell (see <code>group_by</code> and others).</p>
"
39089,267,2008-09-02T09:24:20Z,39086,2,"<p>Create a new file, copy lines from the old to the new, and do the replacing before you write the lines to the new file.</p>
"
39110,4059,2008-09-02T09:42:21Z,39086,111,"<p>I guess something like this should do it. It basically writes the content to a new file and replaces the old file with the new file:</p>

<pre><code>from tempfile import mkstemp
from shutil import move
from os import remove, close

def replace(file_path, pattern, subst):
    #Create temp file
    fh, abs_path = mkstemp()
    with open(abs_path,'w') as new_file:
        with open(file_path) as old_file:
            for line in old_file:
                new_file.write(line.replace(pattern, subst))
    close(fh)
    #Remove original file
    remove(file_path)
    #Move new file
    move(abs_path, file_path)
</code></pre>
"
39113,3590,2008-09-02T09:42:57Z,39086,8,"<p>As lassevk suggests, write out the new file as you go, here is some example code:</p>

<pre><code>fin = open(""a.txt"")
fout = open(""b.txt"", ""wt"")
for line in fin:
    fout.write( line.replace('foo', 'bar') )
fin.close()
fout.close()
</code></pre>
"
39295,2384,2008-09-02T11:43:45Z,39104,4,"<p>That's probably the way to do it, without resorting to something more advanced like using setuptools to install the files where they belong.</p>

<p>Notice there's a problem with that approach, because on OSes with real a security framework (UNIXes, etc.) the user running your script might not have the rights to access the DB in the system directory where it gets installed.</p>
"
39437,188,2008-09-02T13:00:46Z,38987,472,"<p>An alternative:</p>

<pre><code>z = x.copy()
z.update(y)
</code></pre>
"
39659,2603,2008-09-02T14:26:07Z,39104,14,"<p>Try using pkg_resources, which is part of setuptools (and available on all of the pythons I have access to right now):</p>

<pre><code>&gt;&gt;&gt; import pkg_resources
&gt;&gt;&gt; pkg_resources.resource_ filename(__name__, ""foo.config"")
'foo.config'
&gt;&gt;&gt; pkg_resources.resource_filename('tempfile', ""foo.config"")
'/usr/lib/python2.4/foo.config'
</code></pre>

<p>There's more discussion about using pkg_resources to get resources on the <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs#accessing-package-resources"">eggs</a> page and the <a href=""http://peak.telecommunity.com/DevCenter/PkgResources"">pkg_resources</a> page.</p>

<p>Also note, where possible it's probably advisable to use pkg_resources.resource_stream or pkg_resources.resource_string because if the package is part of an egg, resource_filename will copy the file to a temporary directory.</p>
"
39755,2979,2008-09-02T15:12:12Z,35805,11,"<pre><code>class A:
    def _ _init_ _(self):
        self.name = 'A'
a = A()
</code></pre>

<p>Creates an attribute on the object instance a of type A and it can therefore be found in: <code>a.__dict__</code></p>

<pre><code>class B:
    name = 'B'
b = B()
</code></pre>

<p>Creates an attribute on the class B and the attribute can be found in <code>B.__dict__</code> alternatively if you have an instance b of type B you can see the class level attributes in <code>b.__class__.__dict__</code></p>
"
39760,2900,2008-09-02T15:13:44Z,39663,7,"<p>It's an often-asked question.  There's an <a href=""http://code.activestate.com/recipes/113799/"">ASPN Cookbook</a> entry on it that has served me in the past.</p>

<p>And there is an <a href=""http://wiki.python.org/moin/BitManipulation"">extensive page of requirements one person would like to see from a module doing this.</a></p>
"
39858,3207,2008-09-02T15:52:07Z,38987,209,"<p>Another, more concise, option:</p>

<pre><code>z = dict(x, **y)
</code></pre>

<p><strong>Note</strong>: this has become a popular answer, but it is important to point out that if <code>y</code> has any non-string keys, the fact that this works at all is an abuse of a CPython implementation detail, and it does not work in Python 3, or in PyPy, IronPython, or Jython. Also, <a href=""http://mail.python.org/pipermail/python-dev/2010-April/099459.html"">Guido is not a fan</a>. So I can't recommend this technique for forward-compatible or cross-implementation portable code, which really means it should be avoided entirely.</p>
"
39865,3886,2008-09-02T15:58:10Z,39847,0,"<p>You know, you should look at static linking.</p>

<p>These days, we all have HUGE hard drives, and a few extra megabytes (for carrying around libc and what not) is really not that big a deal anymore. </p>

<p>You could also try running your applications in chroot() jails and distributing those.</p>
"
39871,4272,2008-09-02T15:59:52Z,39847,0,"<p>Depending on your mix os OSes, you might be better off creating packages for each class of system.</p>

<p>Alternatively, if they all share the same ABI and hardware architecture, you could also compile static binaries.</p>
"
39878,3886,2008-09-02T16:03:04Z,39847,1,"<p>Also, you could use autoconf and distribute your application in source form only. :)</p>
"
39982,3666,2008-09-02T16:36:28Z,39960,4,"<p>Well, I don't think that there is something like that in js. You can always use eval instead of locals(). Like this: </p>

<pre><code>eval(s+""()"");
</code></pre>

<p>You just have to know that actually function <em>foo</em> exists.</p>

<p><strong>Edit:</strong></p>

<p>Don't use eval:) Use:</p>

<pre><code>var functionName=""myFunctionName"";
window[functionName]();
</code></pre>
"
39992,1265,2008-09-02T16:41:56Z,39960,0,"<p>AFAIK, no. If you just want to check the existence of a given variable, you can do it by testing for it, something like this:</p>

<pre><code>if (foo) foo();
</code></pre>
"
40012,811,2008-09-02T16:50:34Z,39960,3,"<p>I seem to remember Brendan Eich commented on this in a recent podcast; if i recall correctly, it's not being considered, as it adds unreasonable restrictions to optimization. He compared it to the <code>arguments</code> local in that, while useful for varargs, its very existence removes the ability to guess at what a function will touch just by looking at its definition. </p>

<p>BTW: i believe JS <em>did</em> have support for accessing locals through the arguments local at one time - <a href=""http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Functions/arguments"" rel=""nofollow"">a quick search</a> shows this has been deprecated though.</p>
"
40035,4257,2008-09-02T17:00:12Z,39960,0,"<p>@e-bartek, I think that window[functionName] won't work if you in some closure, and the function name is local to that closure.  For example:</p>

<pre><code>function foo() {
    var bar = function () {
        alert('hello world');
    };
    var s = 'bar';
    window[s](); // this won't work
}
</code></pre>

<p>In this case, s is 'bar', but the function 'bar' only exists inside the scope of the function 'foo'.  It is not defined in the window scope.</p>

<p>Of course, this doesn't really answer the original question, I just wanted to chime in on this response.  I don't believe there is a way to do what the original question asked.</p>
"
40067,3666,2008-09-02T17:14:25Z,39960,0,"<p>@pkaeding</p>

<p>Yes, you're right. <em>window[functionName]()</em> doesn't work in this case, but <em>eval</em> does. If I needed something like this, I'd create my own object to keep those functions together.</p>

<pre><code>var func = {};
func.bar = ...;
var s = ""bar"";
func[s]();
</code></pre>
"
40069,3207,2008-09-02T17:15:23Z,39929,8,"<p>I think <a href=""http://www.gnupg.org/related_software/gpgme/"" rel=""nofollow"">GPGME</a> and the <a href=""http://pyme.sourceforge.net/"" rel=""nofollow"">PyMe Python wrapper</a> should do what you need.</p>
"
40173,473,2008-09-02T18:01:29Z,39960,13,"<ul>
<li><p>locals() - No. </p></li>
<li><p>globals() - Yes.</p></li>
</ul>

<p><code>window</code> is a reference to the global scope, like <code>globals()</code> in python.</p>

<pre><code>globals()[""foo""]
</code></pre>

<p>is the same as:</p>

<pre><code>window[""foo""]
</code></pre>
"
40367,3286,2008-09-02T19:29:07Z,39847,2,"<p>Launching a Python interpreter instance just to select the right binary to run would be much heavier than you need.  I'd distribute a shell .rc file which provides aliases.</p>

<p>In /shared/bin, you put the various binaries: /shared/bin/toolname-mac, /shared/bin/toolname-debian-x86, /shared/bin/toolname-netbsd-dreamcast, etc.  Then, in the common shared shell .rc file, you put the logic to set the aliases according to platform, so that on OSX, it gets alias toolname=/shared/bin/toolname-mac, and so forth.</p>

<p>This won't work as well if you're adding new tools all the time, because the users will need to reload the aliases.</p>

<p>I wouldn't recommend distributing tools this way, though.  Testing and qualifying new builds of the tools should be taking up enough time and effort that the extra time required to distribute the tools to the users is trivial.  You seem to be optimizing to reduce the distribution time.  Replacing tools that quickly in a live environment is all too likely to result in lengthy and confusing downtime if anything goes wrong in writing and building the tools--especially when subtle cross-platform issues creep in.</p>
"
40593,116,2008-09-02T20:41:33Z,40586,9,"<pre><code>try:
   cursor.execute(""select 1 / 0 from dual"")
except cx_Oracle.DatabaseError, exc:
   error, = exc
   print ""Code:"", error.code
   print ""Message:"", error.message
</code></pre>

<p>This results in the following output:</p>

<pre><code>Code: 1476
Message: ORA-01476: divisor is equal to zero
</code></pre>
"
40715,3458,2008-09-02T21:25:40Z,40705,8,"<p>""env"" simply executes the first thing it finds in the PATH env var. To switch to different python, prepend the directory for that python's executable to the path before invoking your script.</p>
"
40721,3978,2008-09-02T21:28:03Z,40705,2,"<p>If you are running the scripts then you can set your PATH variable to point to a private bin directory first:</p>

<pre><code>$ mkdir ~/bin
$ ln -s `which python2.4` ~/bin/python
$ export PATH=~/bin:$PATH
</code></pre>

<p>Then when you execute your python script it'll use python 2.4. You'll have to change your login scripts to change your PATH.</p>

<p>Alternatively run your python script with the explicit interpreter you want:</p>

<pre><code>$ /path/to/python2.4 &lt;your script&gt;
</code></pre>
"
41550,3355,2008-09-03T12:25:19Z,32044,-2,"<p>I had a similar issue, however I had first implemented the solution using JavaScript, and just afterwards considered how I would have done the same thing in django templates.</p>

<p>I used the serializer utility to turn a list off models into json, and used the json data as a basis for my hierarchy.</p>
"
41555,3171,2008-09-03T12:28:34Z,41547,2,"<p>If you can hook your authentication into the <a href=""http://www.djangoproject.com/documentation/authentication/#authentication-in-web-requests"" rel=""nofollow"">Django authentication scheme</a> you'll be able to use <code>request.user</code>.</p>

<p>I think this should just be a case of calling <code>authenticate()</code> and <code>login()</code> based on the contents of your Cookie.</p>

<p>Edit: @Staale - I always use the <a href=""http://www.djangobook.com/en/1.0/chapter04/"" rel=""nofollow""><code>locals()</code> trick</a> for my context so all my templates can see <code>request</code> and so <code>request.user</code>.  If you're not then I guess it wouldn't be so straightforward.</p>
"
41558,2696,2008-09-03T12:31:58Z,41547,18,"<p>In a more general sense of not having to explicitly set variables in each view, it sounds like you want to look at writing your own <a href=""http://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors"">context processor</a>.</p>

<p>From the docs:</p>

<blockquote>
  <p>A context processor has a very simple interface: It's just a Python function that takes one argument, an HttpRequest object, and returns a dictionary that gets added to the template context. Each context processor must return a dictionary.</p>
</blockquote>
"
41560,3355,2008-09-03T12:33:31Z,41547,2,"<p>@Dave
To use {{user.username}} in my templates, I will then have to use 
requestcontext rather than just a normal map/hash: <a href=""http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext"" rel=""nofollow"">http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext</a></p>

<p>So I guess there are no globals that the template engine checks.</p>

<p>But the RequestContext has some prepopulate classes that I can look into to solve my problems. Thanks.</p>
"
41574,533,2008-09-03T12:42:43Z,41562,3,"<p>A print statement does its IO through ""sys.stdout.write"" so you can override sys.stdout if you want to manipulate the print stream.</p>
"
41707,2600,2008-09-03T13:50:24Z,41701,13,"<p>I'd say that a dictionary is definitely the best way to do it.  It's easily extensible, allows you to give each value a sensible name, and Python has a lot of built-in language features for using and manipulating dictionaries.  If you need to add more fields later, all you need to change is the code that converts the tuple to a dictionary and the code that actually makes use of the new values.</p>

<p>For example:</p>

<pre><code>job={}
job['jobid'], job['label'], job['username']=&lt;querycode&gt;
</code></pre>
"
41709,3002,2008-09-03T13:51:53Z,41701,0,"<p>With a tuple it will always be a hassle to add or change fields. You're right that a dictionary will be much better. </p>

<p>If you want something with slightly friendlier syntax you might want to take a look at the answers <a href=""http://stackoverflow.com/questions/35988/c-like-structures-in-python"" rel=""nofollow"">this question</a> about a simple 'struct-like' object. That way you can pass around an object, say <code>job</code>, and access its fields even more easily than a tuple or dict:</p>

<pre><code>job.jobId, job.username = jobId, username
</code></pre>
"
41721,2696,2008-09-03T13:57:15Z,41701,3,"<p>Perhaps this is overkill for your case, but I would be tempted to create a ""Job"" class that takes the tuple as its constructor argument and has respective properties on it.  I'd then pass instances of this class around instead.</p>
"
41723,3355,2008-09-03T13:59:28Z,41701,2,"<p>I would use a dictionary. You can convert the tuple to a dictionary this way:</p>

<pre><code>values = &lt;querycode&gt;
keys = [""jobid"", ""label"", ""username""]
job = dict([[keys[i], values [i]] for i in xrange(len(values ))])
</code></pre>

<p>This will first create an array [[""jobid"", val1], [""label"", val2], [""username"", val3]] and then convert that to a dictionary. If the result order or count changes, you just need to change the list of keys to match the new result.</p>

<p>PS still fresh on Python myself, so there might be better ways off doing this.</p>
"
41730,2260,2008-09-03T14:02:37Z,41701,-2,"<p>How about this:</p>

<pre><code>class TypedTuple:
    def __init__(self, fieldlist, items):
       self.fieldlist = fieldlist
       self.items = items
    def __getattr__(self, field):
       return self.items[self.fieldlist.index(field)]
</code></pre>

<p>You could then do:</p>

<pre><code>j = TypedTuple([""jobid"", ""label"", ""username""], job)
print j.jobid
</code></pre>

<p>It should be easy to swap <code>self.fieldlist.index(field)</code> with a dictionary lookup later on... just edit your <code>__init__</code> method! Something like Staale does.</p>
"
41822,1412,2008-09-03T14:42:10Z,14281,0,"<p>Isn't it (at least theoretically) possible, to read in the ZIP's Huffman coding and then translate the regexp into the Huffman code? Might this be more efficient than first de-compressing the data, then running the regexp?</p>

<p>(Note: I know it wouldn't be quite that simple: you'd also have to deal with other aspects of the ZIP coding&mdash;file layout, block structures, back-references&mdash;but one imagines this could be fairly lightweight.)</p>

<p>EDIT: Also note that it's probably much more sensible to just use the <code>zipfile</code> solution.</p>
"
41846,2603,2008-09-03T14:51:48Z,41701,13,"<p>@Staale</p>

<p>There is a better way:</p>

<pre><code>job = dict(zip(keys, values))
</code></pre>
"
41921,825,2008-09-03T15:21:20Z,41562,1,"<p>The python <a href=""http://www.python.org/doc/current/lib/module-inspect.html"" rel=""nofollow"">inspect</a> module makes this a lot easier and cleaner. </p>
"
41999,4275,2008-09-03T16:02:06Z,41969,0,"<p>this would probably have to be done manually, or have as a config item since there are many file managers that users may want to use. Providing a way for command options as well.</p>

<p>There might be an function that launches the defaults for kde or gnome in their respective toolkits but I haven't had reason to look for them.</p>
"
42039,1249,2008-09-03T16:15:43Z,41969,0,"<p>You're going to have to do this based on the running window manager. OSX and Windows have a (defacto) standard way because there is only one choice.</p>

<p>You shouldn't need to specify the exact filemanager application, though, this should be possible to do through the wm. I know Gnome does, and it's important to do this in KDE since there are two possible file managers (Konqueror/Dolphin) that may be in use.</p>

<p>I agree that this would be a good thing for freedesktop.org to standardize, although I doubt it will happen unless someone steps up and volunteers to do it.</p>

<p><hr /></p>

<p>EDIT: I wasn't aware of xdg-open. Good to know!</p>
"
42046,4421,2008-09-03T16:18:25Z,41969,7,"<pre><code>os.system('xdg-open ""%s""' % foldername)
</code></pre>

<p><code>xdg-open</code> can be used for files/urls also</p>
"
42048,2600,2008-09-03T16:18:53Z,42034,32,"<ul>
<li>Tuples are used whenever you want to return multiple results from a function.</li>
<li>Since they're immutable, they can be used as keys for a dictionary (lists can't).</li>
</ul>
"
42049,4203,2008-09-03T16:19:14Z,42034,2,"<p>I find them useful when you always deal with two or more objects as a set.</p>
"
42050,2971,2008-09-03T16:20:00Z,42034,1,"<p>A list can always replace a tuple, with respect to functionality (except, apparently, as keys in a dict). However, a tuple can make things go faster. The same is true for, for example, immutable strings in Java -- when will you ever need to be unable to alter your strings? Never!</p>

<p>I just read a decent discussion on limiting what you can do in order to make better programs; <a href=""http://weblog.raganwald.com/2007/03/why-why-functional-programming-matters.html"" rel=""nofollow"">Why Why Functional Programming Matters Matters</a></p>
"
42052,2775,2008-09-03T16:20:59Z,42034,14,"<p>Tuples make good dictionary keys when you need to combine more than one piece of data into your key and don't feel like making a class for it.</p>

<pre><code>a = {}
a[(1,2,""bob"")] = ""hello!""
a[(""Hello"",""en-US"")] = ""Hi There!""
</code></pre>

<p>I've used this feature primarily to create a dictionary with keys that are coordinates of the vertices of a mesh.  However, in my particular case, the exact comparison of the floats involved worked fine which might not always be true for your purposes [in which case I'd probably convert your incoming floats to some kind of fixed-point integer]</p>
"
42055,1043,2008-09-03T16:23:48Z,42034,1,"<p>A tuple is useful for storing multiple values.. As you note a tuple is just like a list that is immutable - e.g. once created you cannot add/remove/swap elements.</p>

<p>One benefit of being immutable is that because the tuple is fixed size it allows the run-time to perform certain optimizations. This is particularly beneficial when a tupple is used in the context of a return value or a parameter to a function.</p>
"
42060,4020,2008-09-03T16:25:17Z,42034,2,"<p>Tuples and lists have the same uses in general. Immutable data types in general have many benefits, mostly about concurrency issues.</p>

<p>So, when you have lists that are not volatile in nature and you need to guarantee that no consumer is altering it, you may use a tuple.</p>

<p>Typical examples are fixed data in an application like company divisions, categories, etc.  If this data change, typically a single producer rebuilts the tuple.</p>
"
42485,2902,2008-09-03T20:20:00Z,42482,2,"<p>Open Office has an <a href=""http://api.openoffice.org/"" rel=""nofollow"">API</a></p>
"
42492,2194,2008-09-03T20:22:23Z,42482,0,"<p>If it is Word 2007 docx, you could unzip it and parse the XML files that are contained inside.</p>
"
42516,2846,2008-09-03T20:32:40Z,40705,4,"<p>Pretty hackish solution - if your check fails, use this function (which probably could be significantly improved) to determine the best interpreter available, determine if it is acceptable, and if so relaunch your script with os.system or something similar and your sys.argv using the new interpreter.</p>

<pre><code>import os
import glob
def best_python():
    plist = []
    for i in os.getenv(""PATH"").split("":""):
        for j in glob.glob(os.path.join(i, ""python2.[0-9]"")):
             plist.append(os.path.join(i, j))
    plist.sort()
    plist.reverse()
    if len(plist) == 0: return None
    return plist[0]
</code></pre>
"
42597,3051,2008-09-03T21:08:02Z,42581,75,"<p>Look at the definition of <a href=""http://docs.python.org/library/re.html#re.sub""><code>re.sub</code></a>:</p>

<pre><code>sub(pattern, repl, string[, count])
</code></pre>

<p>The 4th argument is the count, you are using <code>re.MULTILINE</code> (which is 8) as the count, not as a flag.</p>

<p>You have to compile your regex if you wish to use flags.</p>

<pre><code>re.sub(re.compile('^//', re.MULTILINE), '', s)
</code></pre>

<p>A <code>flags</code> argument was added in Python 2.7, so the full definition is now:</p>

<pre><code>re.sub(pattern, repl, string[, count, flags])
</code></pre>

<p>Which means that:</p>

<pre><code>re.sub('^//', '', s, flags=re.MULTILINE)
</code></pre>

<p>works.</p>
"
42689,3446,2008-09-03T21:52:46Z,27567,4,"<p>This document seems to go into quite a bit of detail (and I think a complete description is out of scope for a stackoverflow answer):</p>

<ul>
<li><a href=""http://codespeak.net/pypy/dist/pypy/doc/translation.html"" rel=""nofollow"">http://codespeak.net/pypy/dist/pypy/doc/translation.html</a></li>
</ul>

<p>The general idea of translating from one language to another isn't particularly revolutionary, but it has only recently been gaining popularity / applicability in ""real-world"" applications.  <a href=""http://code.google.com/webtoolkit/"" rel=""nofollow"">GWT</a> does this with Java (generating Javascript) and there is a library for translating Haskell into various other languages as well (called <a href=""http://www.haskell.org/haskellwiki/Yhc"" rel=""nofollow"">YHC</a>)</p>
"
42794,3594,2008-09-03T23:07:53Z,40705,0,"<p>@morais: That's an interesting idea, but I think maybe we can take it one step farther. Maybe there's a way to use <a href=""http://pypi.python.org/pypi/virtualenv"" rel=""nofollow"">Ian Bicking's virtualenv</a> to:</p>

<ul>
<li>See if we're running in an acceptable environment to begin with, and if so, do nothing.</li>
<li>Check if there exists a version-specific executable on the <code>PATH</code>, i.e. check if <code>python2.x</code> exists <code>for x in reverse(range(4, 10))</code>. If so, re-run the command with the better interpreter.</li>
<li>If no better interpreter exists, use virtualenv to try and install a newer version of Python from the older version of Python and get any prerequisite packages.</li>
</ul>

<p>I have no idea if virtualenv is capable of this, so I'll go mess around with it sometime soon. :)</p>
"
42997,3560,2008-09-04T01:26:33Z,42950,43,"<p>EDIT: See @<a href=""#43663"">Blair Conrad's answer</a> for a cleaner solution</p>

<p><hr /></p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.date (2000, 2, 1) - datetime.timedelta (days = 1)
datetime.date(2000, 1, 31)
&gt;&gt;&gt;
</code></pre>
"
43088,1199,2008-09-04T02:25:50Z,42950,32,"<p>EDIT: see my other answer. It has a better implementation than this one, which I leave here just in case someone's interested in seeing how one might ""roll your own"" calculator.</p>

<p>@<a href=""#42997"">John Millikin</a> gives a good answer, with the added complication of calculating the first day of the next month.</p>

<p>The following isn't particularly elegant, but to figure out the last day of the month that any given date lives in, you could try:</p>

<pre><code>def last_day_of_month(date):
    if date.month == 12:
        return date.replace(day=31)
    return date.replace(month=date.month+1, day=1) - datetime.timedelta(days=1)

&gt;&gt;&gt; last_day_of_month(datetime.date(2002, 1, 17))
datetime.date(2002, 1, 31)
&gt;&gt;&gt; last_day_of_month(datetime.date(2002, 12, 9))
datetime.date(2002, 12, 31)
&gt;&gt;&gt; last_day_of_month(datetime.date(2008, 2, 14))
datetime.date(2008, 2, 29)
</code></pre>
"
43172,3830,2008-09-04T04:09:00Z,43099,5,"<p>And the answer is like so:</p>

<pre><code>def check_commit_msg(local, master, old_revno, old_revid, new_revno, new_revid):
    branch = local or master
    revision = branch.repository.get_revision(new_revid)
    print revision.message
</code></pre>

<p>local and master are Branch objects, so once you have a revision, it's easy to extract the message.</p>
"
43301,2983,2008-09-04T07:45:26Z,42482,2,"<p>Using the OpenOffice API, and Python, and <a href=""http://www.pitonyak.org/oo.php"" rel=""nofollow"">Andrew Pitonyak's excellent online macro book</a> I managed to do this. Section 7.16.4 is the place to start.</p>

<p>One other tip to make it work without needing the screen at all is to use the Hidden property:</p>

<pre><code>RO = PropertyValue('ReadOnly', 0, True, 0)
Hidden = PropertyValue('Hidden', 0, True, 0)
xDoc = desktop.loadComponentFromURL( docpath,""_blank"", 0, (RO, Hidden,) )
</code></pre>

<p>Otherwise the document flicks up on the screen (probably on the webserver console) when you open it.</p>
"
43312,720,2008-09-04T07:54:57Z,43290,32,"<p>If you need to use something similar to the <code>{% url %}</code> template tag in your code, Django provides the <code>django.core.urlresolvers.reverse()</code>. The <code>reverse</code> function has the following signature:</p>

<pre><code>reverse(viewname, urlconf=None, args=None, kwargs=None)
</code></pre>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/urlresolvers/"">https://docs.djangoproject.com/en/dev/ref/urlresolvers/</a></p>
"
43331,4496,2008-09-04T08:21:31Z,43315,32,"<p>Not currently, currently the only languages available to access the iPhone SDK are C/C++, Objective C and Swift.</p>

<p>There is no technical reason why this could not change in the future but I wouldn't hold your breath for this happening in the short term.</p>

<p>That said, Objective-C and Swift really are not too scary...</p>

<blockquote>
  <h1>2016 edit</h1>
  
  <p>Javascript with NativeScript framework is available to use now.</p>
</blockquote>
"
43358,2794,2008-09-04T08:44:11Z,43315,51,"<p>You can use PyObjC on the iPhone as well, due to the excellent work by Jay Freeman (saurik). See <a href=""http://www.saurik.com/id/5"">iPhone Applications in Python</a>.</p>

<p>Note that this requires a jailbroken iPhone at the moment.</p>
"
43364,3571,2008-09-04T08:52:01Z,42482,8,"<p>I use catdoc or antiword for this, whatever gives the result that is the easiest to parse. I have embedded this in python functions, so it is easy to use from the parsing system (which is written in python).</p>

<pre><code>import os

def doc_to_text_catdoc(filename):
    (fi, fo, fe) = os.popen3('catdoc -w ""%s""' % filename)
    fi.close()
    retval = fo.read()
    erroroutput = fe.read()
    fo.close()
    fe.close()
    if not erroroutput:
        return retval
    else:
        raise OSError(""Executing the command caused an error: %s"" % erroroutput)

# similar doc_to_text_antiword()
</code></pre>

<p>The -w switch to catdoc turns off line wrapping, BTW.</p>
"
43386,720,2008-09-04T09:12:27Z,43368,3,"<p>You should have a look at django and especially its <a href=""http://www.djangoproject.com/documentation/forms/"" rel=""nofollow"">newforms</a> and <a href=""http://docs.djangoproject.com/en/dev/ref/contrib/admin/#ref-contrib-admin"" rel=""nofollow"">admin</a> modules. The newforms module provides a nice possibility to do server side validation with automated generation of error messages/pages for the user. Adding ajax validation is also <a href=""http://lukeplant.me.uk/blog.php?id=1107301681"" rel=""nofollow"">possible</a> </p>
"
43414,3571,2008-09-04T09:42:10Z,43368,1,"<p>I believe that Django models does not support composite primary keys (see <a href=""http://docs.djangoproject.com/en/dev/topics/db/models/#automatic-primary-key-fields"" rel=""nofollow"">documentation</a>). But perhaps you can use SQLAlchemy in Django? A <a href=""http://www.google.com/search?q=sqlalchemy+django"" rel=""nofollow"">google search</a> indicates that you can. I have not used Django, so I don't know.</p>

<p>I suggest you take a look at:</p>

<ul>
<li><a href=""http://toscawidgets.org/"" rel=""nofollow"">ToscaWidgets</a></li>
<li><a href=""http://code.google.com/p/dbsprockets/"" rel=""nofollow"">DBSprockets</a>, including <a href=""http://code.google.com/p/dbsprockets/wiki/DBMechanic"" rel=""nofollow"">DBMechanic</a></li>
<li><a href=""http://www.checkandshare.com/catwalk/"" rel=""nofollow"">Catwalk</a>. Catwalk is an application for TurboGears 1.0 that uses SQLObject, not SQLAlchemy. Also check out this <a href=""http://www.checkandshare.com/blog/?p=41"" rel=""nofollow"">blog post</a> and <a href=""http://www.checkandshare.com/CATWALK2/lview/index.html"" rel=""nofollow"">screencast</a>.</li>
<li><a href=""http://docs.turbogears.org/1.0/DataController"" rel=""nofollow"">FastData</a>. Also uses SQLObject.</li>
<li><a href=""http://code.google.com/p/formalchemy/"" rel=""nofollow"">formalchemy</a></li>
<li><a href=""http://rumdemo.toscawidgets.org/"" rel=""nofollow"">Rum</a></li>
</ul>

<p>I do not have any deep knowledge of any of the projects above. I am just in the process of trying to add something similar to one of my own applications as what the original question mentions. The above list is simply a list of interesting projects that I have stumbled across.</p>

<p>As to web application frameworks for Python, I recommend TurboGears 2. Not that I have any experience with any of the other frameworks, I just like TurboGears...</p>

<p>If the original question's author finds a solution that works well, please update or answer this thread.</p>
"
43588,3171,2008-09-04T12:12:20Z,43580,53,"<p>The <a href=""https://docs.python.org/library/mimetypes.html"">mimetypes module</a> in the standard library will determine/guess the MIME type from a file extension.</p>

<p>If users are uploading files the HTTP post will contain the MIME type of the file alongside the data.  For example, Django makes this data available as an attribute of the <a href=""https://docs.djangoproject.com/en/dev/topics/http/file-uploads/#uploadedfile-objects"">UploadedFile</a> object.</p>
"
43616,145,2008-09-04T12:22:55Z,43580,5,"<p>You didn't state what web server you were using, but Apache has a nice little module called <a href=""http://httpd.apache.org/docs/1.3/mod/mod_mime_magic.html"" rel=""nofollow"">Mime Magic</a> which it uses to determine the type of a file when told to do so.  It reads some of the file's content and tries to figure out what type it is based on the characters found.  And as <a href=""http://stackoverflow.com/questions/43580/how-to-find-the-mime-type-of-a-file-in-python#43588"" rel=""nofollow"">Dave Webb Mentioned</a> the <a href=""http://docs.python.org/lib/module-mimetypes.html"" rel=""nofollow"">MimeTypes Module</a> under python will work, provided an extension is handy.</p>

<p>Alternatively, if you are sitting on a UNIX box you can use <code>sys.popen('file -i ' + fileName, mode='r')</code> to grab the MIME type.  Windows should have an equivalent command, but I'm unsure as to what it is. </p>
"
43663,1199,2008-09-04T12:44:12Z,42950,552,"<p>I didn't notice this earlier when I was looking at the <a href=""https://docs.python.org/2/library/calendar.html"">documentation for the calendar module</a>, but a method called <a href=""http://docs.python.org/library/calendar.html#calendar.monthrange"">monthrange</a> provides this information:</p>

<blockquote>
  <p><b>monthrange(year, month)</b><br>
  &nbsp;&nbsp;&nbsp;&nbsp;Returns weekday of first day of the month and number of days in month, for the specified year and month. </p>
</blockquote>

<pre><code>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; calendar.monthrange(2002,1)
(1, 31)
&gt;&gt;&gt; calendar.monthrange(2008,2)
(4, 29)
&gt;&gt;&gt; calendar.monthrange(2100,2)
(0, 28)
</code></pre>

<p>so:</p>

<pre><code>calendar.monthrange(year, month)[1]
</code></pre>

<p>seems like the simplest way to go.</p>

<p>Just to be clear, <code>monthrange</code> supports leap years as well:</p>

<pre><code>&gt;&gt;&gt; from calendar import monthrange
&gt;&gt;&gt; monthrange(2012, 2)
(2, 29)
</code></pre>

<p><a href=""http://stackoverflow.com/questions/42950/get-last-day-of-the-month-in-python#43088"">My previous answer</a> still works, but is clearly suboptimal.</p>
"
43736,3171,2008-09-04T13:17:38Z,43709,2,"<p>If you've never done any CGI programming before I think it would be worth doing one project - perhaps just a sample play site just for yourself - using the DIY approach.  You'll learn a lot more about how all the various parts work than you would by using a framework.  This will help in you design and debug and so on all your future web applications however you write them.</p>

<p>Personally I now use <a href=""http://www.djangoproject.com/"" rel=""nofollow"">Django</a>.  The real benefit is very fast application deployment.  The object relational mapping gets things moving fast and the template library is a joy to use.  Also the admin interface gives you basic CRUD screens for all your objects so you don't need to write any of the ""boring"" stuff.</p>

<p>The downside of using an ORM based solution is that if you do want to handcraft some SQL, say for performance reasons, it much harder than it would have been otherwise, although still very possible. </p>
"
43753,3571,2008-09-04T13:24:55Z,43709,7,"<p>If you decide to go with a framework that is WSGI-based (for instance <a href=""http://www.turbogears.org/2.0"" rel=""nofollow"">TurboGears</a>), I would recommend you go through the excellent article <a href=""http://pythonpaste.org/webob/do-it-yourself.html"" rel=""nofollow"">Another Do-It-Yourself Framework</a> by Ian Bicking.</p>

<p>In the article, he builds a simple web application framework from scratch.</p>

<p>Also, check out the video <a href=""http://www.vimeo.com/3258566"" rel=""nofollow"">Creating a web framework with WSGI</a> by Kevin Dangoor. Dangoor is the founder of the TurboGears project.</p>
"
43773,2147,2008-09-04T13:35:45Z,43709,17,"<p>CGI is great for low-traffic websites, but it has some performance problems for anything else.  This is because every time a request comes in, the server starts the CGI application in its own process.  This is bad for two reasons:  1)  Starting and stopping a process can take time and 2) you can't cache anything in memory.  You can go with FastCGI, but I would argue that you'd be better off just writing a straight <a href=""http://www.python.org/dev/peps/pep-0333/"">WSGI</a> app if you're going to go that route (the way WSGI works really isn't a whole heck of a lot different from CGI).</p>

<p>Other than that, your choices are for the most part how much you want the framework to do.  You can go with an all singing, all dancing framework like Django or Pylons.  Or you can go with a mix-and-match approach (use something like CherryPy for the HTTP stuff, SQLAlchemy for the database stuff, paste for deployment, etc).  I should also point out that most frameworks will also let you switch different components out for others, so these two approaches aren't necessarily mutually exclusive.</p>

<p>Personally, I dislike frameworks that do too much magic for me and prefer the mix-and-match technique, but I've been told that I'm also completely insane.  :)</p>

<p>How much web programming experience do you have?  If you're a beginner, I say go with Django.  If you're more experienced, I say to play around with the different approaches and techniques until you find the right one.</p>
"
43780,4165,2008-09-04T13:40:59Z,43775,9,"<p>Your Python interpreter is correct.
One (stupid) way of calculating a modulus is to subtract or add the modulus until the resulting value is between 0 and (modulus − 1).</p>

<p>e.g.:
13 mod 5 = (13 − 5) mod 5 = (13 − 10) mod 5 = 3</p>

<p>or in your case: −2 mod 5 = (−2 + 5) mod 5 = 3</p>
"
43781,2147,2008-09-04T13:41:04Z,43775,0,"<p>Well, -2 divided by 5 would be 0 with a remainder of 3.  I don't believe that should be very platform dependent, but I've seen stranger things.</p>
"
43782,863,2008-09-04T13:41:19Z,43775,0,"<p>It is indeed 3.  In <a href=""http://en.wikipedia.org/wiki/Modular_arithmetic"" rel=""nofollow"">modular arithmetic</a>, a modulus is simply the remainder of a division, and the remainder of -2 divided by 5 is 3.</p>
"
43783,1353,2008-09-04T13:41:25Z,43775,11,"<p>The result of the modulus operation on negatives seems to be programming language dependent and here is a listing <a href=""http://en.wikipedia.org/wiki/Modulo_operation"">http://en.wikipedia.org/wiki/Modulo_operation</a></p>
"
43785,797,2008-09-04T13:41:40Z,43775,4,"<p>Well, 0 % 5 should be 0, right?</p>

<p>-1 % 5 should be 4 because that's the next allowed digit going in the reverse direction (i.e., it can't be 5, since that's out of range).</p>

<p>And following along by that logic, -2 must be 3.</p>

<p>The easiest way to think of how it will work is that you keep adding or subtracting 5 until the number falls between 0 (inclusive) and 5 (exclusive).</p>

<p>I'm not sure about machine dependence - I've never seen an implementation that was, but I can't say it's never done.</p>
"
43794,1968,2008-09-04T13:46:23Z,43775,15,"<p>By the way: most programming languages would disagree with Python and give the result <code>-2</code>. Depending on the interpretation of modulus this is correct. However, the most agreed-upon mathematical definition states that the modulus of <em>a</em> and <em>b</em> is the (strictly positive) rest <em>r</em> of the division of <em>a</em> / <em>b</em>. More precisely, 0 &lt;= <em>r</em> &lt; <em>b</em> by definition.</p>
"
43799,976,2008-09-04T13:53:07Z,43775,0,"<p>The result depends on the language. Python returns the sign of the divisor, where for example c# returns the sign of the dividend (ie. -2 % 5 returns -2 in c#).</p>
"
43835,1694,2008-09-04T14:11:54Z,43709,12,"<p>The simplest web program is a CGI script, which is basically just a program whose standard output is redirected to the web browser making the request.  In this approach, every page has its own executable file, which must be loaded and parsed on every request.  This makes it really simple to get something up and running, but scales badly both in terms of performance and organization.  So when I need a very dynamic page very quickly that won't grow into a larger system, I use a CGI script.</p>

<p>One step up from this is embedding your Python code in your HTML code, such as with PSP.  I don't think many people use this nowadays, since modern template systems have made this pretty obsolete.  I worked with PSP for awhile and found that it had basically the same organizational limits as CGI scripts (every page has its own file) plus some whitespace-related annoyances from trying to mix whitespace-ignorant HTML with whitespace-sensitive Python.</p>

<p>The next step up is very simple web frameworks such as web.py, which I've also used.  Like CGI scripts, it's very simple to get something up and running, and you don't need any complex configuration or automatically generated code.  Your own code will be pretty simple to understand, so you can see what's happening.  However, it's not as feature-rich as other web frameworks; last time I used it, there was no session tracking, so I had to roll my own.  It also has ""too much magic behavior"" to quote Guido (""upvars(), bah"").</p>

<p>Finally, you have feature-rich web frameworks such as Django.  These will require a bit of work to get simple Hello World programs working, but every major one has a great, well-written tutorial (especially Django) to walk you through it.  I highly recommend using one of these web frameworks for any real project because of the convenience and features and documentation, etc.</p>

<p>Ultimately you'll have to decide what you prefer.  For example, frameworks all use template languages (special code/tags) to generate HTML files.  Some of them such as Cheetah templates let you write arbitrary Python code so that you can do anything in a template.  Others such as Django templates are more restrictive and force you to separate your presentation code from your program logic.  It's all about what you personally prefer.</p>

<p>Another example is URL handling; some frameworks such as Django have you define the URLs in your application through regular expressions.  Others such as CherryPy automatically map your functions to urls by your function names.  Again, this is a personal preference.</p>

<p>I personally use a mix of web frameworks by using CherryPy for my web server stuff (form parameters, session handling, url mapping, etc) and Django for my object-relational mapping and templates.  My recommendation is to start with a high level web framework, work your way through its tutorial, then start on a small personal project.  I've done this with all of the technologies I've mentioned and it's been really beneficial.  Eventually you'll get a feel for what you prefer and become a better web programmer (and a better programmer in general) in the process.</p>
"
43837,NA,2008-09-04T14:12:16Z,43775,0,"<p>One explanation might be that negative numbers are stored using <a href=""http://en.wikipedia.org/wiki/Two%27s_complement"" rel=""nofollow"">2's complement</a>. When the python interpreter tries to do the modulo operation it converts to unsigned value. As such instead of doing (-2) % 5 it actually computes 0xFFFF_FFFF_FFFF_FFFD % 5 which is 3. </p>
"
43863,3002,2008-09-04T14:25:05Z,43775,4,"<p>As explained in other answers, there are many choices for a modulo operation with negative values. In general different languages (and different machine architectures) will give a different result.</p>

<p>According to the <a href=""http://docs.python.org/ref/binary.html"" rel=""nofollow"">Python reference manual</a>,</p>

<blockquote>
  <p>The modulo operator always yields a result with the same sign as its second operand (or zero); the absolute value of the result is strictly smaller than the absolute value of the second operand.</p>
</blockquote>

<p>is the choice taken by Python. Basically modulo is defined so that this always holds:</p>

<pre><code>x == (x/y)*y + (x%y)
</code></pre>

<p>so it makes sense that (-2)%5 = -2 - (-2/5)*5 = 3</p>
"
43916,2543,2008-09-04T14:46:11Z,43775,0,"<p>Be careful not to rely on this mod behavior in C/C++ on all OSes and architectures. If I recall correctly, I tried to rely on C/C++ code like</p>

<pre><code>float x2 = x % n;
</code></pre>

<p>to keep x2 in the range from 0 to n-1 but negative numbers crept in when I would compile on one OS, but things would work fine on another OS. This made for an evil time debugging since it only happened half the time!</p>
"
44094,1447,2008-09-04T16:12:07Z,44084,5,"<p>It's easy, you just add a docstring at the top of the module.</p>
"
44095,1044,2008-09-04T16:12:23Z,44084,33,"<p>For the packages, you can document it in <code>__init__.py</code>.
For the modules, you can add a docstring simply in the module file.</p>

<p>All the information is here: <a href=""http://www.python.org/dev/peps/pep-0257/"">http://www.python.org/dev/peps/pep-0257/</a></p>
"
44098,2600,2008-09-04T16:12:52Z,44084,6,"<p>You do it the exact same way.  Put a string in as the first statement in the module.</p>
"
44381,4558,2008-09-04T18:20:21Z,44352,9,"<p>Here's one way to do it:</p>

<pre><code>import inspect

def get_subclasses(mod, cls):
    """"""Yield the classes in module ``mod`` that inherit from ``cls``""""""
    for name, obj in inspect.getmembers(mod):
        if hasattr(obj, ""__bases__"") and cls in obj.__bases__:
            yield obj
</code></pre>
"
44403,2603,2008-09-04T18:29:59Z,44352,1,"<p>Given the module foo.py</p>

<pre><code>class foo(object): pass
class bar(foo): pass
class baz(foo): pass

class grar(Exception): pass

def find_subclasses(module, clazz):
    for name in dir(module):
        o = getattr(module, name)

        try: 
             if issubclass(o, clazz):
             yield name, o
        except TypeError: pass

&gt;&gt;&gt; import foo
&gt;&gt;&gt; list(foo.find_subclasses(foo, foo.foo))
[('bar', &lt;class 'foo.bar'&gt;), ('baz', &lt;class 'foo.baz'&gt;), ('foo', &lt;class 'foo.foo'&gt;)]
&gt;&gt;&gt; list(foo.find_subclasses(foo, object))
[('bar', &lt;class 'foo.bar'&gt;), ('baz', &lt;class 'foo.baz'&gt;), ('foo', &lt;class 'foo.foo'&gt;), ('grar', &lt;class 'foo.grar'&gt;)]
&gt;&gt;&gt; list(foo.find_subclasses(foo, Exception))
[('grar', &lt;class 'foo.grar'&gt;)]
</code></pre>
"
44512,3446,2008-09-04T19:08:25Z,38987,63,"<p>I wanted something similar, but with the ability to specify how the values on duplicate keys were merged, so I hacked this out (but did not heavily test it).  Obviously this is not a single expression, but it is a single function call.</p>

<pre><code>def merge(d1, d2, merge_fn=lambda x,y:y):
    """"""
    Merges two dictionaries, non-destructively, combining 
    values on duplicate keys as defined by the optional merge
    function.  The default behavior replaces the values in d1
    with corresponding values in d2.  (There is no other generally
    applicable merge strategy, but often you'll have homogeneous 
    types in your dicts, so specifying a merge technique can be 
    valuable.)

    Examples:

    &gt;&gt;&gt; d1
    {'a': 1, 'c': 3, 'b': 2}
    &gt;&gt;&gt; merge(d1, d1)
    {'a': 1, 'c': 3, 'b': 2}
    &gt;&gt;&gt; merge(d1, d1, lambda x,y: x+y)
    {'a': 2, 'c': 6, 'b': 4}

    """"""
    result = dict(d1)
    for k,v in d2.iteritems():
        if k in result:
            result[k] = merge_fn(result[k], v)
        else:
            result[k] = v
    return result
</code></pre>
"
44638,985,2008-09-04T19:55:29Z,43709,1,"<p>OK, rails is actually pretty good, but there is just a little bit too much magic going on in there (from the Ruby world I would much prefer merb to rails). I personally use Pylons, and am pretty darn happy. I'd say (compared to django), that pylons allows you to interchange ints internal parts easier than django does. The downside is that you will have to write more stuff all by youself (like the basic CRUD). </p>

<p>Pros of using a framework:</p>

<ol>
<li>get stuff done quickly (and I mean lighning fast once you know the framework)</li>
<li>everything is compying to standards (which is probably not that easy to achieve when rolling your own)</li>
<li>easier to get something working (lots of tutorials) without reading gazillion articles and docs</li>
</ol>

<p>Cons:</p>

<ol>
<li>you learn less</li>
<li>harder to replace parts (not that much of an issue in pylons, more so with django)</li>
<li>harder to tweak some low-level stuff (like the above mentioned SQLs)</li>
</ol>

<p>From that you can probably devise what they are good for :-) Since you get all the code it is possible to tweak it to fit even the most bizzare situations (pylons supposedly work on the Google app engine now...).</p>
"
44781,305,2008-09-04T21:06:12Z,44778,333,"<pre><code>myList = ['a','b','c','d']
myString = "","".join(myList )
</code></pre>

<p>This won't work if the list contains numbers.</p>

<hr>

<p>As <a href=""http://stackoverflow.com/users/3399/ricardo-reyes"">Ricardo Reyes</a> suggested, if it contains non-string types (such as integers, floats, bools, None) then do:</p>

<pre><code>myList = ','.join(map(str, myList)) 
</code></pre>
"
44788,1480,2008-09-04T21:08:29Z,44778,42,"<p>Why the map/lambda magic? Doesn't this work?</p>

<pre><code>&gt;&gt;&gt;foo = [ 'a', 'b', 'c' ]
&gt;&gt;&gt;print "","".join(foo)
a,b,c
&gt;&gt;&gt;print "","".join([])

&gt;&gt;&gt;print "","".join(['a'])
a
</code></pre>

<p>Edit: @mark-biek points out the case for numbers.
Perhaps the list comprehension:</p>

<pre><code>&gt;&gt;&gt;','.join([str(x) for x in foo])
</code></pre>

<p>is more ""pythonic"".</p>

<p>Edit2:
Thanks for the suggestions. I'll use the generator rather than the list comprehension in the future.</p>

<pre><code>&gt;&gt;&gt;','.join(str(x) for x in foo)
</code></pre>
"
44791,3978,2008-09-04T21:09:33Z,44778,10,"<p>Don't you just want:</p>

<pre><code>"","".join(l)
</code></pre>

<p>Obviously it gets more complicated if you need to quote/escape commas etc in the values. In that case I would suggest looking at the csv module in the standard library:</p>

<p><a href=""https://docs.python.org/library/csv.html"" rel=""nofollow"">https://docs.python.org/library/csv.html</a></p>
"
44794,4618,2008-09-04T21:10:25Z,44778,2,"<p>Unless I'm missing something, <code>','.join(foo)</code> should do what you're asking for.</p>

<pre><code>&gt;&gt;&gt; ','.join([''])
''
&gt;&gt;&gt; ','.join(['s'])
's'
&gt;&gt;&gt; ','.join(['a','b','c'])
'a,b,c'
</code></pre>

<p>(edit:  and as jmanning2k points out, </p>

<pre><code>','.join([str(x) for x in foo])
</code></pre>

<p>is safer and quite Pythonic, though the resulting string will be difficult to parse if the elements can contain commas -- at that point, you need the full power of the <code>csv</code> module, as Douglas points out in his answer.)</p>
"
44842,4435,2008-09-04T21:30:46Z,44834,198,"<p>It's a list of public objects of that module. It overrides the default of hiding everything that begins with an underscore.</p>
"
44843,267,2008-09-04T21:31:16Z,44834,43,"<p>From <a href=""http://effbot.org/pyref/__all__.htm"">(An Unofficial) Python Reference Wiki</a>:</p>

<blockquote>
  <p>The public names defined by a module are determined by checking the module's namespace for a variable named <code>__all__</code>; if defined, it must be a sequence of strings which are names defined or imported by that module. The names given in <code>__all__</code> are all considered public and are required to exist. If <code>__all__</code> is not defined, the set of public names includes all names found in the module's namespace which do not begin with an underscore character (""_""). <code>__all__</code> should contain the entire public API. It is intended to avoid accidentally exporting items that are not part of the API (such as library modules which were imported and used within the module).</p>
</blockquote>
"
44878,720,2008-09-04T21:57:51Z,44778,5,"<p>@jmanning2k using a list comprehension has the downside of creating a new temporary list. The better solution would be using itertools.imap which returns an iterator</p>

<pre><code>from itertools import imap
l = [1, ""foo"", 4 ,""bar""]
"","".join(imap(str, l))
</code></pre>
"
45016,3560,2008-09-05T00:12:41Z,45013,8,"<p>Have you tried View -> Zoom -> Reset on both sites?</p>
"
45126,3002,2008-09-05T02:18:21Z,45122,71,"<p>You need to put</p>

<pre><code>from project import Project
</code></pre>

<p>in <code>controllers/__init__.py</code>.</p>

<p>Note that when <a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""nofollow"">Absolute imports</a> become the default (Python 2.7?), you will want to add a dot before the module name (to avoid collisions with a top-level model named <code>project</code>), i.e.,</p>

<pre><code>from .project import Project
</code></pre>
"
45245,3415,2008-09-05T04:52:09Z,45228,2,"<p>If your asking what I think your asking, you can find them <a href=""http://books.google.com/books?id=vpTAq4dnmuAC&amp;pg=RA1-PA476&amp;lpg=RA1-PA476&amp;dq=Big-O+of+Python+data+structures&amp;source=web&amp;ots=AOM5B5D7yA&amp;sig=deLGb6VrftTpnNYN6fILVbiirXM&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=7&amp;ct=result#PRA1-PA479,M1"" rel=""nofollow"">Here</a>... page 476 and on.</p>

<p>It's written around optimization techniques for Python; It's mostly Big-O notation of time efficiencies not much memory.</p>
"
45519,3571,2008-09-05T10:36:58Z,45507,6,"<p>Perhaps the following would work:</p>

<ul>
<li>Generate your icon image using PIL</li>
<li>Convert the image to .ico format using the python interface to ImageMagick, <a href=""http://www.imagemagick.org/download/python/"">PythonMagick</a></li>
</ul>

<p>I have not tried this approach. The ImageMagick convert command line program was able to convert a .png file to .ico format, so at least ImageMagick supports the .ico format.</p>
"
45520,3180,2008-09-05T10:38:00Z,45507,2,"<p>I don't know if this applies for all cases, but on WinXP an .ico can be a bmp of size 16x16, 32x32 or 64x64. Just change the extension to ico from bmp and you're ready to go.</p>
"
45538,4702,2008-09-05T11:04:04Z,45228,12,"<p>Raymond D. Hettinger does <a href=""http://www.youtube.com/watch?v=hYUsssClE94"" rel=""nofollow"">an excellent talk</a> (<a href=""http://wenku.baidu.com/view/9c6fb20dcc1755270722089d.html"" rel=""nofollow"">slides</a>) about Python's built-in collections called 'Core Python Containers - Under the Hood'. The version I saw focussed mainly on <code>set</code> and <code>dict</code>, but <code>list</code> was covered too.</p>

<p>There are also some photos of the pertinent slides from EuroPython in <a href=""http://paranoid-engineering.blogspot.com/2008/07/europython-2008-day-3.html"" rel=""nofollow"">a blog</a>.</p>

<p>Here is a summary of my notes on <code>list</code>:</p>

<ul>
<li>Stores items as an array of pointers. Subscript costs O(1) time. Append costs amortized O(1) time. Insert costs O(n) time.</li>
<li>Tries to avoid <code>memcpy</code> when growing by over-allocating. Many small lists will waste a lot of space, but large lists never waste more than about 12.5% to overallocation.</li>
<li>Some operations pre-size. Examples given were <code>range(n)</code>, <code>map()</code>, <code>list()</code>, <code>[None] * n</code>, and slicing.</li>
<li>When shrinking, the array is <code>realloc</code>ed only when it is wasting 50% of space. <code>pop</code> is cheap.</li>
</ul>
"
45564,3571,2008-09-05T11:21:35Z,45500,3,"<p>You could perhaps take a look at the <a href=""http://www.alexmac.cc/tablet-apps/tablet-apps-0.3.1.tar.bz2"" rel=""nofollow"">software</a> described <a href=""http://www.alexmac.cc/tablet-apps/"" rel=""nofollow"">here</a>. It is a gnome applet, written in Python.</p>

<p>From the web site:</p>

<p>""The gnome wacom applet is a small gnome panel applet that shows how much pressure is being applied to your wacom tablet by the current device. Clicking on the panel icon brings up a dialog allowing you to select a different device and check what pressure and tilt information is being recieved from it. This dialog also contains a small drawing test area to give your pen a quick test.""</p>

<p><a href=""http://www.google.com/search?q=wacom+tablet+python"" rel=""nofollow"">Google is your friend</a></p>
"
45832,3978,2008-09-05T13:35:32Z,45507,6,"<p>According to <a href=""http://en.wikipedia.org/wiki/Favicon"">Wikipedia</a> modern browsers can handle favicons in PNG format, so maybe you could just generate that?</p>

<p>Alternatively the <a href=""http://en.wikipedia.org/wiki/ICO_(icon_image_file_format)"">ICO article</a> describes the format...</p>
"
46028,3978,2008-09-05T15:23:13Z,45954,3,"<p>I don't know of any, but if all else fails you could use <a href=""http://docs.python.org/lib/module-ctypes.html"" rel=""nofollow"">ctypes</a> to directly use libdwarf, libelf or libbfd.</p>
"
46201,2603,2008-09-05T16:19:03Z,45228,16,"<p>Checkout the <a href=""http://wiki.python.org/moin/TimeComplexity"">TimeComplexity</a> page on the py dot org wiki. It covers set/dicts/lists/etc at least as far as time complexity goes.</p>
"
46205,NA,2008-09-05T16:19:35Z,45540,1,"<p>I believe you want:</p>

<pre><code>if 'normal' != root.state():
    tkMessageBox.showinfo(""Key you!"", "" "".join(sys.argv[1:]))
</code></pre>
"
46233,2603,2008-09-05T16:29:25Z,44778,6,"<p>@<a href=""#44878"">Peter Hoffmann</a></p>

<p>Using generator expressions has the benefit of also producing an iterator but saves importing itertools. Furthermore, list comprehensions are generally preferred to map, thus, I'd expect generator expressions to be preferred to imap.</p>

<pre><code>&gt;&gt;&gt; l = [1, ""foo"", 4 ,""bar""]
&gt;&gt;&gt; "","".join(str(bit) for bit in l)
'1,foo,4,bar'
</code></pre>
"
46442,736,2008-09-05T18:07:50Z,8154,6,"<p>I think I fixed it. It's turns out I had a simple config error. My ini file read:</p>

<pre><code>sqlalchemy.default.url = [connection string here]
sqlalchemy.pool_recycle = 1800
</code></pre>

<p>The problem is that my <code>environment.py</code> file declared that the engine would only map keys with the prefix: <code>sqlalchemy.default</code> so <code>pool_recycle</code> was ignored.</p>

<p>The solution is to simply change the second line in the ini to:</p>

<pre><code>sqlalchemy.default.pool_recycle = 1800
</code></pre>
"
46780,4725,2008-09-05T20:03:19Z,21934,2,"<p>Reference counting is particularly difficult to do efficiently in a multi-threaded environment. I don't know how you'd even start to do it without getting into hardware assisted transactions or similar (currently) unusual atomic instructions.</p>

<p>Reference counting is easy to implement. JVMs have had a lot of money sunk into competing implementations, so it shouldn't be surprising that they implement very good solutions to very difficult problems. However, it's becoming increasingly easy to target your favourite language at the JVM.</p>
"
47032,4834,2008-09-05T22:54:42Z,44352,4,"<p>Can I suggest that neither of the answers from Chris AtLee and zacherates fulfill the requirements?
I think this modification to zacerates answer is better:</p>

<pre><code>def find_subclasses(module, clazz):
    for name in dir(module):
    	o = getattr(module, name)
    	try:
    		if (o != clazz) and issubclass(o, clazz):
    			yield name, o
    	except TypeError: pass
</code></pre>

<p>The reason I disagree with the given answers is that the first does not produce classes that are a distant subclass of the given class, and the second includes the given class.</p>
"
47201,188,2008-09-06T02:27:45Z,47198,4,"<p>I've not seen a system with less than 2.3 installed for some time.  Mostly 2.4+ is installed by default for most OS I use now.  2.3 is just on an older Solaris machine.  Linux distros tend to have 2.4+, as does OS X.</p>

<p>IIRC, 2.4 has a lot of the features 2.5 does, but usable only with</p>

<pre><code>from __future__ import *
</code></pre>
"
47208,720,2008-09-06T02:44:31Z,47198,6,"<p>As python is in kind of an transition phase towards python 3 with breaking backward compatibility I don't think it is a good idea to go python 3 only. Based on the <a href=""http://www.python.org/dev/peps/pep-3000/#timeline"" rel=""nofollow"">time line</a> there will be at least one or two following releases of the 2.x series after 2.6/3.0 in october.</p>

<p>Beside not having python 3 available on your target platforms, it will take some time until important external python libraries will be ported and usable on python 3.</p>

<p>So as Matthew suggests staying at 2.4/2.5 and keeping the <a href=""http://www.python.org/dev/peps/pep-3000/#compatibility-and-transition"" rel=""nofollow"">transition</a> plan to python 3 in mind is a solid choice.</p>
"
47212,720,2008-09-06T02:49:38Z,47207,2,"<p>If you use <a href=""https://docs.djangoproject.com/en/1.2/topics/http/urls/#naming-url-patterns"" rel=""nofollow"">named url patterns</a> you can do the follwing in your template</p>

<pre><code>{% url create_object %}
</code></pre>
"
47213,680,2008-09-06T02:50:08Z,47207,0,"<p>The preferred way of creating the URL is by adding a <code>get_absolute_url</code> method to your model classes. You can hardcode the path there so you at least get closer to following the KISS philosophy.</p>

<p>You can go further by utilizing the <code>permalink</code> decorator that figures the path based on the urls configuration.</p>

<p>You can read more in the django documentation <a href=""https://docs.djangoproject.com/en/dev/ref/models/instances/#get-absolute-url"" rel=""nofollow"">here</a>.</p>
"
47264,479,2008-09-06T05:25:47Z,47198,1,"<p>You can use different versions of python on each machine. </p>

<p>Coding something new, I would not use anything less than python2.5. You can do <code>apt-get install python2.5</code> on stock debian stable. </p>

<p>For windows, don't really worry about it. It's very easy to install the python2.5 msi. </p>

<p>If the users can't be bothered to do that, you can deploy an executable with py2exe (so simple) and build an installer with inno setup (again simple) then it will behave like a standard windows application and will use its own python dlls, so no need to have python installed. </p>

<p>Like Peter said: keep in mind the transition to 3.0 but don't build on it yet.</p>
"
47266,3560,2008-09-06T05:32:39Z,47253,20,"<p>There shouldn't be any need to use FastCGI. There exists a <a href=""https://github.com/hexdump42/isapi-wsgi"">ISAPI extension for WSGI</a>.</p>
"
47304,1057,2008-09-06T07:22:52Z,47207,15,"<p>You can use <code>get_absolute_url</code>, but that will only work for a particular object.  Since your object hasn't been created yet, it won't work in this case.</p>

<p>You want to use <a href=""https://docs.djangoproject.com/en/1.2/topics/http/urls/#naming-url-patterns"" rel=""nofollow"">named URL patterns</a>.  Here's a quick intro:</p>

<p>Change the line in your urls.py to:</p>

<pre><code>(r'^manage/products/add/$', create_object, {'model': Product, 'post_save_redirect': ''}, ""create-product""),
</code></pre>

<p>Then, in your template you use this to display the URL:</p>

<pre><code>{% url create-product %}
</code></pre>

<p>If you're using Django 1.5 or higher you need this:</p>

<pre><code>{% url 'create-product' %}
</code></pre>

<p>You can do some more powerful things with named URL patterns, they're very handy.  Note that they are only in the development version (and also 1.0).</p>
"
47744,4613,2008-09-06T19:08:14Z,47701,0,"<p>What platform are you attempting this on? Most debuggers allow you to attach to a running process by using the process id.
You can either output the process id via logging or using something like Task Manager.
Once that is achieved it will be possible to inspect individual threads and their call stacks.</p>

<p>EDIT: I don't have any experience with GNU Debugger (GDB), which is cross platform, however I found this <a href=""http://wiki.python.org/moin/DebuggingWithGdb"" rel=""nofollow"">link</a> and it may start you on the right path. It explains how to add debug symbols (handy for reading stack traces) and how to instruct gdb to attach to a running python process.</p>
"
47792,3560,2008-09-06T20:10:59Z,47789,59,"<p>Use list comprehensions when the result needs to be iterated over multiple times, or where speed is paramount. Use generator expressions where the range is large or infinite.</p>
"
47793,3002,2008-09-06T20:11:17Z,47789,89,"<p>Iterating over the <em>generator expression</em> or the <em>list comprehension</em> will do the same thing. However, the <em>list comprehension</em> will create the entire list in memory first while the <em>generator expression</em> will create the items on the fly, so you are able to use it for very large (and also infinite!) sequences.</p>
"
47826,1694,2008-09-06T20:54:08Z,47789,168,"<p>John's answer is good (that list comprehensions are better when you want to iterate over something multiple times).  However, it's also worth noting that you should use a list if you want to use any of the list methods.  For example, the following code won't work:</p>

<pre><code>def gen():
    return (something for something in get_some_stuff())

print gen()[:2]     # generators don't support indexing or slicing
print [5,6] + gen() # generators can't be added to lists
</code></pre>

<p>Basically, use a generator expression if all you're doing is iterating once.  If you want to store and use the generated results, then you're probably better off with a list comprehension.</p>

<p>Since performance is the most common reason to choose one over the other, my advice is to not worry about it and just pick one; if you find that your program is running too slowly, then and only then should you go back and worry about tuning your code.</p>
"
47956,2915,2008-09-06T23:39:33Z,47953,29,"<p>From the <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"">Python Enterprise Application Kit community</a>:</p>

<blockquote>
  <p><em>""Eggs are to Pythons as Jars are to Java...""</em></p>
  
  <p>Python eggs are a way of bundling
  additional information with a Python
  project, that allows the project's
  dependencies to be checked and
  satisfied at runtime, as well as
  allowing projects to provide plugins
  for other projects. There are several
  binary formats that embody eggs, but
  the most common is '.egg' zipfile
  format, because it's a convenient one
  for distributing projects. All of the
  formats support including
  package-specific data, project-wide
  metadata, C extensions, and Python
  code.</p>
  
  <p>The primary benefits of Python Eggs
  are:</p>
  
  <ul>
  <li><p>They enable tools like the ""Easy Install"" Python package manager</p></li>
  <li><p>.egg files are a ""zero installation"" format for a Python
  package; no build or install step is
  required, just put them on PYTHONPATH
  or sys.path and use them (may require
  the runtime installed if C extensions
  or data files are used)</p></li>
  <li><p>They can include package metadata, such as the other eggs they depend on</p></li>
  <li><p>They allow ""namespace packages"" (packages that just contain other
  packages) to be split into separate
  distributions (e.g. zope.<em>, twisted.</em>,
  peak.* packages can be distributed as
  separate eggs, unlike normal packages
  which must always be placed under the
  same parent directory. This allows
  what are now huge monolithic packages
  to be distributed as separate
  components.)</p></li>
  <li><p>They allow applications or libraries to specify the needed
  version of a library, so that you can
  e.g. require(""Twisted-Internet>=2.0"")
  before doing an import
  twisted.internet.</p></li>
  <li><p>They're a great format for distributing extensions or plugins to
  extensible applications and frameworks
  (such as Trac, which uses eggs for
  plugins as of 0.9b1), because the egg
  runtime provides simple APIs to locate
  eggs and find their advertised entry
  points (similar to Eclipse's
  ""extension point"" concept).</p></li>
  <li><p>There are also other benefits that may come from having a standardized
  format, similar to the benefits of
  Java's ""jar"" format.</p></li>
  </ul>
</blockquote>


"
47957,2386,2008-09-06T23:39:54Z,47953,2,"<p>.egg files are basically a nice way to deploy your python application. You can think of it as something like .jar files for Java. </p>

<p>More info <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"" rel=""nofollow"">here</a>.</p>
"
47958,2147,2008-09-06T23:43:21Z,47953,3,"<p>Eggs are a pretty good way to distribute python apps.  Think of it as a platform independent .deb file that will install all dependencies and whatnot.  The advantage is that it's easy to use for the end user.  The disadvantage are that it can be cumbersome to package your app up as a .egg file.</p>

<p>You should also offer an alternative means of installation in addition to .eggs.  There are some people who don't like using eggs because they don't like the idea of a software program installing whatever software it wants.  These usually tend to be sysadmin types.</p>
"
48136,3560,2008-09-07T04:20:06Z,48123,12,"<p>Use GtkBuilder instead of Glade, it's integrated into Gtk itself instead of a separate library.</p>

<p>The main benefit of Glade is that it's much, much easier to create the interface. It's a bit more work to connect signal handlers, but I've never felt that matters much.</p>
"
48175,4966,2008-09-07T05:21:11Z,47198,1,"<p>Python 2.3, or 2.2 if you can live without the many modules that were added (e.g. datetime, csv, logging, optparse, zipimport), aren't using SSL, and are willing to add boilerplate for True/False.</p>

<p>2.4 added decorators. generator expressions, reversed(), sorted(), and the subprocess and decimal modules.  Although these are all nice, it's easy to write Pythonic code without them (assuming that your project wouldn't make heavy use of them).</p>

<p>2.5 added with, relative imports, better 64 bit support, and quite a bit of speed.  You could live without all of those easily enough.</p>

<p>2.6 isn't released (although it's very close), so while it might appeal to developers, it doesn't have the compatibility you're after.</p>

<p>Take a look at the release notes for 2.3, 2.4, 2.5, and the upcoming 2.6 (use <a href=""http://www.python.org/download/releases/2.Y/highlights/"" rel=""nofollow"">http://www.python.org/download/releases/2.Y/highlights/</a> where 'Y' is the minor version).</p>

<p>FWIW, for SpamBayes we support 2.2 and above (2.2 requires installing the email package separately).  This isn't overly taxing, but the 2.3 additions are useful enough and 2.3 old enough that we'll probably drop 2.2 before long.</p>
"
48214,2653,2008-09-07T06:58:49Z,48176,2,"<p>Python includes a <a href=""http://www.python.org/doc/lib/module-telnetlib.html"" rel=""nofollow"">telnet client</a>, but not a telnet server.  You can implement a telnet server using <a href=""http://twistedmatrix.com"" rel=""nofollow"">Twisted</a>.  <a href=""http://twistedmatrix.com/pipermail/twisted-python/2004-August/008335.html"" rel=""nofollow"">Here's an example</a>.  As for hooking these things together, that's up to you.</p>
"
48262,2168,2008-09-07T08:49:51Z,32044,9,"<p>Django has a built in template helper for this exact scenario:</p>

<p><a href=""https://docs.djangoproject.com/en/dev/ref/templates/builtins/#unordered-list"" rel=""nofollow"">https://docs.djangoproject.com/en/dev/ref/templates/builtins/#unordered-list</a></p>
"
48266,3171,2008-09-07T09:17:40Z,48176,0,"<p>I think you should base your server class on the <a href=""http://www.python.org/doc/lib/module-SocketServer.html"" rel=""nofollow""><code>SocketServer</code></a> class from the standard library.  You'll need to write a <code>RequestHandler</code> to read and echo input but a lot of the heavy lifting is already done for you.</p>

<p>You can use the <a href=""http://docs.python.org/lib/node632.html"" rel=""nofollow""><code>ThreadingMixIn</code></a> to make the server multi-threaded very easily.  </p>
"
48284,2661,2008-09-07T10:03:48Z,43368,1,"<p><a href=""http://www.turbogears.org/"" rel=""nofollow"">TurboGears</a> currently uses <a href=""http://www.sqlobject.org/"" rel=""nofollow"">SQLObject</a> by default but you can use it with <a href=""http://docs.turbogears.org/1.0/SQLAlchemy"" rel=""nofollow"">SQLAlchemy</a>. They are saying that the next major release of TurboGears (1.1) will use SQLAlchemy by default.</p>
"
48414,5026,2008-09-07T13:12:28Z,42034,7,"<p>I like <a href=""http://jtauber.com/blog/2006/04/15/python_tuples_are_not_just_constant_lists/"">this explanation</a>.</p>

<p>Basically, you should use tuples when there's a constant structure (the 1st position always holds one type of value and the second another, and so forth), and lists should be used for lists of homogeneous values.</p>

<p>Of course there's always exceptions, but this is a good general guideline.</p>
"
48467,5042,2008-09-07T14:25:20Z,48458,1,"<p>I am not entirely up to date on the latest best practices, et cetera when it comes to code layout, but when I did my first GAE application, I used something along your second option, where the code and templates are next to eachother.</p>

<p>There was two reasons for this - one, it kept the code and template nearby, and secondly, I had the directory structure layout mimic that of the website - making it (for me) a bit easier too remember where everything was.</p>
"
48479,5036,2008-09-07T14:39:14Z,43368,1,"<p>I know that you specificity ask for a framework but I thought I would let you know about what I get up to here. I have just undergone converting my company's web application from a custom in-house ORM layer into sqlAlchemy so I am far from an expert but something that occurred to me was that sqlAlchemy has types for all of the attributes it maps from the database so why not use that to help output the right html onto the page. So we use sqlAlchemy for the back end and Cheetah templates for the front end but everything in between is basically our own still.</p>

<p>We have never managed to find a framework that does exactly what we want without compromise and prefer to get all the bits that work right for us and write the glue our selves. </p>

<p>Step 1. For each data type sqlAlchemy.types.INTEGER etc. Add an extra function toHtml (or many maybe toHTMLReadOnly, toHTMLAdminEdit whatever) and just have that return the template for the html, now you don't even have to care what data type your displaying if you just want to spit out a whole table you can just do (as a cheetah template or what ever your templating engine is).</p>

<p>Step 2</p>

<p><code>&lt;table&gt;</code></p>

<p><code> &lt;tr&gt;</code></p>

<p><code>  #for $field in $dbObject.c:</code></p>

<p><code>    &lt;th&gt;$field.name&lt;/th&gt;</code></p>

<p><code>  #end for  </code></p>

<p><code> &lt;/tr&gt; </code></p>

<p><code> &lt;tr&gt;</code></p>

<p><code>  #for $field in dbObject.c:</code></p>

<p><code>    &lt;td&gt;$field.type.toHtml($field.name, $field.value)&lt;/td&gt;</code></p>

<p><code>  #end for  </code></p>

<p><code> &lt;/tr&gt;</code></p>

<p><code>&lt;/table&gt;</code></p>

<p>Using this basic method and stretching pythons introspection to its potential, in an afternoon I managed to make create read update and delete code for our whole admin section of out database, not yet with the polish of django but more then good enough for my needs.</p>

<p>Step 3 Discovered the need for a third step just on Friday, wanted to upload files which as you know needs more then just the varchar data types default text box. No sweat, I just overrode the rows class in my table definition from VARCHAR to FilePath(VARCHAR) where the only difference was FilePath had a different toHtml method. Worked flawlessly.</p>

<p>All that said, if there is a shrink wrapped one out there that does just what you want, use that.</p>

<p>Disclaimer: This code was written from memory after midnight and probably wont produce a functioning web page.</p>
"
48575,5063,2008-09-07T16:48:51Z,48562,1,"<p>What exactly are you trying to do?</p>

<p>Of course, there are numerous places to learn about svn pre-commit hooks (e.g. <a href=""http://wordaligned.org/articles/a-subversion-pre-commit-hook"" rel=""nofollow""> here </a>, <a href=""http://www.windley.com/archives/2008/08/using_a_precommit_hook_to_check_puppet_syntax.shtml"" rel=""nofollow""> here</a>, and in the <a href=""http://svnbook.red-bean.com/nightly/en/svn.reposadmin.create.html"" rel=""nofollow"">Red Book</a>) but it depends what you're trying to do and what is available on your system.  </p>

<p>Can you be more specific? </p>
"
48734,1996,2008-09-07T20:09:47Z,48123,19,"<p>I would say that it depends: if you find that using Glade you can build the apps you want or need to make than that's absolutely fine. If however you actually want to learn how GTK works or you have some non-standard UI requirements you will <strong>have</strong> to dig into GTK internals (which are not that complicated).</p>

<p>Personally I'm usually about 5 minutes into a rich client when I need some feature or customization that is simply impossible through a designer such as Glade or <a href=""http://www.mono-project.com/Stetic"">Stetic</a>. Perhaps it's just me. Nevertheless it is still useful for me to bootstrap window design using a graphical tool.</p>

<p>My recommendation: if making rich clients using GTK is going to be a significant part of your job/hobby then learn GTK as well since you <strong>will</strong> need to write that code someday.</p>

<p>P.S. I personally find <a href=""http://www.mono-project.com/Stetic"">Stetic</a> to be superior to Glade for design work, if a little bit more unstable.</p>
"
48806,4919,2008-09-07T21:28:54Z,48777,4,"<p><code>core.exceptions</code> is part of django; what version of django do you have installed? The AppEngine comes with the appropriate version for whatever release you've downloaded (in the lib/django directory). It can be installed by going to that directory and running <strong><code>python setup.py install</code></strong></p>
"
48974,1694,2008-09-08T01:31:32Z,34243,0,"<p>Ruby and C# both easily let you create accessors by specifying getter/setter methods for an attribute, much like in Python.  However, this isn't designed to naturally let you write the code for these methods in another class the way that Python allows.  In practice, I'm not sure how much this matters, since every time I've seen an attribute defined through the descriptor protocol its been implemented in the same class.</p>

<p>EDIT: Darn my dyslexia (by which I mean careless reading).  For some reason I've always read ""descriptor"" as ""decorator"" and vice versa, even when I'm the one typing both of them.  I'll leave my post intact since it has valid information, albeit information which has absolutely nothing to do with the question.</p>

<p>The term ""decorator"" itself is actually the name of a design pattern described in the famous ""Design Patterns"" book.  The Wikipedia article contains many examples in different programming languages of decorator usage: <a href=""http://en.wikipedia.org/wiki/Decorator_pattern"" rel=""nofollow"">http://en.wikipedia.org/wiki/Decorator_pattern</a></p>

<p>However, the decorators in that article object-oriented; they have classes implementing a predefined interface which lets another existing class behave differently somehow, etc.  Python decorators act in a functional way by replacing a function at runtime with another function, allowing you to effectively modify/replace that function, insert code, etc.</p>

<p>This is known in the Java world as Aspect-Oriented programming, and the AspectJ Java compiler lets you do these kinds of things and compile your AspectJ code (which is a superset of Java) into Java bytecode.</p>

<p>I'm not familiar enough with C# or Ruby to know what their version of decorators would be.</p>
"
49148,716,2008-09-08T04:01:10Z,49137,15,"<p>Boost has a python interface library which could help you.</p>

<p><a href=""http://www.boost.org/doc/libs/release/libs/python/doc/index.html"" rel=""nofollow"">Boost.Python</a></p>
"
49169,3002,2008-09-08T04:33:39Z,49164,9,"<p><a href=""http://peak.telecommunity.com/DevCenter/setuptools"">Setuptools</a> is the software that creates <a href=""http://peak.telecommunity.com/DevCenter/PythonEggs"">.egg files</a>. It's an extension of the <a href=""http://docs.python.org/lib/module-distutils.html""><code>distutils</code></a> package in the standard library.</p>

<p>The process involves creating a <code>setup.py</code> file, then  <code>python setup.py bdist_egg</code> creates an .egg package.</p>
"
49175,4172,2008-09-08T04:47:44Z,49164,3,"<p>Also, if you need to get an .egg package off a single .py file app, check this link: <a href=""http://peak.telecommunity.com/DevCenter/EasyInstall#packaging-others-projects-as-eggs"" rel=""nofollow"">EasyInstall - Packaging others projects as eggs</a>.</p>
"
49319,5022,2008-09-08T08:36:45Z,49137,1,"<p>Embeding the Python interpreter inside your C++ app will let you run Python programs using your application run Python scripts. It will also make it easier possible for those scripts to call C++ functions in your application. If this is what you want then the Boost library mentioned previously may be what you want to make it easier to create the link. In the past I have used <a href=""http://www.swig.org/"" rel=""nofollow"">SWIG</a> to generate Python interfaces to C++ code. It was not clear from your question whether you wanted the Python scripts to call your C++ program or whether you just wanted the C++ to call Python.</p>

<p>Many of the Python functions use modules which are not built into the Python interpreter. If your Python scripts call these functions then you will either need to have your users install Python or include the python runtime files with your application. It will depend on what modules you import in you Python scripts.</p>
"
49439,4966,2008-09-08T10:37:53Z,49137,1,"<p>Boost is probably the best choice, however if you're wanting something that's more standalone, and if this is for use with Windows (which seems feasible given that they are the people least likely to have Python installed), then you can use <a href=""http://www.py2exe.org"" rel=""nofollow"">py2exe</a> to create a DLL with entry points suitable for COM objects.  You can then interface with the library via COM.  (Obviously this is not at all useful as a cross-platform solution).</p>
"
49485,3148,2008-09-08T11:12:56Z,49455,1,"<p>A plugin for GSview for viewing encrypted PDFs is <a href=""http://www.cs.cmu.edu/~dst/Adobe/Gallery/Keating/"" rel=""nofollow"">here</a>.</p>

<p>If this works for you, you may be able to look at the source.</p>
"
49492,4966,2008-09-08T11:16:54Z,38987,136,"<p>This probably won't be a popular answer, but you almost certainly do not want to do this.  If you want a copy that's a merge, then use copy (or <a href=""https://docs.python.org/2/library/copy.html"">deepcopy</a>, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit.</p>

<p>In addition, when you use .items() (pre Python 3.0), you're creating a new list that contains the items from the dict.  If your dictionaries are large, then that is quite a lot of overhead (two large lists that will be thrown away as soon as the merged dict is created).  update() can work more efficiently, because it can run through the second dict item-by-item.</p>

<p>In terms of <a href=""https://docs.python.org/2/library/timeit.html"">time</a>:</p>

<pre><code>&gt;&gt;&gt; timeit.Timer(""dict(x, **y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
15.52571702003479
&gt;&gt;&gt; timeit.Timer(""temp = x.copy()\ntemp.update(y)"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
15.694622993469238
&gt;&gt;&gt; timeit.Timer(""dict(x.items() + y.items())"", ""x = dict(zip(range(1000), range(1000)))\ny=dict(zip(range(1000,2000), range(1000,2000)))"").timeit(100000)
41.484580039978027
</code></pre>

<p>IMO the tiny slowdown between the first two is worth it for the readability.  In addition, keyword arguments for dictionary creation was only added in Python 2.3, whereas copy() and update() will work in older versions.</p>
"
49514,46,2008-09-08T11:34:08Z,49307,5,"<p>If I'm not mistaken the zip function you use in python <a href=""http://groups.google.com/group/comp.lang.python/browse_thread/thread/195e57735ff6ee56"">creates a pair of the items found in list1 and list2</a>. Basically it still is a for loop with the addition that it will retrieve the data from the two seperate lists for you, instead that you have to do it yourself.</p>

<p>So maybe your best option is to use a <em>standard</em> for loop like this:</p>

<pre><code>for i=1:length(a)
  c(i) = a(i) + b(i);
end
</code></pre>

<p>or whatever you have to do with the data.</p>

<p>If you really are talking about parallel computing then you should take a look at the <a href=""http://www.mathworks.com/products/parallel-computing/"">Parallel Computing Toolbox</a> for matlab, and more specifically at <a href=""http://www.mathworks.com/access/helpdesk/help/toolbox/distcomp/index.html?/access/helpdesk/help/toolbox/distcomp/brb2x2l-1.html"">parfor</a></p>
"
49828,3002,2008-09-08T14:40:36Z,49824,15,"<p>I think this pair of articles by Philip J. Eby does a great job discussing the differences between the two languages (mostly about philosophy/mentality rather than specific language features). </p>

<ul>
<li><a href=""http://dirtsimple.org/2004/12/python-is-not-java.html"">Python is Not Java</a></li>
<li><a href=""http://dirtsimple.org/2004/12/java-is-not-python-either.html"">Java is Not Python, either</a></li>
</ul>
"
49837,3171,2008-09-08T14:43:09Z,49824,4,"<p>One key difference in Python is <a href=""http://weblog.hotales.org/cgi-bin/weblog/nb.cgi/view/python/2005/02/19/1"" rel=""nofollow"">significant whitespace</a>.  This puts a lot of people off - me too for a long time - but once you get going it seems natural and makes much more sense  than <code>;</code>s everywhere.</p>

<p>From a personal perspective, Python has the following benefits over Java:</p>

<ul>
<li>No <a href=""http://en.wikipedia.org/wiki/Exception_handling#Checked_exceptions"" rel=""nofollow"">Checked Exceptions</a></li>
<li>Optional Arguments</li>
<li>Much less boilerplate and less verbose generally</li>
</ul>

<p>Other than those, <a href=""http://wiki.python.org/moin/LanguageComparisons"" rel=""nofollow"">this page on the Python Wiki</a> is a good place to look with lots of links to interesting articles.</p>
"
49911,2514,2008-09-08T15:13:58Z,49824,3,"<p>With <a href=""http://www.jython.org/Project/"" rel=""nofollow"">Jython</a> you can have both. It's only at Python 2.2, but still very useful if you need an embedded interpreter that has access to the Java runtime.</p>
"
49929,2598,2008-09-08T15:21:43Z,49926,0,"<p>There is a program called <a href=""http://www.scilab.org/"" rel=""nofollow"">SciLab</a> that is a MATLAB clone.</p>

<p>I haven't used it at all, but it is open source and might have the function you are looking for.</p>
"
49930,1428,2008-09-08T15:22:49Z,49926,3,"<p><a href=""http://www.gnu.org/software/octave/"" rel=""nofollow"">GNU Octave</a> is another MATLAB clone that might have what you need.</p>
"
49953,1694,2008-09-08T15:35:32Z,49824,40,"<ol>
<li><p>List comprehensions.  I often find myself filtering/mapping lists, and being able to say <code>[line.replace(""spam"",""eggs"") for line in open(""somefile.txt"") if line.startswith(""nee"")]</code> is really nice.</p></li>
<li><p>Functions are first class objects.  They can be passed as parameters to other functions, defined inside other function, and have lexical scope.  This makes it really easy to say things like <code>people.sort(key=lambda p: p.age)</code> and thus sort a bunch of people on their age without having to define a custom comparator class or something equally verbose.</p></li>
<li><p>Everything is an object.  Java has basic types which aren't objects, which is why many classes in the standard library define 9 different versions of functions (for boolean, byte, char, double, float, int, long, Object, short).  <code>Array.sort</code> is a good example.  Autoboxing helps, although it makes things awkward when something turns out to be null.</p></li>
<li><p>Properties.  Python lets you create classes with read-only fields, lazily-generated fields, as well as fields which are checked upon assignment to make sure they're never 0 or null or whatever you want to guard against, etc.'</p></li>
<li><p>Default and keyword arguments.  In Java if you want a constructor that can take up to 5 optional arguments, you must define 6 different versions of that constructor.  And there's no way at all to say <code>Student(name=""Eli"", age=25)</code></p></li>
<li><p>Functions can only return 1 thing.  In Python you have tuple assignment, so you can say <code>spam, eggs = nee()</code> but in Java you'd need to either resort to mutable out parameters or have a custom class with 2 fields and then have two additional lines of code to extract those fields.</p></li>
<li><p>Built-in syntax for lists and dictionaries.</p></li>
<li><p>Operator Overloading.</p></li>
<li><p>Generally better designed libraries.  For example, to parse an XML document in Java, you say<br />
<code>Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(""test.xml"");</code><br />
and in Python you say<br />
<code>doc = parse(""test.xml"")</code></p></li>
</ol>

<p>Anyway, I could go on and on with further examples, but Python is just overall a much more flexible and expressive language.  It's also dynamically typed, which I really like, but which comes with some disadvantages.</p>

<p>Java has much better performance than Python and has way better tool support.  Sometimes those things matter a lot and Java is the better language than Python for a task; I continue to use Java for some new projects despite liking Python a lot more.  But as a language I think Python is superior for most things I find myself needing to accomplish.</p>
"
50041,2173,2008-09-08T16:02:04Z,49926,0,"<p>I don't know if it's in there, but there's a python distribution called <a href=""http://www.enthought.com/"" rel=""nofollow"">Enthought</a> that might have what you're looking for.  It was designed specifically for data analysis has over 60 additional libraries.</p>
"
50413,92,2008-09-08T18:53:37Z,50394,0,"<p>Another way to do it is to use <code>urllib2</code> module to parse some other page's whois service (many sites like that exist).  But that seems like even more of a hack that what you do now, and would give you a dependency on whatever whois site you chose, which is bad.</p>

<p>I hate to say it, but unless you want to re-implement <code>whois</code> in your program (which would be re-inventing the wheel), running <code>whois</code> on the OS and parsing the output (ie what you are doing now) seems like the right way to do it.</p>
"
50423,4172,2008-09-08T19:00:58Z,50394,0,"<p>Parsing another webpage woulnd't be as bad (assuming their html woulnd't be very bad), but it would actually tie me to them - if they're down, I'm down :) </p>

<p>Actually I found some old project on sourceforge: <a href=""http://sourceforge.net/projects/rwhois/"" rel=""nofollow"">rwhois.py</a>. What scares me a bit is that their last update is from 2003. But, it might seem as a good place to start reimplementation of what I do right now... Well, I felt obligued to post the link to this project anyway, just for further reference.</p>
"
50425,3117,2008-09-08T19:01:24Z,35948,30,"<p>I found a ""nicer""/""better"" solution for getting variables inside
Its not the nicest way, but it works.</p>

<p>You install a custom filter into django which gets the key of your dict as a parameter</p>

<p>To make it work in google app-engine you need to add a file to your main directory,
I called mine *django_hack.py* which contains this little piece of code</p>

<pre><code>from google.appengine.ext import webapp

register = webapp.template.create_template_register()

def hash(h,key):
    if key in h:
        return h[key]
    else:
        return None

register.filter(hash)
</code></pre>

<p>Now that we have this file, all we need to do is tell the app-engine to use it...
we do that by adding this little line to your main file</p>

<pre><code>webapp.template.register_template_library('django_hack')
</code></pre>

<p>and in your template view add this template instead of the usual code</p>

<pre><code>{{ user|hash:item }}
</code></pre>

<p>And its should work perfectly =)</p>
"
50502,1199,2008-09-08T19:42:56Z,50499,11,"<p>It's not entirely clear what you mean by ""the filepath of the file that is currently running within the process"".
<code>sys.argv[0]</code> usually contains the location of the script that was invoked by the Python interpreter.
Check the <a href=""https://docs.python.org/2/library/sys.html"" rel=""nofollow"">sys documentation</a> for more details.</p>

<p>As @Tim and @Pat Notz have pointed out, the __file__ attribute provides access to</p>

<blockquote>
  <p>the file from which the module was
  loaded, if it was loaded from a file</p>
</blockquote>
"
50505,825,2008-09-08T19:44:07Z,50499,5,"<p>I think it's just <code>__file__</code>   Sounds like you may also want to checkout the <a href=""https://docs.python.org/2/library/inspect.html"" rel=""nofollow"">inspect module</a>.</p>
"
50507,5063,2008-09-08T19:45:24Z,48562,4,"<p>I think you can avoid a commit hook script in this case by using the <code>svn:eol-style</code> property as described in the SVNBook:</p>

<ul>
<li><p><a href=""http://svnbook.red-bean.com/en/1.7/svn.advanced.props.file-portability.html#svn.advanced.props.special.eol-style"" rel=""nofollow"">End-of-Line Character Sequences</a></p></li>
<li><p><a href=""http://svnbook.red-bean.com/en/1.7/svn.ref.properties.html"" rel=""nofollow"">Subversion Properties</a></p></li>
</ul>

<p>This way SVN can worry about your line endings for you.</p>

<p>Good luck!</p>
"
50521,4883,2008-09-08T19:56:19Z,50499,7,"<p>The <code>__file__</code> attribute works for both the file containing the main execution code as well as imported modules.</p>

<p>See <a href=""https://web.archive.org/web/20090918095828/http://pyref.infogami.com/__file__"" rel=""nofollow"">https://web.archive.org/web/20090918095828/http://pyref.infogami.com/__file__</a></p>
"
50668,2990,2008-09-08T20:58:29Z,50568,25,"<p>The filesystem backend is only worth looking at if you're not going to use a database for any other part of your system. If you are using a database then the filesystem backend has nothing to recommend it.</p>

<p>The memcache backend is much quicker than the database backend, but you run the risk of a session being purged and some of your session data being lost.</p>

<p>If you're a really, really high traffic website and code carefully so you can cope with losing a session then use memcache. If you're not using a database use the file system cache, but the default database backend is the best, safest and simplest option in almost all cases.</p>
"
50905,825,2008-09-08T23:02:42Z,50499,168,"<p>p1.py:</p>

<pre><code>execfile(""p2.py"")
</code></pre>

<p>p2.py:</p>

<pre><code>import inspect, os
print inspect.getfile(inspect.currentframe()) # script filename (usually with path)
print os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
</code></pre>
"
50929,1199,2008-09-08T23:13:16Z,50923,10,"<pre><code>&gt;&gt;&gt; import weakref
&gt;&gt;&gt; class Object:
...     pass
...
&gt;&gt;&gt; o = Object()
&gt;&gt;&gt; r = weakref.ref(o)
&gt;&gt;&gt; # if the reference is still active, r() will be o, otherwise None
&gt;&gt;&gt; do_something_with_o(r())
</code></pre>

<p>See the <a href=""http://docs.python.org/lib/module-weakref.html"">wearkref module docs</a> for more details.
You can also use <code>weakref.proxy</code> to create an object that proxies o. Will throw <code>ReferenceError</code> if used when the referent is no longer referenced.</p>
"
50986,394,2008-09-09T00:00:52Z,50499,3,"<p>You can use <code>inspect.stack()</code></p>

<pre><code>import inspect,os
inspect.stack()[0]  =&gt; (&lt;frame object at 0x00AC2AC0&gt;, 'g:\\Python\\Test\\_GetCurrentProgram.py', 15, '&lt;module&gt;', ['print inspect.stack()[0]\n'], 0)
os.path.abspath (inspect.stack()[0][1]) =&gt; 'g:\\Python\\Test\\_GetCurrentProgram.py'
</code></pre>
"
51015,4257,2008-09-09T00:37:28Z,51010,1,"<p>It seems that this isn't supported, since there wouldn't be a good way to deal with overflows in datetime.time.  I know this isn't an answer directly, but maybe someone with more python experience than me can take this a little further.  For more info, see this: <a href=""http://bugs.python.org/issue3250"" rel=""nofollow"">http://bugs.python.org/issue3250</a></p>
"
51023,5169,2008-09-09T00:42:31Z,51010,5,"<p>You could transform both into <a href=""http://docs.python.org/lib/datetime-timedelta.html"" rel=""nofollow"">timedelta objects</a> and subtract these from each other, which will take care to of the carry-overs. For example:</p>

<pre><code>&gt;&gt;&gt; import datetime as dt
&gt;&gt;&gt; t1 = dt.time(23, 5, 5, 5)
&gt;&gt;&gt; t2 = dt.time(10, 5, 5, 5)
&gt;&gt;&gt; dt1 = dt.timedelta(hours=t1.hour, minutes=t1.minute, seconds=t1.second, microseconds=t1.microsecond)
&gt;&gt;&gt; dt2 = dt.timedelta(hours=t2.hour, minutes=t2.minute, seconds=t2.second, microseconds=t2.microsecond)
&gt;&gt;&gt;  print(dt1-dt2)
13:00:00
&gt;&gt;&gt; print(dt2-dt1)
-1 day, 11:00:00
&gt;&gt;&gt; print(abs(dt2-dt1))
13:00:00
</code></pre>

<p>Negative timedelta objects in Python get a negative day field, with the other fields positive. You could check beforehand: comparison works on both time objects and timedelta objects:</p>

<pre><code>&gt;&gt;&gt; dt2 &lt; dt1
True
&gt;&gt;&gt; t2 &lt; t1
True
</code></pre>
"
51029,2193,2008-09-09T00:47:48Z,51010,-2,"<p>Firstly, note that a datetime.time is a time of day, independent of a given day, and so the different between any two datetime.time values is going to be less than 24 hours.</p>

<p>One approach is to convert both datetime.time values into comparable values (such as milliseconds), and find the difference.</p>

<pre><code>t1, t2 = datetime.time(...), datetime.time(...)

t1_ms = (t1.hour*60*60 + t1.minute*60 + t1.second)*1000 + t1.microsecond
t2_ms = (t2.hour*60*60 + t2.minute*60 + t2.second)*1000 + t2.microsecond

delta_ms = max([t1_ms, t2_ms]) - min([t1_ms, t2_ms])
</code></pre>

<p>It's a little lame, but it works.</p>
"
51042,1199,2008-09-09T00:53:24Z,51010,16,"<p>Also a little silly, but you could try picking an arbitrary day and embedding each time in it, using <code>datetime.datetime.combine</code>, then subtracting:</p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; t1 = datetime.time(2,3,4)
&gt;&gt;&gt; t2 = datetime.time(18,20,59)
&gt;&gt;&gt; dummydate = datetime.date(2000,1,1)
&gt;&gt;&gt; datetime.datetime.combine(dummydate,t2) - datetime.datetime.combine(dummydate,t1)
datetime.timedelta(0, 58675)
</code></pre>
"
51132,NA,2008-09-09T02:25:33Z,28668,2,"<p>If your leaning is to Python, you may be interested in checking out the Python Wrapper for Filemaker.   It provides two way access to the Filemaker data via Filemaker's built-in XML services.   You can find some quite thorough information on this at:</p>

<p><a href=""http://code.google.com/p/pyfilemaker/"" rel=""nofollow"">http://code.google.com/p/pyfilemaker/</a></p>
"
51137,3148,2008-09-09T02:32:46Z,49307,3,"<p>Tested only in octave... (no matlab license). Variations of arrayfun() exist, check the documentation.</p>

<pre><code>#!/usr/bin/octave -qf

function result = dostuff(my_ten, my_one)
  result = my_ten + my_one
endfunction

tens = [ 10 20 30 ];
ones = [ 1 2 3];

x = arrayfun(@dostuff, tens, ones);

x
</code></pre>

<p>Yields...</p>

<pre><code>x =

   11   22   33
</code></pre>
"
51200,5222,2008-09-09T03:56:09Z,42034,0,"<p>In addition to the places where they're syntactically required like the string % operation and for multiple return values, I use tuples as a form of lightweight classes.  For example, suppose you have an object that passes out an opaque cookie to a caller from one method which is then passed into another method.  A tuple is a good way to pack multiple values into that cookie without having to define a separate class to contain them.</p>

<p>I try to be judicious about this particular use, though.  If the cookies are used liberally throughout the code, it's better to create a class because it helps document their use. If they are only used in one place (e.g. one pair of methods) then I might use a tuple. In any case, because it's Python you can start with a tuple and then change it to an instance of a custom class without having to change any code in the caller.</p>
"
51214,5066,2008-09-09T04:14:37Z,51212,4,"<p>If you use the <code>curses</code>  package, you have much greater control of the console. It also comes at a higher cost in code complexity and is probably unnecessary unless you are developing a large console-based app.</p>

<p>For a simple solution, you can always put the spinning wheel at the end of the status messge (the sequence of characters <code>|, \, -, /</code> which actually looks nice under blinking cursor.</p>
"
51218,4659,2008-09-09T04:21:09Z,51212,13,"<p>You might also try:</p>

<pre><code>sys.stdout.write(""\r%2d%%"" % percent)
sys.stdout.flush()
</code></pre>

<p>Using a single carriage return at the beginning of your string rather than several backspaces. Your cursor will still blink, but it'll blink after the percent sign rather than under the first digit, and with one control character instead of three you may get less flicker.</p>
"
51239,4883,2008-09-09T04:48:28Z,51212,16,"<p>There's a text progress bar library for python at  <a href=""http://pypi.python.org/pypi/progressbar/2.2"">http://pypi.python.org/pypi/progressbar/2.2</a> that you might find useful: </p>

<blockquote>
  <p>This library provides a text mode progressbar. This is tipically used to display the progress of a long running operation, providing a visual clue that processing is underway.</p>
  
  <p>The ProgressBar class manages the progress, and the format of the line is given by a number of widgets. A widget is an object that may display diferently depending on the state of the progress. There are three types of widget: - a string, which always shows itself; - a ProgressBarWidget, which may return a diferent value every time it's update method is called; and - a ProgressBarWidgetHFill, which is like ProgressBarWidget, except it expands to fill the remaining width of the line.</p>
  
  <p>The progressbar module is very easy to use, yet very powerful. And automatically supports features like auto-resizing when available.</p>
</blockquote>
"
51240,720,2008-09-09T04:49:38Z,51233,44,"<p>I'll always use <a href=""http://lxml.de/"">lxml</a> for such tasks. You could use <a href=""http://www.crummy.com/software/BeautifulSoup/"">beautifulsoup</a> as well.</p>

<pre><code>import lxml.html
t = lxml.html.parse(url)
print t.find("".//title"").text
</code></pre>
"
51242,5190,2008-09-09T04:51:09Z,51233,5,"<p>This is probably overkill for such a simple task, but if you plan to do more than that, then it's saner to start from these tools (mechanize, BeautifulSoup) because they are much easier to use than the alternatives (urllib to get content and regexen or some other parser to parse html)</p>

<p>Links:
<a href=""http://crummy.com/software/BeautifulSoup"" rel=""nofollow"">BeautifulSoup</a> 
<a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a></p>

<pre><code>#!/usr/bin/env python
#coding:utf-8

from BeautifulSoup import BeautifulSoup
from mechanize import Browser

#This retrieves the webpage content
br = Browser()
res = br.open(""https://www.google.com/"")
data = res.get_data() 

#This parses the content
soup = BeautifulSoup(data)
title = soup.find('title')

#This outputs the content :)
print title.renderContents()
</code></pre>
"
51263,3571,2008-09-09T05:45:39Z,51233,10,"<p>The mechanize Browser object has a title() method. So the code from <a href=""http://stackoverflow.com/questions/51233/how-can-i-retrieve-the-page-title-of-a-webpage-using-python#51242"" rel=""nofollow"">this post</a> can be rewritten as:</p>

<pre><code>from mechanize import Browser
br = Browser()
br.open(""http://www.google.com/"")
print br.title()
</code></pre>
"
51414,3355,2008-09-09T08:49:02Z,51412,1,"<p>Some experimentation and I figured this one out:</p>

<p>def methodA(arg, **kwargs):
    methodB(""argvalue"", **kwargs)</p>

<p>Seems obvious now...</p>
"
51415,680,2008-09-09T08:50:34Z,51412,32,"<p>Put the asterisks before the kwargs variable. This makes Python pass the variable (which is assumed to be a dictionary) as keyword arguments.</p>

<pre><code>methodB(""argvalue"", **kwargs)
</code></pre>
"
51505,1709,2008-09-09T10:08:28Z,51502,8,"<p>You could try increasing the indent size, but in general I would just say, relax, it will come with time. I don't think trying to make Python look like C is a very good idea.</p>
"
51511,4702,2008-09-09T10:11:33Z,50568,19,"<p>I'm no Django expert, so this answer is about session stores generally. Downvote if I'm wrong.</p>

<h2>Performance and Scalability</h2>

<p>Choice of session store has an effect on performance and scalability. This should only be a big problem if you have a very popular application.</p>

<p>Both database and filesystem session stores are (usually) backed by disks so you can have a lot of sessions cheaply (because disks are cheap), but requests will often have to wait for the data to be read (because disks are slow). Memcached sessions use RAM, so will cost more to support the same number of concurrent sessions (because RAM is expensive), but may be faster (because RAM is fast).</p>

<p>Filesystem sessions are tied to the box where your application is running, so you can't load balance between multiple application servers if your site gets huge. Database and memcached sessions let you have multiple application servers talking to a shared session store.</p>

<h2>Simplicity</h2>

<p>Choice of session store will also impact how easy it is to deploy your site. Changing away from the default will cost some complexity. Memcached and RDBMSs both have their own complexities, but your application is probably going to be using an RDBMS anyway.</p>

<p>Unless you have a very popular application, simplicity should be the larger concern.</p>

<h2>Bonus</h2>

<p>Another approach is to store <a href=""https://docs.djangoproject.com/en/1.8/topics/http/sessions/#using-cookie-based-sessions"" rel=""nofollow"">session data in cookies</a> (all of it, not just an ID). This has the advantage that the session store automatically scales with the number of users, but it has disadvantages too. You (or your framework) need to be careful to stop users forging session data. You also need to keep each session small because the whole thing will be sent with every request.</p>
"
51512,3785,2008-09-09T10:11:54Z,49824,2,"<p>Apart from what Eli Courtwright said:</p>

<ul>
<li>I find iterators in Python more concise. You can use <em>for i in something</em>, and it works with pretty much everything. Yeah, Java has gotten better since 1.5, but for example you can iterate through a string in python with this same construct.</li>
<li>Introspection: In python you can get at runtime information about an object or a module about its symbols, methods, or even its docstrings. You can also instantiate them dynamically. Java has some of this, but usually in Java it takes half a page of code to get an instance of a class, whereas in Python it is about 3 lines. And as far as I know the docstrings thing is not available in Java</li>
</ul>
"
51523,5026,2008-09-09T10:21:03Z,51520,424,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(""mydir/myfile.txt"")
</code></pre>
"
51531,5026,2008-09-09T10:24:46Z,51502,3,"<p>Perhaps the best thing would be to turn on ""show whitespace"" in your editor.  Then you would have a visual indication of how far in each line is tabbed (usually a bunch of dots), and it will be more apparent when that changes.</p>
"
51539,4702,2008-09-09T10:28:26Z,51520,32,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath('mydir/myfile.txt')
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt;
</code></pre>
"
51550,4279,2008-09-09T10:32:54Z,51233,54,"<p>Here's a simplified version of <a href=""http://stackoverflow.com/a/51242/4279"">@Vinko Vrsalovic's answer</a>:</p>

<pre><code>import urllib2
from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(urllib2.urlopen(""https://www.google.com""))
print soup.title.string
</code></pre>

<p>NOTE:</p>

<ul>
<li><p><em>soup.title</em> finds the first <em>title</em> element <strong>anywhere</strong> in the html document</p></li>
<li><p><em>title.string</em> assumes it has only <strong>one</strong> child node, and that child node is a <strong>string</strong></p></li>
</ul>

<p>For <a href=""http://www.crummy.com/software/BeautifulSoup/bs4/doc/"">beautifulsoup 4.x</a>, use different import:</p>

<pre><code>from bs4 import BeautifulSoup
</code></pre>
"
51551,4702,2008-09-09T10:33:05Z,51502,15,"<p>I like to put blank lines around blocks to make control flow more obvious. For example:</p>

<pre><code>if foo:
   bar = baz

   while bar not biz:
      bar = i_am_going_to_find_you_biz_i_swear_on_my_life()

did_i_not_warn_you_biz()
my_father_is_avenged()
</code></pre>
"
51570,4977,2008-09-09T10:43:27Z,51502,7,"<p>Rather than focusing on making your existing structures more readable, you should focus on making more logical structures.  Make smaller blocks, try not to nest blocks excessively, make smaller functions, and try to think through your code flow more.</p>

<p>If you come to a point where you can't quickly determine the structure of your code, you should probably consider refactoring and adding some comments.  Code flow should always be immediately apparent -- the more you have to think about it, the less maintainable your code becomes.</p>
"
51663,893,2008-09-09T11:40:26Z,51658,1,"<p>The <a href=""https://docs.python.org/2.7/library/os.html"" rel=""nofollow"">os.statvfs()</a> function is a better way to get that information for Unix-like platforms (including OS X). The Python documentation says ""Availability: Unix"" but it's worth checking whether it works on Windows too in your build of Python (ie. the docs might not be up to date).</p>

<p>Otherwise, you can use the <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow"">pywin32</a> library to directly call the <a href=""http://msdn.microsoft.com/en-us/library/aa364937(VS.85).aspx"" rel=""nofollow"">GetDiskFreeSpaceEx</a> function.</p>
"
51668,3631,2008-09-09T11:43:10Z,51553,0,"<p>I don't think that your results are all that surprising -- if anything it is that Postgres is so fast.</p>

<p>Does the Postgres query run faster a second time once it has had a chance to cache the data?  To be a little fairer your test for Java and Python should cover the cost of acquiring the data in the first place (ideally loading it off disk).</p>

<p>If this performance level is a problem for your application in practice but you need a RDBMS for other reasons then you could look at <a href=""http://www.danga.com/memcached/"" rel=""nofollow"">memcached</a>.  You would then have faster cached access to raw data and could do the calculations in code.</p>
"
51675,4111,2008-09-09T11:47:20Z,51658,0,"<p>I Don't know of any cross-platform way to achieve this, but maybe a good workaround for you would be to write a wrapper class that checks the operating system and uses the best method for each.</p>

<p>For Windows, there's the <a href=""http://aspn.activestate.com/ASPN/docs/ActivePython/2.2/PyWin32/win32api__GetDiskFreeSpaceEx_meth.html"" rel=""nofollow"">GetDiskFreeSpaceEx</a> method in the win32 extensions.</p>
"
51745,2077,2008-09-09T12:31:26Z,51553,13,"<p>I would say your test scheme is not really useful. To fulfill the db query, the db server goes through several steps:</p>

<ol>
<li>parse the SQL</li>
<li>work up a query plan, i. e. decide on which indices to use (if any), optimize etc.</li>
<li>if an index is used, search it for the pointers to the actual data, then go to the appropriate location in the data or</li>
<li>if no index is used, scan <i>the whole table</i> to determine which rows are needed</li>
<li>load the data from disk into a temporary location (hopefully, but not necessarily, memory)</li>
<li>perform the count() and avg() calculations</li>
</ol>

<p>So, creating an array in Python and getting the average basically skips all these steps save the last one. As disk I/O is among the most expensive operations a program has to perform, this is a major flaw in the test (see also the answers to <a href=""http://stackoverflow.com/questions/26021/how-is-data-compression-more-effective-than-indexing-for-search-performance"">this question</a> I asked here before). Even if you read the data from disk in your other test, the process is completely different and it's hard to tell how relevant the results are.</p>

<p>To obtain more information about where Postgres spends its time, I would suggest the following tests:</p>

<ul>
<li>Compare the execution time of your query to a SELECT without the aggregating functions (i. e. cut step 5)</li>
<li>If you find that the aggregation leads to a significant slowdown, try if Python does it faster, obtaining the raw data through the plain SELECT from the comparison.</li>
</ul>

<p>To speed up your query, reduce disk access first. I doubt very much that it's the aggregation that takes the time.</p>

<p>There's several ways to do that:</p>

<ul>
<li>Cache data (in memory!) for subsequent access, either via the db engine's own capabilities or with tools like memcached</li>
<li>Reduce the size of your stored data</li>
<li>Optimize the use of indices. Sometimes this can mean to skip index use altogether (after all, it's disk access, too). For MySQL, I seem to remember that it's recommended to skip indices if you assume that the query fetches more than 10% of all the data in the table.</li>
<li>If your query makes good use of indices, I know that for MySQL databases it helps to put indices and data on separate physical disks. However, I don't know whether that's applicable for Postgres.</li>
<li>There also might be more sophisticated problems such as swapping rows to disk if for some reason the result set can't be completely processed in memory. But I would leave that kind of research until I run into serious performance problems that I can't find another way to fix, as it requires knowledge about a lot of little under-the-hood details in your process.</li>
</ul>

<p><b>Update:</b></p>

<p><i>I just realized that you seem to have no use for indices for the above query and most likely aren't using any, too, so my advice on indices probably wasn't helpful. Sorry. Still, I'd say that the aggregation is not the problem but disk access is. I'll leave the index stuff in, anyway, it might still have some use.</i></p>
"
51817,533,2008-09-09T13:04:15Z,51553,0,"<p>One other thing that an RDBMS generally does for you is to provide concurrency by protecting you from simultaneous access by another process.  This is done by placing locks, and there's some overhead from that.</p>

<p>If you're dealing with entirely static data that never changes, and especially if you're in a basically ""single user"" scenario, then using a relational database doesn't necessarily gain you much benefit.</p>
"
51933,5357,2008-09-09T13:50:18Z,51553,3,"<p>Those are very detailed answers, but they mostly beg the question, how do I get these benefits without leaving Postgres given that the data easily fits into memory, requires concurrent reads but no writes and is queried with the same query over and over again.</p>

<p>Is it possible to precompile the query and optimization plan? I would have thought the stored procedure would do this, but it doesn't really help.</p>

<p>To avoid disk access it's necessary to cache the whole table in memory, can I force Postgres to do that?  I think it's already doing this though, since the query executes in just 200 ms after repeated runs.</p>

<p>Can I tell Postgres that the table is read only, so it can optimize any locking code?</p>

<p>I think it's possible to estimate the query construction costs with an empty table (timings range from 20-60 ms) </p>

<p>I still can't see why the Java/Python tests are invalid.  Postgres just isn't doing that much more work (though I still haven't addressed the concurrency aspect, just the caching and query construction)</p>

<p>UPDATE: 
I don't think it's fair to compare the SELECTS as suggested by pulling 350,000 through the driver and serialization steps into Python to run the aggregation, nor even to omit the aggregation as the overhead in formatting and displaying is hard to separate from the timing.  If both engines are operating on in memory data, it should be an apples to apples comparison, I'm not sure how to guarantee that's already happening though.</p>

<p>I can't figure out how to add comments, maybe i don't have enough reputation?</p>
"
51976,4918,2008-09-09T14:10:06Z,51553,0,"<p>You need to increase postgres' caches to the point where the whole working set fits into memory before you can expect to see perfomance comparable to doing it in-memory with a program.</p>
"
52006,3839,2008-09-09T14:26:28Z,51553,8,"<p>Postgres is doing a lot more than it looks like (maintaining data consistency for a start!)</p>

<p>If the values don't have to be 100% spot on, or if the table is updated rarely, but you are running this calculation often, you might want to look into Materialized Views to speed it up.</p>

<p>(Note, I have not used materialized views in Postgres, they look at little hacky, but might suite your situation).</p>

<p><a href=""http://jonathangardner.net/tech/w/PostgreSQL/Materialized_Views"">Materialized Views</a></p>

<p>Also consider the overhead of actually connecting to the server and the round trip required to send the request to the server and back.</p>

<p>I'd consider 200ms for something like this to be pretty good, A quick test on my oracle server, the same table structure with about 500k rows and no indexes, takes about 1 - 1.5 seconds, which is almost all just oracle sucking the data off disk.</p>

<p>The real question is, is 200ms fast enough?</p>

<p>-------------- More --------------------</p>

<p>I was interested in solving this using materialized views, since I've never really played with them. This is in oracle.</p>

<p>First I created a MV which refreshes every minute.</p>

<pre><code>create materialized view mv_so_x 
build immediate 
refresh complete 
START WITH SYSDATE NEXT SYSDATE + 1/24/60
 as select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;
</code></pre>

<p>While its refreshing, there is no rows returned</p>

<pre><code>SQL&gt; select * from mv_so_x;

no rows selected

Elapsed: 00:00:00.00
</code></pre>

<p>Once it refreshes, its MUCH faster than doing the raw query</p>

<pre><code>SQL&gt; select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:05.74
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt;
</code></pre>

<p>If we insert into the base table, the result is not immediately viewable view the MV.</p>

<pre><code>SQL&gt; insert into so_x values (1,2,3,4,5);

1 row created.

Elapsed: 00:00:00.00
SQL&gt; commit;

Commit complete.

Elapsed: 00:00:00.00
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt;
</code></pre>

<p>But wait a minute or so, and the MV will update behind the scenes, and the result is returned fast as you could want.</p>

<pre><code>SQL&gt; /

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899460 7495.35823 22.2905352 5.00276078 2.17647059

Elapsed: 00:00:00.00
SQL&gt;
</code></pre>

<p>This isn't ideal. for a start, its not realtime, inserts/updates will not be immediately visible. Also, you've got a query running to update the MV whether you need it or not (this can be tune to whatever time frame, or on demand). But, this does show how much faster an MV can make it seem to the end user, if you can live with values which aren't quite upto the second accurate.</p>
"
52090,2600,2008-09-09T14:58:52Z,51502,23,"<p>Part of learning a new programming language is learning to read code in that language.  A crutch like this may make it easier to read your own code, but it's going to impede the process of learning how to read anyone else's Python code.  I really think you'd be better off getting rid of the end of block comments and getting used to normal Python.</p>
"
52111,5434,2008-09-09T15:09:04Z,51502,-1,"<p>I would look in to understanding more details about Python syntax. Often times if a piece of code looks odd, there usually is a better way to write it. For example, in the above example:</p>

<pre><code>bar = foo if baz else None
while bar not biz:
    bar = i_am_going_to_find_you_biz_i_swear_on_my_life()

did_i_not_warn_you_biz()
my_father_is_avenged()
</code></pre>

<p>While it is a small change, it might help the readability. Also, in all honesty, I've never used a while loop, so there is a good change you would end up with a nice concise list comprehension or for loop instead. ;)</p>
"
52136,5434,2008-09-09T15:18:50Z,47801,1,"<p>I don't think AuthKit is actively maintained anymore. It does use the Paste (<a href=""http://pythonpaste.org"" rel=""nofollow"">http://pythonpaste.org</a>) libs though for things like HTTP Basic/Digest authentication. I would probably go ahead and take a look at the source for some inspiration and then use the Paste tools if you want to use HTTP authentication. </p>

<p>There is also OpenID which is very easy to setup. The python-openid libs have an excellent example that is easy to translate to WSGI for wrapping a Pylons app. You can look at an example:</p>

<p><a href=""http://ionrock.org/hg/brightcontent-main/file/d87b7dcc606c/brightcontent/plugins/openidauth.py"" rel=""nofollow"">http://ionrock.org/hg/brightcontent-main/file/d87b7dcc606c/brightcontent/plugins/openidauth.py</a></p>
"
52179,5357,2008-09-09T15:34:19Z,51553,0,"<p>Thanks for the Oracle timings, that's the kind of stuff I'm looking for (disappointing though :-)</p>

<p>Materialized views are probably worth considering as I think I can precompute the most interesting forms of this query for most users.</p>

<p>I don't think query round trip time should be very high as i'm running the the queries on the same machine that runs Postgres, so it can't add much latency?</p>

<p>I've also done some checking into the cache sizes, and it seems Postgres relies on the OS to handle caching, they specifically mention BSD as the ideal OS for this, so I thinking Mac OS ought to be pretty smart about bringing the table into memory.  Unless someone has more specific params in mind I think more specific caching is out of my control.</p>

<p>In the end I can probably put up with 200 ms response times, but knowing that 7 ms is a possible target makes me feel unsatisfied, as even 20-50 ms times would enable more users to have more up to date queries and get rid of a lots of caching and precomputed hacks.</p>

<p>I just checked the timings using MySQL 5 and they are slightly worse than Postgres.  So barring some major caching breakthroughs, I guess this is what I can expect going the relational db route.</p>

<p>I wish I could up vote some of your answers, but I don't have enough points yet.</p>
"
52191,2555,2008-09-09T15:37:18Z,23397,2,"<p>The Threading example from Eli will run the thread, but not do any of the work after that line.  </p>

<p>I'm going to look into the processing module and the subprocess module.  I think the com method I'm running needs to be in another process, not just in another thread.</p>
"
53036,4883,2008-09-09T22:19:25Z,53027,6,"<p>Yes, take a look at the ""6.4 Packages"" section in <a href=""http://docs.python.org/tut/node8.html"" rel=""nofollow"">http://docs.python.org/tut/node8.html</a>:</p>

<p>Basically, you can place a bunch of files into a directory and add an __init__.py file to the directory.  If the directory is in your PYTHONPATH or sys.path, you can do ""import directoryname"" to import everything in the directory or ""import directoryname.some_file_in_directory"" to import a specific file that is in the directory.</p>

<blockquote>
  <p>The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as ""string"", from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable, described later. </p>
</blockquote>
"
53037,4279,2008-09-09T22:21:04Z,53027,8,"<ol>
<li>Put files in one folder. </li>
<li>Add &#95;&#95;init&#95;&#95;.py file to the folder. Do necessary imports in &#95;&#95;init&#95;&#95;.py</li>
<li><p>Replace multiple imports by one:</p>

<p>import folder_name  </p></li>
</ol>

<p>See <a href=""http://docs.python.org/tut/node8.html#SECTION008400000000000000000"" rel=""nofollow"">Python Package Management</a></p>
"
53170,4279,2008-09-09T23:48:07Z,51658,-2,"<p>You can use <a href=""http://man.he.net/?section=all&amp;topic=df"" rel=""nofollow"">df</a> as a cross-platform way. It is a part of <a href=""http://www.gnu.org/software/coreutils/"" rel=""nofollow"">GNU core utilities</a>. These are the core utilities which are expected to exist on every operating system. However, they are not installed on Windows by default (Here, <a href=""http://getgnuwin32.sourceforge.net/"" rel=""nofollow"">GetGnuWin32</a> comes in handy).</p>

<p><em>df</em> is a command-line utility, therefore a wrapper required for scripting purposes.
For example: </p>

<pre><code>from subprocess import PIPE, Popen

def free_volume(filename):
    """"""Find amount of disk space available to the current user (in bytes) 
       on the file system containing filename.""""""
    stats = Popen([""df"", ""-Pk"", filename], stdout=PIPE).communicate()[0]
    return int(stats.splitlines()[1].split()[3]) * 1024
</code></pre>
"
53173,1666,2008-09-09T23:48:30Z,53162,12,"<p>Put a <code>\</code> at the end of your line or enclose the statement in parens <code>( .. )</code>. From <a href=""http://www.ibm.com/developerworks/opensource/library/os-python5/"">IBM</a>:</p>

<pre><code>b = ((i1 &lt; 20) and
     (i2 &lt; 30) and
     (i3 &lt; 40))
</code></pre>

<p>or</p>

<pre><code>b = (i1 &lt; 20) and \
    (i2 &lt; 30) and \
    (i3 &lt; 40)
</code></pre>
"
53180,1057,2008-09-09T23:52:05Z,53162,615,"<p>What is the line?  You can just have arguments on the next line without any problems:</p>

<pre><code>a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
            blahblah6, blahblah7)
</code></pre>

<p>Otherwise you can do something like this:</p>

<pre><code>if a == True and \
   b == False
</code></pre>

<p>Check the <a href=""http://www.python.org/dev/peps/pep-0008/"">style guide</a> for more information.</p>

<p>From your example line:</p>

<pre><code>a = '1' + '2' + '3' + \
    '4' + '5'
</code></pre>

<p>Or:</p>

<pre><code>a = ('1' + '2' + '3' +
    '4' + '5')
</code></pre>

<p>Note that the style guide says that using the implicit continuation with parentheses is preferred, but in this particular case just adding parentheses around your expression is probably the wrong way to go.</p>
"
53182,3920,2008-09-09T23:53:17Z,53162,9,"<blockquote>
  <p>From the horse's mouth: <a href=""http://docs.python.org/ref/explicit-joining.html"">Explicit line
  joining </a></p>
  
  <p>Two or more physical lines may be
  joined into logical lines using
  backslash characters (<code>\</code>), as follows:
  when a physical line ends in a
  backslash that is not part of a string
  literal or comment, it is joined with
  the following forming a single logical
  line, deleting the backslash and the
  following end-of-line character. For
  example:</p>

<pre><code>if 1900 &lt; year &lt; 2100 and 1 &lt;= month &lt;= 12 \
   and 1 &lt;= day &lt;= 31 and 0 &lt;= hour &lt; 24 \
   and 0 &lt;= minute &lt; 60 and 0 &lt;= second &lt; 60:   # Looks like a valid date
        return 1
</code></pre>
  
  <p>A line ending in a backslash cannot
  carry a comment. A backslash does not
  continue a comment. A backslash does
  not continue a token except for string
  literals (i.e., tokens other than
  string literals cannot be split across
  physical lines using a backslash). A
  backslash is illegal elsewhere on a
  line outside a string literal. </p>
</blockquote>
"
53200,4279,2008-09-10T00:06:39Z,53162,119,"<p>From <a href=""http://www.python.org/dev/peps/pep-0008/"">Style Guide for Python Code</a>:</p>

<blockquote>
  <p><strong>The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces.</strong> Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation.</p>
  
  <p>Backslashes may still be appropriate at times. For example, long, multiple with-statements cannot use implicit continuation, so backslashes are acceptable:</p>

<pre><code>with open('/path/to/some/file/you/want/to/read') as file_1, \
        open('/path/to/some/file/being/written', 'w') as file_2:
    file_2.write(file_1.read())
</code></pre>
  
  <p>Another such case is with assert statements.</p>
  
  <p>Make sure to indent the continued line appropriately. The preferred place to break around a binary operator is <strong>after</strong> the operator, not before it. Some examples:</p>

<pre><code>class Rectangle(Blob):

    def __init__(self, width, height,
                 color='black', emphasis=None, highlight=0):
        if (width == 0 and height == 0 and
                color == 'red' and emphasis == 'strong' or
                highlight &gt; 100):
            raise ValueError(""sorry, you lose"")
        if width == 0 and height == 0 and (color == 'red' or
                                           emphasis is None):
            raise ValueError(""I don't think so -- values are %s, %s"" %
                             (width, height))
        Blob.__init__(self, width, height,
                      color, emphasis, highlight)
</code></pre>
</blockquote>

<p>EDIT: PEP8 now recommends the <em>opposite convention</em> (for breaking at binary operations) used by Mathematicians and their publishers to improve readability. </p>

<p>Donald Knuth's style of breaking <strong>before</strong> a binary operator aligns operators vertically, thus reducing the eye's workload when determining which items are added and subtracted.</p>

<p>From <a href=""http://legacy.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator"">PEP8: Should a line break before or after a binary operator?</a>:</p>

<blockquote>
  <p>Donald Knuth explains the traditional rule in his Computers and Typesetting series: ""Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations""[3].</p>
  
  <p>Following the tradition from mathematics usually results in more readable code:</p>

<pre><code># Yes: easy to match operators with operands
income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends)
          - ira_deduction
          - student_loan_interest)
</code></pre>
  
  <p>In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth's style is suggested.</p>
</blockquote>

<p>[3]: Donald Knuth's The TeXBook, pages 195 and 196</p>
"
53237,1659,2008-09-10T00:42:13Z,53225,3,"<p><a href=""http://docs.python.org/ref/types.html"" rel=""nofollow""><strong>im_self</strong> attribute</a></p>
"
53255,5357,2008-09-10T00:58:03Z,47789,3,"<p>Sometimes you can get away with the <em>tee</em> function from <a href=""https://docs.python.org/3/library/itertools.html"" rel=""nofollow"">itertools</a>, it returns multiple iterators for the same generator that can be used independently.</p>
"
53303,2199,2008-09-10T01:47:32Z,51553,2,"<p>I'm a MS-SQL guy myself, and we'd use <a href=""http://msdn.microsoft.com/en-us/library/ms178015.aspx"" rel=""nofollow"">DBCC PINTABLE</a> to keep a table cached, and <a href=""http://msdn.microsoft.com/en-us/library/ms184361.aspx"" rel=""nofollow"">SET STATISTICS IO</a> to see that it's reading from cache, and not disk. </p>

<p>I can't find anything on Postgres to mimic PINTABLE, but <a href=""http://www.postgresql.org/docs/current/static/pgbuffercache.html"" rel=""nofollow"">pg_buffercache</a> seems to give details on what is in the cache - you may want to check that, and see if your table is actually being cached.</p>

<p>A quick back of the envelope calculation makes me suspect that you're paging from disk. Assuming Postgres uses 4-byte integers, you have (6 * 4) bytes per row, so your table is a minimum of (24 * 350,000) bytes ~ 8.4MB. Assuming 40 MB/s sustained throughput on your HDD, you're looking at right around 200ms to read the data (which, <a href=""http://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#51668"" rel=""nofollow"">as pointed out</a>, should be where almost all of the time is being spent). </p>

<p>Unless I screwed up my math somewhere, I don't see how it's possible that you are able to read 8MB into your Java app and process it in the times you're showing - unless that file is already cached by either the drive or your OS.</p>
"
53322,4279,2008-09-10T02:19:09Z,53225,27,"<pre><code>def isbound(method):
    return method.im_self is not None

def instance(bounded_method):
    return bounded_method.im_self
</code></pre>

<p><a href=""http://docs.python.org/ref/types.html"">User-defined methods:</a></p>

<blockquote>
  <p>When a user-defined method object is
  created by retrieving a user-defined
  function object from a class, its
  <code>im_self</code> attribute is <code>None</code> and the
  method object is said to be unbound.
  When one is created by retrieving a
  user-defined function object from a
  class via one of its instances, its
  <code>im_self</code> attribute is the instance, and
  the method object is said to be bound.
  In either case, the new method's
  <code>im_class</code> attribute is the class from
  which the retrieval takes place, and
  its <code>im_func</code> attribute is the original
  function object.</p>
</blockquote>

<p>In Python <a href=""http://docs.python.org/dev/whatsnew/2.6.html"">2.6 and 3.0</a>:</p>

<blockquote>
  <p>Instance method objects have new
  attributes for the object and function
  comprising the method; the new synonym
  for <code>im_self</code> is <code>__self__</code>, and <code>im_func</code>
  is also available as <code>__func__</code>. The old
  names are still supported in Python
  2.6, but are gone in 3.0.</p>
</blockquote>
"
53333,5357,2008-09-10T02:29:45Z,51553,5,"<p>I retested with MySQL specifying ENGINE = MEMORY and it doesn't change a thing (still 200 ms).  Sqlite3 using an in-memory db gives similar timings as well (250 ms).</p>

<p>The math <a href=""http://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#53303"" rel=""nofollow"">here</a> looks correct (at least the size, as that's how big the sqlite db is :-)</p>

<p>I'm just not buying the disk-causes-slowness argument as there is every indication the tables are in memory (the postgres guys all warn against trying too hard to pin tables to memory as they swear the OS will do it better than the programmer)</p>

<p>To clarify the timings, the Java code is not reading from disk, making it a totally unfair comparison if Postgres is reading from the disk and calculating a complicated query, but that's really besides the point, the DB should be smart enough to bring a small table into memory and precompile a stored procedure IMHO.</p>

<p>UPDATE (in response to the first comment below):</p>

<p><em>I'm not sure how I'd test the query without using an aggregation function in a way that would be fair, since if i select all of the rows it'll spend tons of time serializing and formatting everything.  I'm not saying that the slowness is due to the aggregation function, it could still be just overhead from concurrency, integrity, and friends.  I just don't know how to isolate the aggregation as the sole independent variable.</em></p>
"
53522,429,2008-09-10T06:28:05Z,53513,2388,"<pre><code>if not a:
  print(""List is empty"")
</code></pre>

<p>Using the implicit booleanness of the empty list <code>a</code> is quite pythonic.</p>
"
53523,5066,2008-09-10T06:28:39Z,53513,35,"<p>I have seen the below as preferred, as it will catch the null list as well:</p>

<pre><code>if not a:
    print ""The list is empty or null""
</code></pre>
"
53525,720,2008-09-10T06:31:22Z,53513,65,"<p>An empty list is itself considered false in true value testing (see <a href=""https://docs.python.org/2/library/stdtypes.html#truth-value-testing"">python documentation</a>):</p>

<pre><code>a = []
if a:
     print ""not empty""
</code></pre>

<p>@Daren Thomas</p>

<blockquote>
  <p>EDIT: Another point against testing
  the empty list as False: What about
  polymorphism? You shouldn't depend on
  a list being a list. It should just
  quack like a duck - how are you going
  to get your duckCollection to quack
  ''False'' when it has no elements?</p>
</blockquote>

<p>Your duckCollection should implement <code>__nonzero__</code> or <code>__len__</code> so the if a: will work without problems.</p>
"
53533,5342,2008-09-10T06:43:14Z,53513,4,"<p>I prefer the following:</p>

<pre><code>if a == []:
   print ""The list is empty.""
</code></pre>

<p>Readable and you don't have to worry about calling a function like <code>len()</code> to iterate through the variable. Although I'm not entirely sure what the BigO notation of something like this is... but Python's so blazingly fast I doubt it'd matter unless <code>a</code> was gigantic.</p>
"
53549,2260,2008-09-10T07:07:59Z,53543,14,"<p>If you <em>do</em> find you need to write unique code for an environment, use pythons </p>

<pre><code>import mymodule_jython as mymodule

import mymodule_cpython as mymodule
</code></pre>

<p>have this stuff in a simple module (''module_importer''?) and write your code like this:</p>

<pre><code>from module_importer import mymodule
</code></pre>

<p>This way, all you need to do is alter <code>module_importer.py</code> per platform.</p>
"
53713,4997,2008-09-10T09:45:20Z,51553,1,"<p>Are you using TCP to access the Postgres? In that case Nagle is messing with your timing.</p>
"
53752,1057,2008-09-10T10:33:38Z,53513,565,"<p>The pythonic way to do it is from the <a href=""https://www.python.org/dev/peps/pep-0008"">PEP 8 style guide</a>:</p>

<blockquote>
  <p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.
  </p>

<pre><code><b>Yes:</b> if not seq:
     if seq:

<b>No:</b>  if len(seq):
     if not len(seq):
</code></pre>
</blockquote>
"
53791,5190,2008-09-10T11:20:27Z,53786,1,"<p>Why don't you try <a href=""http://grinder.sourceforge.net"" rel=""nofollow"">The Grinder 3</a> to load test your server, it comes with all this and more prebuilt, and it supports python as a scripting language</p>
"
54008,3171,2008-09-10T13:14:54Z,53997,12,"<p>As Google Web Toolkit is a <a href=""http://code.google.com/support/bin/answer.py?answer=54830&amp;topic=10208"" rel=""nofollow"">subset of Java</a> it works best when you Java at the backend too.  Since Google App Engine is currently <a href=""http://code.google.com/appengine/kb/general.html#language"" rel=""nofollow"">Python only</a> I think you'd have to do a lot of messing about to get your server and client to talk nicely to each other.</p>

<p>jQuery seems to be the most popular JavaScript library option in the <a href=""http://www.djangosnippets.org/tags/ajax/?page=1"" rel=""nofollow"">AJAX Tag at DjangoSnippets.com</a>.</p>

<p><strong>Edit:</strong> The above is only true of Google App Engine applications written in Python.  As Google App Engine now supports Java, GWT could now be a good choice for writing an AJAX front end.  <a href=""http://code.google.com/webtoolkit/doc/latest/tutorial/appengine.html"" rel=""nofollow"">Google even have a tutorial showing you how to do it.</a></p>
"
54015,4276,2008-09-10T13:19:51Z,53997,3,"<p>I'd recommend looking into a pure javascript framework (probably Jquery) for your client-side code, and write JSON services in python- that seems to be the easiest / bestest way to go.</p>

<p>Google Web Toolkit lets you write the UI in Java and compile it to javascript. As Dave says, it may be a better choice where the backend is in Java, as it has nice RPC hooks for that case.</p>
"
54034,3757,2008-09-10T13:29:54Z,53997,1,"<p>jQuery is a fine library, but also check out the <a href=""http://www.prototypejs.org/"" rel=""nofollow"">Prototype JavaScript framework</a>. It really turns JavaScript from being an occasionally awkward language into a beautiful and elegant language.</p>
"
54313,1530,2008-09-10T15:04:33Z,48123,5,"<p>Glade is very useful for creating interfaces, it means you can easily change the GUI without doing much coding. You'll find that if you want to do anything useful (e.g. build a treeview) you will have to get familiar with various parts of the GTK documentation  - in practice finding a good tutorial/examples. </p>
"
54873,1659,2008-09-10T18:02:43Z,54867,340,"<p>From <a href=""http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes"">http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes</a> :</p>

<blockquote>
  <p>Up to Python 2.1, old-style classes were the only flavour available to the user. The concept of (old-style) class is unrelated to the concept of type: if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code> designates the class of <code>x</code>, but <code>type(x)</code> is always <code>&lt;type 'instance'&gt;</code>. This reflects the fact that all old-style instances, independently of their class, are implemented with a single built-in type, called instance. </p>
  
  <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. A new-style class is simply a user-defined type, no more, no less. If x is an instance of a new-style class, then <code>type(x)</code> is typically the same as <code>x.__class__</code> (although this is not guaranteed – a new-style class instance is permitted to override the value returned for <code>x.__class__</code>).</p>
  
  <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. It also has a number of immediate benefits, like the ability to subclass most built-in types, or the introduction of ""descriptors"", which enable computed properties. </p>
  
  <p><strong>For compatibility reasons, classes are still old-style by default</strong>. New-style classes are created by specifying another new-style class (i.e. a type) as a parent class, or the ""top-level type"" object if no other parent is needed. The behaviour of new-style classes differs from that of old-style classes in a number of important details in addition to what type returns. Some of these changes are fundamental to the new object model, like the way special methods are invoked. Others are ""fixes"" that could not be implemented before for compatibility concerns, like the method resolution order in case of multiple inheritance. </p>
  
  <p><strong>Python 3 only has new-style classes</strong>. No matter if you subclass from <code>object</code> or not, classes are new-style in Python 3. It is however recommended that you still subclass from <code>object</code>.</p>
</blockquote>
"
55041,5035,2008-09-10T19:00:38Z,53997,4,"<p>There is no reason why you shouldn't use GAE and Google Web Toolkit (GWT) together. You write your backend code in Python and the frontend code in Java (and possibly some JavaScript), which is then compiled to JavaScript. When using another AJAX framework you will also have this difference between server and client side language.</p>

<p>GWT has features that make remote invocation of java code on the server easier, but these are entirely optional. You can just use JSON or XML interfaces, just like with other AJAX frameworks.</p>

<p>GWT 1.5 also comes with JavaScript Overlay Types, that basically allow you to treat a piece of JSON data like a Java object when developing the client side code. You can read more about this <a href=""http://googlewebtoolkit.blogspot.com/2008/08/getting-to-really-know-gwt-part-2.html"" rel=""nofollow"">here</a>.</p>

<p><strong>Update:</strong></p>

<p>Now that Google has added Java support for Google App Engine, you can develop both backend and frontend code in Java on a full Google stack - if you like. There is a nice <a href=""http://code.google.com/eclipse/"" rel=""nofollow"">Eclipse plugin</a> from Google that makes it very easy to develop and deploy applications that use GAE, GWT or both.</p>
"
55188,4977,2008-09-10T20:08:48Z,55180,1,"<p>This snippet will do so.  If you're going to do it frequently, you might want to make a 'sortkeys' method or somesuch to make it easier on the eyes.</p>

<pre><code>keys = list(d.keys())
keys.sort()
for key in keys:
    print d[key]
</code></pre>

<p>Edit:  dF's solution is better -- I forgot all about sorted().</p>
"
55193,3002,2008-09-10T20:10:05Z,55180,16,"<p>Do you mean that you need the values sorted by the value of the key?
In that case, this should do it:</p>

<pre><code>for key in sorted(d):
    print d[key]
</code></pre>

<p><strong>EDIT:</strong> changed to use sorted(d) instead of sorted(d.keys()), thanks <a href=""http://stackoverflow.com/users/1694/eli-courtwright"" rel=""nofollow"">Eli</a>!</p>
"
55194,893,2008-09-10T20:10:51Z,55180,16,"<p>Or shorter,</p>

<pre><code>for key, value in sorted(d.items()):
    print value
</code></pre>
"
55197,2603,2008-09-10T20:11:55Z,55180,1,"<pre><code>&gt;&gt;&gt; d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}
&gt;&gt;&gt; for k,v in sorted(d.items()):
...     print v, k
... 
this is a a
this is b b
this is c c
</code></pre>
"
55202,338,2008-09-10T20:12:48Z,55180,0,"<pre><code>d = {'b' : 'this is b', 'a': 'this is a' , 'c' : 'this is c'}
ks = d.keys()
ks.sort()
for k in ks:
    print ""this is "" + k
</code></pre>
"
55312,3594,2008-09-10T21:00:04Z,53543,10,"<p>@<a href=""#53549"" rel=""nofollow"">Daren Thomas</a>: I agree, but you should use the <a href=""http://docs.python.org/dev/library/platform.html#platform.python_implementation"" rel=""nofollow"">platform module</a> to determine which interpreter you're running.</p>
"
55354,4966,2008-09-10T21:23:53Z,54867,4,"<p>Or rather, you should always use new-style classes, <em>unless</em> you have code that needs to work with versions of Python older than 2.2.</p>
"
55385,3594,2008-09-10T21:44:53Z,50394,4,"<p>There's nothing wrong with using a command line utility to do what you want. If you put a nice wrapper around the service, you can implement the internals however you want! For example:</p>

<pre><code>class Whois(object):
    _whois_by_query_cache = {}

    def __init__(self, query):
        """"""Initializes the instance variables to defaults. See :meth:`lookup`
        for details on how to submit the query.""""""
        self.query = query
        self.domain = None
        # ... other fields.

    def lookup(self):
        """"""Submits the `whois` query and stores results internally.""""""
        # ... implementation
</code></pre>

<p>Now, whether or not you roll your own using urllib, wrap around a command line utility (like you're doing), or import a third party library and use that (like <a href=""http://stackoverflow.com/questions/50394#50423"" rel=""nofollow"">you're saying</a>), this interface stays the same.</p>

<p>This approach is generally not considered ugly at all -- <strong>sometimes command utilities do what you want and you should be able to leverage them</strong>. If speed ends up being a bottleneck, your abstraction makes the process of switching to a native Python implementation transparent to your client code.</p>

<p><a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""nofollow"">Practicality beats purity</a> -- that's what's Pythonic. :)</p>
"
55399,238,2008-09-10T21:56:05Z,55391,0,"<pre><code>/&lt;input type=""hidden"" name=""fooId"" value=""([\d-]+)"" \/&gt;/
</code></pre>
"
55401,234,2008-09-10T21:57:00Z,55391,5,"<p>Parsing is one of those areas where you really don't want to roll your own if you can avoid it, as you'll be chasing down the edge-cases and bugs for years go come</p>

<p>I'd recommend using <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow"">BeautifulSoup</a>. It has a very good reputation and looks from the docs like it's pretty easy to use.</p>
"
55404,4977,2008-09-10T21:59:47Z,55391,8,"<pre><code>import re
reg = re.compile('&lt;input type=""hidden"" name=""([^""]*)"" value=""&lt;id&gt;"" /&gt;')
value = reg.search(inputHTML).group(1)
print 'Value is', value
</code></pre>
"
55424,5190,2008-09-10T22:16:24Z,55391,27,"<p>For this particular case, BeautifulSoup is harder to write than a regex, but it is much more robust... I'm just contributing with the BeautifulSoup example, given that you already know which regexp to use :-)</p>

<pre><code>from BeautifulSoup import BeautifulSoup

#Or retrieve it from the web, etc. 
html_data = open('/yourwebsite/page.html','r').read()

#Create the soup object from the HTML data
soup = BeautifulSoup(html_data)
fooId = soup.find('input',name='fooId',type='hidden') #Find the proper tag
value = fooId.attrs[2][1] #The value of the third attribute of the desired tag 
                          #or index it directly via fooId['value']
</code></pre>
"
55493,NA,2008-09-10T23:33:46Z,55365,2,"<p>There's a program for Windows called XKeymacs that allows you to specify emacs keybindings for different programs.  It should work with IDLE.</p>

<p><a href=""http://www.cam.hi-ho.ne.jp/oishi/indexen.html"" rel=""nofollow"">http://www.cam.hi-ho.ne.jp/oishi/indexen.html</a></p>

<p>-Mark</p>
"
55654,3560,2008-09-11T01:39:33Z,48176,1,"<p>Use Twisted Manhole. Docs are a bit lacking, but it's easy enough to set up a telnet-based remote server and it comes with a GTK-based GUI.</p>

<ul>
<li><a href=""http://twistedmatrix.com/"" rel=""nofollow"">Main Twisted site</a></li>
<li><a href=""http://twistedmatrix.com/documents/8.1.0/api/twisted.manhole.html"" rel=""nofollow"">twisted.manhole API docs</a></li>
</ul>
"
55734,5700,2008-09-11T03:05:27Z,43290,8,"<p>I'm using two different approaches in my <code>models.py</code>. The first is the <code>permalink</code> decorator:</p>

<pre><code>from django.db.models import permalink

def get_absolute_url(self): 
    """"""Construct the absolute URL for this Item.""""""
    return ('project.app.views.view_name', [str(self.id)])
get_absolute_url = permalink(get_absolute_url)
</code></pre>

<p>You can also call <code>reverse</code> directly:</p>

<pre><code>from django.core.urlresolvers import reverse

def get_absolute_url(self): 
    """"""Construct the absolute URL for this Item.""""""
    return reverse('project.app.views.view_name', None, [str(self.id)])
</code></pre>
"
56008,680,2008-09-11T08:18:07Z,55365,6,"<p>IDLE provides Emacs keybindings without having to install other software. </p>

<ol>
<li>Open up the menu item Options -> Configure IDLE...</li>
<li>Go to Keys tab</li>
<li>In the drop down menu on the right
side of the dialog change the select
to ""IDLE Classic Unix""</li>
</ol>

<p>It's not the true emacs key bindings but you get the basics like movement, saving/opening, ...</p>
"
56032,2963,2008-09-11T08:30:23Z,53786,0,"<p>Instead of giving the number of requests as a fixed value, why not use a scaling factor instead? At the moment, you're treating requests as a limited quantity, and randomising the days on which those requests fall. It would seem more reasonable to treat your requests-per-day as independent.</p>

<pre><code>from datetime import *
from random import *

timeline = []
scaling = 10
start_date = date(2008, 5, 1)
end_date = date(2008, 6, 1)

num_days = (end_date - start_date).days + 1
days = [start_date + timedelta(i) for i in range(num_days)]
requests = [int(scaling * weibullvariate(0.5, 2)) for i in range(num_days)]
timeline = zip(days, requests)
timeline
</code></pre>
"
56102,5357,2008-09-11T09:11:50Z,53786,0,"<p>I rewrote the code above to be shorter (but maybe it's too obfuscated now?)</p>

<pre><code>timeline = (start_date + timedelta(days=days) for days in count(0))
how_many_days = (end_date - start_date).days
pick_a_day = lambda _:int(how_many_days * weibullvariate(0.5, 2))
days = sorted(imap(pick_a_day, xrange(how_many_responses)))
histogram = zip(timeline, (len(list(responses)) for day, responses in groupby(days)))
print '\n'.join((d.strftime('%Y-%m-%d ') + ""*"" * c) for d,c in histogram)
</code></pre>
"
56134,5757,2008-09-11T09:34:47Z,55180,1,"<pre><code>for key in sorted(d):
  print d[key]
</code></pre>
"
56144,5757,2008-09-11T09:41:15Z,55391,0,"<pre><code>/&lt;input\s+type=""hidden""\s+name=""([A-Za-z0-9_]+)""\s+value=""([A-Za-z0-9_\-]*)""\s*/&gt;/

&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '&lt;input type=""hidden"" name=""fooId"" value=""12-3456789-1111111111"" /&gt;'
&gt;&gt;&gt; re.match('&lt;input\s+type=""hidden""\s+name=""([A-Za-z0-9_]+)""\s+value=""([A-Za-z0-9_\-]*)""\s*/&gt;', s).groups()
('fooId', '12-3456789-1111111111')
</code></pre>
"
56247,2963,2008-09-11T10:47:06Z,53786,1,"<p>Slightly longer but probably more readable rework of your last four lines:</p>

<pre><code>samples = [0 for i in xrange(how_many_days + 1)]
for s in xrange(how_many_responses):
    samples[min(int(how_many_days * weibullvariate(0.5, 2)), how_many_days)] += 1
histogram = zip(timeline, samples)
print '\n'.join((d.strftime('%Y-%m-%d ') + ""*"" * c) for d,c in histogram)
</code></pre>

<p>This always drops the samples within the date range, but you get a corresponding bump at the end of the timeline from all of the samples that are above the [0, 1] range.</p>
"
56262,2260,2008-09-11T10:55:44Z,56229,4,"<p>don't you actually want something like:</p>

<pre><code>html(head(script(type='text/javascript', content='var a = ...')),
body(h1('And I like the fact that 3 &lt; 1'), p('just some paragraph'))
</code></pre>

<p>I think I saw something like that somewhere. This would be wonderful.</p>

<p><strong>EDIT:</strong> Actually, I went and wrote a library today to do <em>just that</em>: <a href=""http://pypi.python.org/pypi/magictree"" rel=""nofollow"">magictree</a></p>

<p>You can use it like this:</p>

<pre><code>from magictree import html, head, script, body, h1, p
root = html(
         head(
           script('''var a = 'I love &amp;amp;aacute; letters''', 
                  type='text/javascript')),
         body(
           h1('And I like the fact that 3 &gt; 1')))

# root is a plain Element object, like those created with ET.Element...
# so you can write it out using ElementTree :)
tree = ET.ElementTree(root)
tree.write('foo.xhtml')
</code></pre>

<p>The magic in <code>magictree</code> lies in how the importing works: The <code>Element</code> factories are created when needed. Have a <a href=""http://code.google.com/p/pymagictree/source/browse/trunk/magictree.py"" rel=""nofollow"">look at the source</a>, it is <a href=""http://stackoverflow.com/questions/2447353/getattr-on-a-module"">based on an answer to another StackOverflow question</a>.</p>
"
56269,720,2008-09-11T11:04:15Z,56229,28,"<p>Another way is using the <a href=""http://codespeak.net/lxml/tutorial.html#the-e-factory"" rel=""nofollow"">E Factory</a> builder from lxml (available in <a href=""http://effbot.org/zone/element-builder.htm"" rel=""nofollow"">Elementtree</a> too)</p>

<pre><code>&gt;&gt;&gt; from lxml import etree

&gt;&gt;&gt; from lxml.builder import E

&gt;&gt;&gt; def CLASS(*args): # class is a reserved word in Python
...     return {""class"":' '.join(args)}

&gt;&gt;&gt; html = page = (
...   E.html(       # create an Element called ""html""
...     E.head(
...       E.title(""This is a sample document"")
...     ),
...     E.body(
...       E.h1(""Hello!"", CLASS(""title"")),
...       E.p(""This is a paragraph with "", E.b(""bold""), "" text in it!""),
...       E.p(""This is another paragraph, with a"", ""\n      "",
...         E.a(""link"", href=""http://www.python.org""), "".""),
...       E.p(""Here are some reserved characters: &lt;spam&amp;egg&gt;.""),
...       etree.XML(""&lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;""),
...     )
...   )
... )

&gt;&gt;&gt; print(etree.tostring(page, pretty_print=True))
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;This is a sample document&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1 class=""title""&gt;Hello!&lt;/h1&gt;
    &lt;p&gt;This is a paragraph with &lt;b&gt;bold&lt;/b&gt; text in it!&lt;/p&gt;
    &lt;p&gt;This is another paragraph, with a
      &lt;a href=""http://www.python.org""&gt;link&lt;/a&gt;.&lt;/p&gt;
    &lt;p&gt;Here are some reservered characters: &amp;lt;spam&amp;amp;egg&amp;gt;.&lt;/p&gt;
    &lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
"
56470,1694,2008-09-11T12:53:06Z,56229,10,"<p>I assume that you're actually creating an XML DOM tree, because you want to validate that what goes into this file is valid XML, since otherwise you'd just write a static string to a file.  If validating your output is indeed your goal, then I'd suggest</p>

<pre><code>from xml.dom.minidom import parseString

doc = parseString(""""""&lt;html&gt;
    &lt;head&gt;
        &lt;script type=""text/javascript""&gt;
            var a = 'I love &amp;amp;aacute; letters'
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;And I like the fact that 3 &amp;gt; 1&lt;/h1&gt;
    &lt;/body&gt;
    &lt;/html&gt;"""""")

with open(""foo.xhtml"", ""w"") as f:
    f.write( doc.toxml() )
</code></pre>

<p>This lets you just write the XML you want to output, validate that it's correct (since parseString will raise an exception if it's invalid) and have your code look much nicer.</p>

<p>Presumably you're not just writing the same static XML every time and want some substitution.  In this case I'd have lines like</p>

<pre><code>var a = '%(message)s'
</code></pre>

<p>and then use the % operator to do the substitution, like</p>

<pre><code>&lt;/html&gt;"""""" % {""message"": ""I love &amp;amp;aacute; letters""})
</code></pre>
"
56510,5577,2008-09-11T13:19:10Z,47701,8,"<p>Yeah, gdb is good for lower level debugging.</p>

<p>You can change threads with the <em>thread</em> command.</p>

<p>e.g</p>

<pre><code>(gdb) thr 2
[Switching to thread 2 (process 6159 thread 0x3f1b)]
(gdb) backtrace
....
</code></pre>

<p>You could also check out Python specific debuggers like <a href=""http://winpdb.org/about/"">Winpdb</a>, or <a href=""http://bashdb.sourceforge.net/pydb/"">pydb</a>. Both platform independent. </p>
"
56548,2963,2008-09-11T13:40:31Z,53786,1,"<p>This is quick and probably not that accurate, but if you calculate the PDF yourself, then at least you make it easier to lay several smaller/larger ones on a single timeline. <code>dev</code> is the std deviation in the Guassian noise, which controls the roughness. Note that this is <em>not</em> the 'right' way to generate what you want, but it's easy.</p>

<pre><code>import math
from datetime import datetime, timedelta, date
from random import gauss

how_many_responses = 1000
start_date = date(2008, 5, 1)
end_date = date(2008, 6, 1)
num_days = (end_date - start_date).days + 1
timeline = [start_date + timedelta(i) for i in xrange(num_days)]

def weibull(x, k, l):
    return (k / l) * (x / l)**(k-1) * math.e**(-(x/l)**k)

dev = 0.1
samples = [i * 1.25/(num_days-1) for i in range(num_days)]
probs = [weibull(i, 2, 0.5) for i in samples]
noise = [gauss(0, dev) for i in samples]
simdata = [max(0., e + n) for (e, n) in zip(probs, noise)]
events = [int(p * (how_many_responses / sum(probs))) for p in simdata]

histogram = zip(timeline, events)

print '\n'.join((d.strftime('%Y-%m-%d ') + ""*"" * c) for d,c in histogram)
</code></pre>
"
56832,5733,2008-09-11T15:11:04Z,56820,-4,"<p>What about:</p>

<pre><code>round(n,1)+epsilon
</code></pre>
"
56833,4435,2008-09-11T15:11:41Z,56820,66,"<p>can't help the way it's stored, but at least formatting works correctly: </p>

<pre><code>'%.1f' % round(n, 1) # gives you '5.6'
</code></pre>
"
56840,338,2008-09-11T15:12:19Z,56820,5,"<p>You can switch the data type to a integer:</p>

<pre><code>&gt;&gt;&gt; n = 5.59
&gt;&gt;&gt; int(n * 10) / 10.0
5.5
&gt;&gt;&gt; int(n * 10 + 0.5) 
56
</code></pre>

<p>And then display the number by inserting the locale's decimal separator.</p>

<p>However, <a href=""http://stackoverflow.com/questions/56820/round-in-python-doesnt-seem-to-be-rounding-properly#56833"" rel=""nofollow"">Jimmy's answer</a> is better.</p>
"
56841,157,2008-09-11T15:12:25Z,56820,3,"<p>You can use the string format operator <code>%</code>, similar to sprintf.</p>

<pre><code>mystring = ""%.2f"" % 5.5999
</code></pre>
"
56844,616,2008-09-11T15:13:28Z,56820,9,"<p>You get '5.6' if you do <code>str(round(n, 1))</code> instead of just <code>round(n, 1)</code>.</p>
"
56845,3347,2008-09-11T15:13:32Z,56820,5,"<p>Floating point math is vulnerable to slight, but annoying, precision inaccuracies.  If you can work with integer or fixed point, you will be guaranteed precision.</p>
"
56849,3920,2008-09-11T15:14:15Z,56820,3,"<p><strong>printf</strong> the sucker.</p>

<pre><code>print '%.1f' % 5.59  # returns 5.6
</code></pre>
"
56850,5190,2008-09-11T15:14:22Z,56820,81,"<p>Formatting works correctly even without having to round:</p>

<pre><code>""%.1f"" % n
</code></pre>
"
57704,4702,2008-09-11T21:27:35Z,56820,15,"<p><code>round(5.59, 1)</code> is working fine. The problem is that 5.6 cannot be represented exactly in binary floating point.</p>

<pre><code>&gt;&gt;&gt; 5.6
5.5999999999999996
&gt;&gt;&gt;
</code></pre>

<p>As Vinko says, you can use string formatting to do rounding for display.</p>

<p>Python has a <a href=""http://docs.python.org/lib/module-decimal.html"">module for decimal arithmetic</a> if you need that.</p>
"
57745,4279,2008-09-11T21:52:28Z,57708,7,"<p>You could find an answer here -- <a href=""http://stackoverflow.com/questions/53224/getting-international-characters-from-a-web-page#53246"">Getting international characters from a web page?</a></p>

<p><strong>EDIT</strong>: It seems like <code>BeautifulSoup</code> doesn't convert entities written in hexadecimal form. It can be fixed:</p>

<pre><code>import copy, re
from BeautifulSoup import BeautifulSoup

hexentityMassage = copy.copy(BeautifulSoup.MARKUP_MASSAGE)
# replace hexadecimal character reference by decimal one
hexentityMassage += [(re.compile('&amp;#x([^;]+);'), 
                     lambda m: '&amp;#%d;' % int(m.group(1), 16))]

def convert(html):
    return BeautifulSoup(html,
        convertEntities=BeautifulSoup.HTML_ENTITIES,
        markupMassage=hexentityMassage).contents[0].string

html = '&lt;html&gt;&amp;#x01ce;&amp;#462;&lt;/html&gt;'
print repr(convert(html))
# u'\u01ce\u01ce'
</code></pre>

<p><strong>EDIT</strong>: </p>

<p><a href=""http://effbot.org/zone/re-sub.htm#unescape-html"" rel=""nofollow""><code>unescape()</code></a> function mentioned by <a href=""http://stackoverflow.com/questions/57708/convert-xml-html-entities-into-unicode-string-in-python/58125#58125"">@dF</a> which uses  <code>htmlentitydefs</code> standard module and <code>unichr()</code> might be more appropriate in this case.</p>
"
57833,4702,2008-09-11T22:42:14Z,683,29,"<p>Using a list comprehension would build a temporary list, which could eat all your memory if the sequence being searched is large. Even if the sequence is not large, building the list means iterating over the whole of the sequence before <code>in</code> could start its search.</p>

<p>The temporary list can be avoiding by using a generator expression:</p>

<pre><code>foo = 12
foo in (obj.id for obj in bar)
</code></pre>

<p>Now, as long as <code>obj.id == 12</code> near the start of <code>bar</code>, the search will be fast, even if <code>bar</code> is infinitely long.</p>

<p>As @Matt suggested, it's a good idea to use <code>hasattr</code> if any of the objects in <code>bar</code> can be missing an <code>id</code> attribute:</p>

<pre><code>foo = 12
foo in (obj.id for obj in bar if hasattr(obj, 'id'))
</code></pre>
"
57877,5169,2008-09-11T23:09:08Z,57708,18,"<p>Use the builtin <code>unichr</code> -- BeautifulSoup isn't necessary:</p>

<pre><code>&gt;&gt;&gt; entity = '&amp;#x01ce'
&gt;&gt;&gt; unichr(int(entity[3:],16))
u'\u01ce'
</code></pre>
"
58125,3002,2008-09-12T01:40:41Z,57708,55,"<p>Python has the <a href=""https://docs.python.org/2/library/htmllib.html#module-htmlentitydefs"">htmlentitydefs</a> module, but this doesn't include a function to unescape HTML entities.</p>

<p>Python developer Fredrik Lundh (author of elementtree, among other things) has  such a function <a href=""http://effbot.org/zone/re-sub.htm#unescape-html"">on his website</a>, which works with decimal, hex and named entities:</p>

<pre><code>import re, htmlentitydefs

##
# Removes HTML or XML character references and entities from a text string.
#
# @param text The HTML (or XML) source text.
# @return The plain text, as a Unicode string, if necessary.

def unescape(text):
    def fixup(m):
        text = m.group(0)
        if text[:2] == ""&amp;#"":
            # character reference
            try:
                if text[:3] == ""&amp;#x"":
                    return unichr(int(text[3:-1], 16))
                else:
                    return unichr(int(text[2:-1]))
            except ValueError:
                pass
        else:
            # named entity
            try:
                text = unichr(htmlentitydefs.name2codepoint[text[1:-1]])
            except KeyError:
                pass
        return text # leave as is
    return re.sub(""&amp;#?\w+;"", fixup, text)
</code></pre>
"
58129,1199,2008-09-12T01:42:38Z,58119,9,"<p>Well, <code>re.compile</code> certainly may:</p>

<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile('he(lo')
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""C:\Python25\lib\re.py"", line 180, in compile
    return _compile(pattern, flags)
  File ""C:\Python25\lib\re.py"", line 233, in _compile
    raise error, v # invalid expression
sre_constants.error: unbalanced parenthesis
</code></pre>

<p><a href=""http://docs.python.org/lib/node46.html#l2h-408"">The documentation</a> does support this, in a roundabout way - check the bottom of the ""Module Contents"" page for (brief) description of the <code>error</code> exception.</p>

<p>Unfortunately, I don't have any answer to the general question. I suppose the documentation for the various modules varies in quality and thoroughness. If there were particular modules you were interested in, you might be able to <a href=""http://www.depython.net/"">decompile</a> them (if written in Python) or even <a href=""http://www.python.org/download/"">look at the source</a>, if they're in the standard library.</p>
"
58168,188,2008-09-12T02:10:16Z,58119,6,"<p>Unlike Java, where there are exceptions that must be declared to be raised (and some that don't have to be, but that's another story), any Python code may raise any exception at any time.</p>

<p>There are a list of <a href=""http://docs.python.org/lib/module-exceptions.html"">built-in exceptions</a>, which generally has some description of when these exceptions might be raised.  Its up to you as to how much exception handling you will do, and if you will handle stuff gracefully, or just fail with a traceback.</p>
"
58296,3560,2008-09-12T04:23:53Z,58294,7,"<p>This isn't possible without cooperation from an external server, because there could be any number of NATs between you and the other computer. If it's a custom protocol, you could ask the other system to report what address it's connected to.</p>
"
58299,4977,2008-09-12T04:24:34Z,58294,4,"<p>The only way I can think of that's guaranteed to give it to you is to hit a service like <a href=""http://whatismyip.com/"" rel=""nofollow"">http://whatismyip.com/</a> to get it.</p>
"
58417,3715,2008-09-12T06:53:25Z,51520,13,"<p>Better still, install the <a href=""http://pypi.python.org/pypi/path.py/2.2""><code>path.py</code></a> module, it wraps all the <code>os.path</code> functions and other related functions into methods on an object that can be used wherever strings are used:</p>

<pre><code>&gt;&gt;&gt; from path import path
&gt;&gt;&gt; path('mydir/myfile.txt').abspath()
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt;
</code></pre>
"
58460,3577,2008-09-12T07:48:15Z,56229,0,"<p>Try <a href=""http://uche.ogbuji.net/tech/4suite/amara"" rel=""nofollow"">http://uche.ogbuji.net/tech/4suite/amara</a>. It is quite complete and has a straight forward set of access tools. Normal Unicode support, etc. </p>

<pre><code>#
#Output the XML entry
#
def genFileOLD(out,label,term,idval):
    filename=entryTime() + "".html""
    writer=MarkupWriter(out, indent=u""yes"")
    writer.startDocument()
    #Test element and attribute writing
    ans=namespace=u'http://www.w3.org/2005/Atom'
    xns=namespace=u'http://www.w3.org/1999/xhtml'
    writer.startElement(u'entry',
       ans,
       extraNss={u'x':u'http://www.w3.org/1999/xhtml' ,
                 u'dc':u'http://purl.org/dc/elements/1.1'})
    #u'a':u'http://www.w3.org/2005/Atom',
    #writer.attribute(u'xml:lang',unicode(""en-UK""))

    writer.simpleElement(u'title',ans,content=unicode(label))
    #writer.simpleElement(u'a:subtitle',ans,content=u' ')
    id=unicode(""http://www.dpawson.co.uk/nodesets/""+afn.split(""."")[0])
    writer.simpleElement(u'id',ans,content=id)
    writer.simpleElement(u'updated',ans,content=unicode(dtime()))
    writer.startElement(u'author',ans)
    writer.simpleElement(u'name',ans,content=u'Dave ')
    writer.simpleElement(u'uri',ans,
      content=u'http://www.dpawson.co.uk/nodesets/'+afn+"".xml"")
    writer.endElement(u'author')
    writer.startElement(u'category', ans)
    if (prompt):
        label=unicode(raw_input(""Enter label ""))
    writer.attribute(u'label',unicode(label))
    if (prompt):
        term = unicode(raw_input(""Enter term to use ""))
    writer.attribute(u'term', unicode(term))
    writer.endElement(u'category')
    writer.simpleElement(u'rights',ans,content=u'\u00A9 Dave 2005-2008')
    writer.startElement(u'link',ans)
    writer.attribute(u'href',
         unicode(""http://www.dpawson.co.uk/nodesets/entries/""+afn+"".html""))
    writer.attribute(u'rel',unicode(""alternate""))
    writer.endElement(u'link')
    writer.startElement(u'published', ans)
    dt=dtime()
    dtu=unicode(dt)
    writer.text(dtu)
    writer.endElement(u'published')
    writer.simpleElement(u'summary',ans,content=unicode(label))
    writer.startElement(u'content',ans)
    writer.attribute(u'type',unicode(""xhtml""))
    writer.startElement(u'div',xns)
    writer.simpleElement(u'h3',xns,content=unicode(label))
    writer.endElement(u'div')
    writer.endElement(u'content')
    writer.endElement(u'entry')
</code></pre>
"
58701,1199,2008-09-12T11:11:03Z,58622,30,"<p>This is <a href=""http://www.stack.nl/~dimitri/doxygen/docblocks.html#pythonblocks"">documented on the doxygen website</a>, but to summarize here:</p>

<p>You can use doxygen to document your Python code. You can either use the Python documentation string syntax:</p>

<pre><code>""""""@package docstring
Documentation for this module.

More details.
""""""

def func():
    """"""Documentation for a function.

    More details.
    """"""
    pass
</code></pre>

<p>In which case the comments will be extracted by doxygen, but you won't be able to use any of the <a href=""http://www.stack.nl/~dimitri/doxygen/commands.html#cmd_intro"">special doxygen commands</a>.</p>

<p><strong>Or</strong> you can (similar to C-style languages under doxygen) double up the comment marker (<code>#</code>) on the first line before the member:</p>

<pre><code>## @package pyexample
#  Documentation for this module.
#
#  More details.

## Documentation for a function.
#
#  More details.
def func():
    pass
</code></pre>

<p>In that case, you can use the special doxygen commands. There's no particular Python output mode, but you can apparently improve the results by setting <code>OPTMIZE_OUTPUT_JAVA</code> to <code>YES</code>.</p>

<p>Honestly, I'm a little surprised at the difference - it seems like once doxygen can detect the comments in ## blocks or """""" blocks, most of the work would be done and you'd be able to use the special commands in either case. Maybe they expect people using """""" to adhere to more Pythonic documentation practices and that would interfere with the special doxygen commands?</p>
"
58917,5616,2008-09-12T13:13:57Z,58711,7,"<p>You could actually pull this off, but it would require using metaclasses, which are <em>deep</em> magic (there be dragons). If you want an intro to metaclasses, there's a series of <a href=""http://www.ibm.com/developerworks/linux/library/l-pymeta.html"" rel=""nofollow"">articles from IBM</a> which manage to introduce the ideas without melting your brain.</p>

<p>The source code from an ORM like SQLObject might help, too, since it uses this same kind of declarative syntax.</p>
"
58990,3002,2008-09-12T13:40:35Z,58711,2,"<p>Maybe not as slick as the Ruby version, but how about something like this:</p>

<pre><code>from Boots import App, Para, Button, alert

def Shoeless(App):
    t = Para(text = 'Not Clicked')
    b = Button(label = 'The label')

    def on_b_clicked(self):
        alert('You clicked the button!')
        self.t.text = 'Clicked!'
</code></pre>

<p><a href=""http://stackoverflow.com/questions/58711/how-would-you-design-a-very-pythonic-ui-framework#58917"" rel=""nofollow"">Like Justin said</a>, to implement this you would need to use a custom metaclass on class <code>App</code>, and a bunch of properties on <code>Para</code> and <code>Button</code>. This actually wouldn't be too hard.</p>

<p>The problem you run into next is: how do you keep track of the <em>order</em> that things appear in the class definition? In Python 2.x, there is no way to know if <code>t</code> should be above <code>b</code> or the other way around, since you receive the contents of the class definition as a python <code>dict</code>.</p>

<p>However, in Python 3.0 <a href=""http://www.python.org/dev/peps/pep-3115/"" rel=""nofollow"">metaclasses are being changed</a> in a couple of (minor) ways. One of them is the <code>__prepare__</code> method, which allows you to supply your own custom dictionary-like object to be used instead -- this means you'll be able to track the order in which items are defined, and position them accordingly in the window.</p>
"
59018,720,2008-09-12T13:48:59Z,58622,11,"<p>An other very good documentation tool is <a href=""http://sphinx.pocoo.org/"">sphinx</a>. It will be used for the upcoming python 2.6 <a href=""http://docs.python.org/dev/"">documentation</a> and is used by <a href=""http://docs.djangoproject.com/en/dev/"">django</a> and a lot of other python projects.</p>

<p>From the sphinx website:</p>

<ul>
<li><strong>Output formats</strong>: HTML (including Windows HTML Help) and LaTeX, for printable PDF versions</li>
<li><strong>Extensive cross-references</strong>: semantic markup and automatic links for functions, classes, glossary terms and similar pieces of information</li>
<li><strong>Hierarchical structure</strong>: easy definition of a document tree, with automatic links to siblings, parents and children</li>
<li><strong>Automatic indices</strong>: general index as well as a module index</li>
<li><strong>Code handling</strong>: automatic highlighting using the Pygments highlighter</li>
<li><strong>Extensions</strong>: automatic testing of code snippets, inclusion of docstrings from Python modules, and more</li>
</ul>
"
59179,985,2008-09-12T14:51:51Z,47701,3,"<p>If you mean the pydb, there is no way to do it. There was some effort in that direction:
<a href=""http://svn.python.org/projects/sandbox/trunk/pdb/mpdb.py"" rel=""nofollow"">see the svn commit</a>, but it was abandoned. Supposedly <a href=""http://winpdb.org/docs/launch-time/"" rel=""nofollow"">winpdb supports it</a>.</p>
"
59235,1952,2008-09-12T15:11:00Z,55180,1,"<p>You can also sort a dictionary by value and control the sort order:</p>

<pre><code>import operator

d = {'b' : 'this is 3', 'a': 'this is 2' , 'c' : 'this is 1'}

for key, value in sorted(d.iteritems(), key=operator.itemgetter(1), reverse=True):
    print key, "" "", value
</code></pre>

<p>Output:<br />
b   this is 3<br />
a   this is 2<br />
c   this is 1</p>
"
59662,4960,2008-09-12T18:14:01Z,59648,2,"<p>Are you talking about doing this?</p>

<pre><code>&gt;&gt;&gt; a = [ ['a', 'b'], ['c', 'd'] ]
&gt;&gt;&gt; a[1]
['c', 'd']
&gt;&gt;&gt; a[1][1]
'd'
</code></pre>
"
59663,3002,2008-09-12T18:14:04Z,59648,1,"<p>Lists in python can contain any type of object -- If I understand the question correctly, will a <code>list</code> of <code>list</code>s do the job? Something like this (assuming you have a function <code>generate_poll_data()</code> which creates your data:</p>

<pre><code>data = []

for in xrange(num_iterations):
    data.append(generate_poll_data())
</code></pre>

<p>Then, <code>data[n]</code> will be the list of data from the <code>(n-1)</code>th run.</p>
"
59709,2260,2008-09-12T18:31:04Z,59648,1,"<p>since you are thinking in <em>variables</em>, you might prefer a dictionary over a list of lists:</p>

<pre><code>data = {}
data['a'] = [generate_poll_data()]
data['b'] = [generate_poll_data()]
</code></pre>

<p>etc.</p>
"
59762,6171,2008-09-12T19:01:00Z,59648,1,"<p>I would strongly consider using <a href=""http://numpy.scipy.org"" rel=""nofollow"">NumPy</a> to do this. You get efficient N-dimensional arrays that you can quickly and easily process.</p>
"
59778,3002,2008-09-12T19:08:38Z,59648,2,"<p>Would something like this work?</p>

<pre><code>from random import randint    

mcworks = []

for n in xrange(NUM_ITERATIONS):
    mctest = [randint(0, 100) for i in xrange(5)]
    if sum(mctest[:3])/3 == mcavg[2]:
        mcworks.append(mctest) # mcavg is real data
</code></pre>

<p>In the end, you are left with a list of valid <code>mctest</code> lists.</p>

<p>What I changed:</p>

<ul>
<li>Used a <a href=""http://docs.python.org/tut/node7.html#SECTION007140000000000000000"" rel=""nofollow"">list comprehension</a> to build the data instead of a for loop</li>
<li>Used <code>random.randint</code> to get random integers</li>
<li>Used <a href=""http://docs.python.org/tut/node5.html"" rel=""nofollow"">slices</a> and <code>sum</code> to calculate the average of the first three items</li>
<li>(To answer your actual question :-) ) Put the results in a list <code>mcworks</code>, instead of creating a new variable for every iteration</li>
</ul>
"
59841,1199,2008-09-12T20:08:10Z,59825,197,"<p>Two options that don't require copying the whole set:</p>

<pre><code>for e in s:
    break
# e is now an element from s
</code></pre>

<p>Or...</p>

<pre><code>e = next(iter(s))
</code></pre>

<p>But in general, sets don't support indexing or slicing.</p>
"
59928,825,2008-09-12T20:52:06Z,59825,1,"<p>Another option is to use a dictionary with values you don't care about.  E.g.,</p>

<pre><code>
poor_man_set = {}
poor_man_set[1] = None
poor_man_set[2] = None
poor_man_set[3] = None
...
</code></pre>

<p>You can treat the keys as a set except that they're just an array:</p>

<pre><code>
keys = poor_man_set.keys()
print ""Some key = %s"" % keys[0]
</code></pre>

<p>A side effect of this choice is that your code will be backwards compatible with older, pre-<code>set</code> versions of Python.  It's maybe not the best answer but it's another option.</p>

<p>Edit: You can even do something like this to hide the fact that you used a dict instead of an array or set:</p>

<pre><code>
poor_man_set = {}
poor_man_set[1] = None
poor_man_set[2] = None
poor_man_set[3] = None
poor_man_set = poor_man_set.keys()
</code></pre>
"
59955,6043,2008-09-12T21:04:48Z,58622,18,"<p>Sphinx is mainly a tool for formatting docs written independently from the source code, as I understand it.</p>

<p>For generating API docs from Python docstrings, the leading tools are <a href=""https://github.com/BurntSushi/pdoc"" rel=""nofollow"">pdoc</a> and <a href=""https://launchpad.net/pydoctor"" rel=""nofollow"">pydoctor</a>. Here's pydoctor's generated API docs for <a href=""http://twistedmatrix.com/documents/current/api"" rel=""nofollow"">Twisted</a> and <a href=""http://starship.python.net/crew/mwh/bzrlibapi/"" rel=""nofollow"">Bazaar</a>.</p>

<p>Of course, if you just want to have a look at the docstrings while you're working on stuff, there's the ""<a href=""https://docs.python.org/2/library/pydoc.html"" rel=""nofollow"">pydoc</a>"" command line tool and as well as the <code>help()</code> function available in the interactive interpreter.</p>
"
60027,3002,2008-09-12T21:43:27Z,59825,15,"<p>Since you want a random element, this will also work:</p>

<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; s = set([1,2,3])
&gt;&gt;&gt; random.sample(s, 1)
[2]
</code></pre>

<p>The documentation doesn't seem to mention performance of <code>random.sample</code>. From a really quick empirical test with a huge list and a huge set, it seems to be constant time for a list but not for the set. Also, iteration over a set isn't random; the order is undefined but predictable:</p>

<pre><code>&gt;&gt;&gt; list(set(range(10))) == range(10)
True
</code></pre>

<p>If randomness is important and you need a bunch of elements in constant time (large sets), I'd use <code>random.sample</code> and convert to a list first:</p>

<pre><code>&gt;&gt;&gt; lst = list(s) # once, O(len(s))?
...
&gt;&gt;&gt; e = random.sample(lst, 1)[0] # constant time
</code></pre>
"
60211,893,2008-09-13T00:38:24Z,60208,616,"<p>You could use a dictionary:</p>

<pre><code>def f(x):
    return {
        'a': 1,
        'b': 2,
    }[x]
</code></pre>
"
60215,305,2008-09-13T00:41:46Z,60208,156,"<p>I've always liked doing it this way</p>

<pre><code>result = {
  'a': lambda x: x * 5,
  'b': lambda x: x + 7,
  'c': lambda x: x - 2
}[value](x)
</code></pre>

<p><a href=""http://blog.simonwillison.net/post/57956755106/switch"">From here</a></p>
"
60216,1155,2008-09-13T00:43:49Z,60208,1,"<p>If you are really just returning a predetermined, fixed value, you could create a dictionary with all possible input indexes as the keys, along with their corresponding values. Also, you might not really want a function to do this - unless you're computing the return value somehow.</p>

<p>Oh, and if you feel like doing something switch-like, see <a href=""https://web.archive.org/web/20120216013404/http://www.mustap.com/pythonzone_post_224_python-switch-statement?"" rel=""nofollow"">here</a>.</p>
"
60218,4727,2008-09-13T00:46:40Z,60152,0,"<p>The languages of choice of Firefox is Javascript. Unless you have a specific requirement that requires Python, I would advice you to use that.</p>
"
60219,3561,2008-09-13T00:48:35Z,60152,5,"<p>You could try <a href=""http://selenium.openqa.org/"">selenium</a>.</p>
"
60233,2168,2008-09-13T01:07:38Z,59825,37,"<p>Least code would be:</p>

<pre><code>&gt;&gt;&gt; s = set([1, 2, 3])
&gt;&gt;&gt; list(s)[0]
1
</code></pre>

<p>Obviously this would create a new list which contains each member of the set, so not great if your set is very large.</p>
"
60236,188,2008-09-13T01:10:58Z,60208,127,"<p>In addition to the dictionary methods (which I really like, BTW), you can also use if-elif-else to obtain the switch/case/default functionality:</p>

<pre><code>if x == 'a':
    # Do the thing
elif x == 'b':
    # Do the other thing
if x in 'bc':
    # Fall-through by not using elif, but now the default case includes case 'a'!
elif x in 'xyz':
    # Do yet another thing
else:
    # Do the default
</code></pre>

<p>This of course is not identical to switch/case - you cannot have fall-through as easily as leaving off the break; statement, but you can have a more complicated test.  Its formatting is nicer than a series of nested ifs, even though functionally that's what it is closer to.</p>
"
60243,NA,2008-09-13T01:26:26Z,60208,32,"<p>There's a pattern that I learned from Twisted Python code.</p>

<pre><code>class SMTP:
    def lookupMethod(self, command):
        return getattr(self, 'do_' + command.upper(), None)
    def do_HELO(self, rest):
        return 'Howdy ' + rest
    def do_QUIT(self, rest):
        return 'Bye'

SMTP().lookupMethod('HELO')('foo.bar.com') # =&gt; 'Howdy foo.bar.com'
SMTP().lookupMethod('QUIT')('') # =&gt; 'Bye'
</code></pre>

<p>You can use it any time you need to dispatch on a token and execute extended piece of code. In a state machine you would have <code> state_ </code> methods, and dispatch on <code>self.state</code>. This switch can be cleanly extended by inheriting from base class and defining your own <code> do_ </code> methods. Often times you won't even have <code> do_ </code> methods in the base class.</p>

<p><em>Edit: how exactly is that used</em></p>

<p>In case of SMTP you will receive <code>HELO</code> from the wire. The relevant code (from <code>twisted/mail/smtp.py</code>, modified for our case) looks like this</p>

<pre><code>class SMTP:
    # ...

    def do_UNKNOWN(self, rest):
        raise NotImplementedError, 'received unknown command'

    def state_COMMAND(self, line):
        line = line.strip()
        parts = line.split(None, 1)
        if parts:
            method = self.lookupMethod(parts[0]) or self.do_UNKNOWN
            if len(parts) == 2:
                return method(parts[1])
            else:
                return method('')
        else:
            raise SyntaxError, 'bad syntax'

SMTP().state_COMMAND('   HELO   foo.bar.com  ') # =&gt; Howdy foo.bar.com
</code></pre>

<p>You'll receive <code>'  HELO   foo.bar.com '</code> (or you might get <code>'QUIT'</code> or <code>'RCPT TO: foo'</code>). This is tokenized into <code>parts</code> as <code>['HELO', 'foo.bar.com']</code>. The actual method lookup name is taken from <code>parts[0]</code>.</p>

<p>(The original method is also called <code>state_COMMAND</code>, because it uses the same pattern to implement a state machine, i.e. <code>getattr(self, 'state_' + self.mode)</code>)</p>
"
60431,NA,2008-09-13T09:19:56Z,60352,7,"<p>In Python, <code>__init__.py</code> files actually have a meaning! They mean that the folder they are in is a Python module. As such, they have a real role in your code and should most probably be stored in Version Control.</p>

<p>You could well imagine a folder in your source tree that is NOT a Python module, for example a folder containing only resources (e.g. images) and no code. That folder would not need to have a <code>__init__.py</code> file in it. Now how do you make the difference between folders where distutils should create those files and folders where it should not ?</p>
"
60448,123,2008-09-13T10:03:55Z,60446,9,"<p><H2>Python CE</H2>
Python port for Windows CE (Pocket PC) devices. Intended to be as close to desktop version as possible (console, current directory support, testsuite passed). </p>

<p><a href=""http://pythonce.sourceforge.net/""><img src=""http://pythonce.sourceforge.net/images/python-logo.jpg"" alt=""Python CE"" /></a></p>

<p><img src=""http://sourceforge.net/dbimage.php?id=76454"" alt=""alt text"" /></p>
"
60460,2686,2008-09-13T10:29:26Z,60446,1,"<p>If the IronPython and .Net Compact Framework teams work together, Visual Studio may one day support Python for Windows Mobile development out-of-the-box. Unfortunately, <a href=""http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=9191"" rel=""nofollow"">this feature request has been sitting on their issue tracker for ages</a>...</p>
"
60506,3002,2008-09-13T12:46:50Z,60352,4,"<p>Is there a reason you want to <em>avoid</em> putting empty <code>__init__.py</code> files in version control? If you do this you won't be able to <code>import</code> your packages from the source directory wihout first running distutils.</p>

<p>If you really want to, I suppose you can create <code>__init__.py</code> in <code>setup.py</code>. It has to be <em>before</em> running <code>distutils.setup</code>, so <code>setup</code> itself is able to find your packages:</p>

<pre><code>from distutils import setup
import os

for path in [my_package_directories]:
    filename = os.path.join(pagh, '__init__.py')
    if not os.path.exists(filename):
        init = open(filename, 'w')
        init.close()

setup(
...
)
</code></pre>

<p>but... what would you gain from this, compared to having the empty <code>__init__.py</code> files there in the first place? </p>
"
60548,6267,2008-09-13T13:51:57Z,60152,1,"<p>See if <a href=""http://twill.idyll.org/"" rel=""nofollow"">twill</a> can help you. It can be used as a command line tool or as a python library.</p>
"
60552,NA,2008-09-13T14:06:18Z,60152,0,"<p>Install <a href=""http://hyperstruct.net/projects/mozlab"" rel=""nofollow"">Mozlab</a> in Firefox and enable the telnet server, then open a socket.</p>
"
60563,6267,2008-09-13T14:20:42Z,58711,2,"<p>This could be an oversimplification, i don't think it would be a good idea to try to make a general purpose ui library this way. On the other hand you could use this approach (metaclasses and friends) to simplify the definition of certain classes of user interfaces for an existing ui library and depending of the application that could actually save you a significant amount of time and code lines.</p>
"
60630,4999,2008-09-13T15:48:18Z,60152,2,"<p>I use <a href=""http://selenium-rc.openqa.org/python.html"" rel=""nofollow"">Selenium RC</a>. All my tests are written in Python and are run with test suite.</p>

<p>One minor thing is that You either have to start selenium manually and point Your tests to it or start selenium from test suite which requires little bit of coding. But it's doable.</p>

<p>Generally I'm very pleased with this solution.</p>
"
60660,3153,2008-09-13T16:19:10Z,60649,13,"<p>For C++, check out <a href=""http://www.boost.org/doc/libs/1_36_0/doc/html/interprocess.html"">Boost IPC</a>.<br />
You can probably create or find some bindings for the scripting languages as well.  </p>

<p>Otherwise if it's really important to be able to interface with scripting languages your best bet is simply to use files, pipes or sockets or even a higher level abstraction like HTTP. </p>
"
60662,4869,2008-09-13T16:21:24Z,60649,5,"<p>How about <a href=""http://incubator.apache.org/thrift/"">Facebook's Thrift</a>?</p>

<blockquote>
  <p>Thrift is a software framework for scalable cross-language services development. It combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk, and OCaml.</p>
</blockquote>
"
60668,1733,2008-09-13T16:27:20Z,60649,4,"<p>It doesn't get more simple than using pipes, which are supported on every OS I know of, and can be accessed in pretty much every language.</p>

<p>Check out <a href=""http://web.archive.org/web/20080919054639/http://www.utdallas.edu/~kcooper/teaching/3375/Tutorial6a/tutorial6.htm"" rel=""nofollow"">this</a> tutorial.</p>
"
60692,5640,2008-09-13T17:03:28Z,60649,2,"<p>TCP sockets to localhost FTW.</p>
"
60702,3978,2008-09-13T17:17:20Z,60649,5,"<p>I think you'll want something based on sockets. </p>

<p>If you want RPC rather than just IPC I would suggest something like XML-RPC/SOAP which runs over HTTP, and can be used from any language.</p>
"
60723,3978,2008-09-13T17:46:14Z,60685,5,"<p>This is a simple test program I knocked up:</p>

<pre><code>#!/usr/bin/env python

TEST1=""""""
#include ""Foo.h""
#define bar foo\\
    x
#include ""Bar.h""
""""""

TEST2=""""""
#define bar foo
#define x 1 \\
    12 \\
    2 \\\\ 3
Foobar
""""""

TEST3=""""""
#define foo(x) if(x) \\
doSomething(x)
""""""

TEST4=""""""
#define foo(x) if(x) \\
doSomething(x)
normalCode();
""""""

import re
matcher = re.compile(r""^[ \t]*#define(.*\\\n)+.*$"",re.MULTILINE)

def extractDefines(s):
    mo = matcher.search(s)
    if not mo:
    	print mo
    	return
    print mo.group(0)

extractDefines(TEST1)
extractDefines(TEST2)
extractDefines(TEST3)
extractDefines(TEST4)
</code></pre>

<p>The re I used:</p>

<pre><code>r""^[ \t]*#define(.*\\\n)+.*$""
</code></pre>

<p>Is very similar to the one use used, the changes:</p>

<ol>
<li>[ \t] To avoid newlines at the start
of the define.</li>
<li>I rely on + being
greedy, so I can use a simple .*$ at
the end to get the first line of the
define that doesn't end with \</li>
</ol>
"
60729,4279,2008-09-13T17:53:30Z,60685,3,"<pre><code>start        = r""^\s*#define\s+""
continuation = r""(?:.*\\\n)+""
lastline     = r"".*$""

re_multiline_macros = re.compile(start + continuation + lastline, 
                                 re.MULTILINE)
</code></pre>
"
60753,1694,2008-09-13T18:22:06Z,60680,27,"<p>Sure; just start two different servers on two different ports in two different threads that each use the same handler.  Here's a complete, working example that I just wrote and tested.  If you run this code then you'll be able to get a Hello World webpage at both <a href=""http://localhost:1111/"">http://localhost:1111/</a> and <a href=""http://localhost:2222/"">http://localhost:2222/</a></p>

<pre><code>from threading import Thread
from SocketServer import ThreadingMixIn
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header(""Content-type"", ""text/plain"")
        self.end_headers()
        self.wfile.write(""Hello World!"")

class ThreadingHTTPServer(ThreadingMixIn, HTTPServer):
    pass

def serve_on_port(port):
    server = ThreadingHTTPServer((""localhost"",port), Handler)
    server.serve_forever()

Thread(target=serve_on_port, args=[1111]).start()
serve_on_port(2222)
</code></pre>
"
60754,3978,2008-09-13T18:23:10Z,60680,4,"<p>Not easily. You could have two ThreadingHTTPServer instances, write your own serve_forever() function (don't worry it's not a complicated function).</p>

<p>The existing function:</p>

<pre><code>def serve_forever(self, poll_interval=0.5):
    """"""Handle one request at a time until shutdown.

    Polls for shutdown every poll_interval seconds. Ignores
    self.timeout. If you need to do periodic tasks, do them in
    another thread.
    """"""
    self.__serving = True
    self.__is_shut_down.clear()
    while self.__serving:
        # XXX: Consider using another file descriptor or
        # connecting to the socket to wake this up instead of
        # polling. Polling reduces our responsiveness to a
        # shutdown request and wastes cpu at all other times.
        r, w, e = select.select([self], [], [], poll_interval)
        if r:
            self._handle_request_noblock()
    self.__is_shut_down.set()
</code></pre>

<p>So our replacement would be something like:</p>

<pre><code>def serve_forever(server1,server2):
    while True:
        r,w,e = select.select([server1,server2],[],[],0)
        if server1 in r:
            server1.handle_request()
        if server2 in r:
            server2.handle_request()
</code></pre>
"
60811,6266,2008-09-13T20:04:11Z,60805,-4,"<p>Theres a couple of ways through SQL, depending on which data base is being used.</p>

<p>(I think SQLAlchemy can use all these anyways)</p>

<p>mysql:</p>

<pre><code>SELECT colum FROM table
ORDER BY RAND()
LIMIT 1
</code></pre>

<p>PostgreSQL:</p>

<pre><code>SELECT column FROM table
ORDER BY RANDOM()
LIMIT 1
</code></pre>

<p>MSSQL:</p>

<pre><code>SELECT TOP 1 column FROM table
ORDER BY NEWID()
</code></pre>

<p>IBM DB2:</p>

<pre><code>SELECT column, RAND() as IDX
FROM table
ORDER BY IDX FETCH FIRST 1 ROWS ONLY
</code></pre>

<p>Oracle:</p>

<pre><code>SELECT column FROM
(SELECT column FROM table
ORDER BY dbms_random.value)
WHERE rownum = 1
</code></pre>

<p>However I don't know of any standard way</p>
"
60815,4999,2008-09-13T20:09:28Z,60805,63,"<p>This is very much a database-specific issue.</p>

<p>I know that PostgreSQL and MySQL have the ability to order by a random function, so you can use this in SQLAlchemy:</p>

<pre><code>from  sqlalchemy.sql.expression import func, select

select.order_by(func.random()) # for PostgreSQL, SQLite

select.order_by(func.rand()) # for MySQL

select.order_by('dbms_random.value') # For Oracle
</code></pre>

<p>Next, you need to limit the query by the number of records you need (for example using <code>.limit()</code>).</p>

<p>Bear in mind that at least in PostgreSQL, selecting random record has severe perfomance issues; <a href=""http://www.depesz.com/index.php/2007/09/16/my-thoughts-on-getting-random-row/"">here</a> is good article about it.</p>
"
60852,4977,2008-09-13T20:39:58Z,60848,6,"<p>You can't do this with the base dict class -- it's ordered by hash.  You could build your own dictionary that is really a list of key,value pairs or somesuch, which would be ordered.</p>
"
60862,3002,2008-09-13T20:48:36Z,60848,44,"<p>The standard python <code>dict</code> isn't able to do this.</p>

<p>There is a proposal (<a href=""http://www.python.org/dev/peps/pep-0372/"">PEP 372</a>) to add an ""ordered dictionary"" (that keeps track of the order of insertion) to the <code>collections</code> module in the standard library. It includes links to <a href=""http://babel.edgewall.org/browser/trunk/babel/util.py?rev=374#L178"">various</a>  <a href=""http://www.xs4all.nl/~anthon/Python/ordereddict/"">implementations</a> <a href=""http://code.djangoproject.com/browser/django/trunk/django/utils/datastructures.py?rev=7140#L53"">of</a> <a href=""http://pypi.python.org/pypi/StableDict/0.2"">ordered</a> <a href=""http://codespeak.net/svn/user/arigo/hack/pyfuse/OrderedDict.py"">dictionaries</a> (see also these <a href=""http://code.activestate.com/recipes/107747/"">two</a> <a href=""http://code.activestate.com/recipes/496761/"">recipes</a> in the Python Cookbook).</p>

<p>You might want to stick with the reference implementation in the PEP if you want your code to be compatible with the ""official"" version (if the proposal is eventually accepted).</p>

<p>EDIT: The PEP was accepted and added in python 2.7 and 3.1. See <a href=""http://docs.python.org/library/collections.html#ordereddict-objects"">the docs</a>.</p>
"
60945,2898,2008-09-13T22:30:01Z,60446,9,"<p>(I used to write customer apps for Windows Mobile.)</p>

<p>Forget about python. Even if it's technically possible:</p>

<ul>
<li>your app will be big (you'll have to bundle the whole python runtime with your app)</li>
<li>your app will use lots of memory (python is a memory hog, relative to C/C++)</li>
<li>your app will be slow</li>
<li>you wont find any documentation or discussion groups to help you when you (inevitably) encounter problems</li>
</ul>

<p>Go with C/C++ (or C#). Visual Studio 2005/2008 have decent tools for those (SDK for winmo built-in, debugging on the emulator or device connected through USB), the best documentation is for those technologies plus there are active forums/discussion groups/mailing lists where you can ask for help.</p>
"
61031,1694,2008-09-14T00:58:30Z,60848,16,"<p>The other answers are correct; it's not possible, but you could write this yourself.  However, in case you're unsure how to actually implement something like this, here's a complete and working implementation that subclasses dict which I've just written and tested. (Note that the order of values passed to the constructor is undefined but will come before values passed later, and you could always just not allow ordered dicts to be initialized with values.)</p>

<pre><code>class ordered_dict(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)
        self._order = self.keys()

    def __setitem__(self, key, value):
        dict.__setitem__(self, key, value)
        if key in self._order:
            self._order.remove(key)
        self._order.append(key)

    def __delitem__(self, key):
        dict.__delitem__(self, key)
        self._order.remove(key)

    def order(self):
        return self._order[:]

    def ordered_items(self):
        return [(key,self[key]) for key in self._order]


od = ordered_dict()
od[""hello""] = ""world""
od[""goodbye""] = ""cruel world""
print od.order()            # prints ['hello', 'goodbye']

del od[""hello""]
od[""monty""] = ""python""
print od.order()            # prints ['goodbye', 'monty']

od[""hello""] = ""kitty""
print od.order()            # prints ['goodbye', 'monty', 'hello']

print od.ordered_items()
# prints [('goodbye','cruel world'), ('monty','python'), ('hello','kitty')]
</code></pre>
"
61140,5222,2008-09-14T04:57:51Z,59825,4,"<p>I use a utility function I wrote.  Its name is somewhat misleading because it kind of implies it might be a random item or something like that.</p>

<pre><code>def anyitem(iterable):
    try:
        return iter(iterable).next()
    except StopIteration:
        return None
</code></pre>
"
61168,3119,2008-09-14T06:46:03Z,61151,10,"<p>I don't believe there is an established ""best practice"".</p>

<p>I put my tests in another directory outside of the app code. I then add the main app directory to sys.path (allowing you to import the modules from anywhere) in my test runner script (which does some other stuff as well) before running all the tests. This way I never have to remove the tests directory from the main code when I release it, saving me time and effort, if an ever so tiny amount.</p>
"
61169,680,2008-09-14T06:46:14Z,61151,36,"<p>A common practice is to put the tests directory in the same parent directory as your module/package. So if your module was called foo.py your directory layout would look like:</p>

<pre><code>parent_dir/
  foo.py
  tests/
</code></pre>

<p>Of course there is no one way of doing it. You could also make a tests subdirectory and import the module using <a href=""http://www.python.org/dev/peps/pep-0328/"">absolute import</a>.</p>

<p>Wherever you put your tests, I would recommend you use <a href=""http://nose.readthedocs.org/en/latest/"">nose</a> to run them. <a href=""http://nose.readthedocs.org/en/latest/"">Nose</a> searches through your directories for tests. This way, you can put tests wherever they make the most sense organizationally.</p>
"
61322,2900,2008-09-14T13:15:51Z,60680,6,"<p>I would say that threading for something this simple is overkill.  You're better off using some form of asynchronous programming.</p>

<p>Here is an example using <a href=""http://twistedmatrix.com/"">Twisted</a>:</p>

<pre><code>from twisted.internet import reactor
from twisted.web import resource, server

class MyResource(resource.Resource):
    isLeaf = True
    def render_GET(self, request):
        return 'gotten'

site = server.Site(MyResource())

reactor.listenTCP(8000, site)
reactor.listenTCP(8001, site)
reactor.run()
</code></pre>

<p>I also thinks it looks a lot cleaner to have each port be handled in the same way, instead of having the main thread handle one port and an additional thread handle the other.  Arguably that can be fixed in the thread example, but then you're using three threads.</p>
"
61518,4834,2008-09-14T18:02:12Z,61151,-1,"<p>I've recently started to program in Python, so I've not really had chance to find out best practice yet.
But, I've written a module that goes and finds all the tests and runs them.</p>

<p>So, I have:</p>

<pre>
app/
 appfile.py
test/
 appfileTest.py
</pre>

<p>I'll have to see how it goes as I progress to larger projects.</p>
"
61522,3002,2008-09-14T18:07:55Z,61517,45,"<p>The <code>dir</code> builtin will give you all the object's attributes, including special methods like <code>__str__</code>, <code>__dict__</code> and a whole bunch of others which you probably don't want. But you can do something like:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...     bar = 'hello'
...     baz = 'world'
...
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; [name for name in dir(f) if not name.startswith('__')]
[ 'bar', 'baz' ]
&gt;&gt;&gt; dict((name, getattr(f, name)) for name in dir(f) if not name.startswith('__')) 
{ 'bar': 'hello', 'baz': 'world' }
</code></pre>

<p>So can extend this to only return data attributes and not methods, by defining your <code>props</code> function like this:</p>

<pre><code>import inspect

def props(obj):
    pr = {}
    for name in dir(obj):
        value = getattr(obj, name)
        if not name.startswith('__') and not inspect.ismethod(value):
            pr[name] = value
    return pr
</code></pre>
"
61531,3560,2008-09-14T18:18:58Z,61151,13,"<p>I use a <code>tests/</code> directory, and then import the main application modules using relative imports. So in MyApp/tests/foo.py, there might be:</p>

<pre><code>from .. import foo
</code></pre>

<p>to import the <code>MyApp.foo</code> module.</p>
"
61551,2148,2008-09-14T18:50:52Z,61517,19,"<p>I've settled with a combination of both answers:</p>

<pre><code>dict((key, value) for key, value in f.__dict__.iteritems() 
    if not callable(value) and not key.startswith('__'))
</code></pre>
"
61614,985,2008-09-14T20:26:02Z,47801,1,"<p>This actually got me interested:<a href=""http://groups.google.com/group/pylons-discuss/browse_thread/thread/644deb53612af362?hl=en"" rel=""nofollow"">Check out this mailing on the pylons list</a>. So AuthKit is being developed, and I will follow the book and get back on the results.</p>
"
61629,2193,2008-09-14T20:42:01Z,61605,24,"<p>Firstly, note that Python allows for the following (no need for the parenthesis):</p>

<pre><code>q, r = divide(22, 7)
</code></pre>

<p>Regarding your question, there's no hard and fast rule either way. For simple (and usually contrived) examples, it may seem that it's always possible for a given function to have a single purpose, resulting in a single value. However, when using Python for real-world applications, you quickly run into many cases where returning multiple values is necessary, and results in cleaner code.</p>

<p>So, I'd say do whatever makes sense, and don't try to conform to an artificial convention. Python supports multiple return values, so use it when appropriate.</p>
"
61636,4279,2008-09-14T20:54:14Z,61605,84,"<p>Absolutely (for the example you provided).</p>

<h3>Tuples are first class citizens in Python</h3>

<p>There is a builtin function <a href=""http://docs.python.org/lib/built-in-funcs.html""><code>divmod()</code></a> that does exactly that.</p>

<pre><code>q, r = divmod(x, y) # ((x - x%y)/y, x%y) Invariant: div*y + mod == x
</code></pre>

<p>There are other examples: <code>zip</code>, <code>enumerate</code>, <code>dict.items</code>. </p>

<pre><code>for i, e in enumerate([1, 3, 3]):
    print ""index=%d, element=%s"" % (i, e)

# reverse keys and values in a dictionary
d = dict((v, k) for k, v in adict.items()) # or 
d = dict(zip(adict.values(), adict.keys()))
</code></pre>

<p>BTW, parentheses are not necessary most of the time.
Citation from <a href=""http://docs.python.org/lib/typesseq.html"">Python Library Reference</a>: </p>

<blockquote>
  <p><em>Tuples are constructed by the comma
  operator</em> (not within square brackets),
  with or without enclosing parentheses,
  but an empty tuple must have the
  enclosing parentheses, such as a, b, c
  or (). A single item tuple must have a
  trailing comma, such as (d,).</p>
</blockquote>

<h3>Functions should serve single purpose</h3>

<p>Therefore they should return a single object. In your case this object is a tuple. Consider tuple as an ad-hoc compound data structure. There are languages where almost every single function returns multiple values (list in Lisp).</p>

<p>Sometimes it is sufficient to return <code>(x, y)</code> instead of <code>Point(x, y)</code>.</p>

<h3>Named tuples</h3>

<p>With the introduction of named tuples in Python 2.6 it is preferable in many cases to return named tuples instead of plain tuples.</p>

<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; Point = collections.namedtuple('Point', 'x y')
&gt;&gt;&gt; x, y = Point(0, 1)
&gt;&gt;&gt; p = Point(x, y)
&gt;&gt;&gt; x, y, p
(0, 1, Point(x=0, y=1))
&gt;&gt;&gt; p.x, p.y, p[0], p[1]
(0, 1, 0, 1)
&gt;&gt;&gt; for i in p:
...   print(i)
...
0
1
</code></pre>
"
61637,5848,2008-09-14T20:55:28Z,61605,12,"<p>The example you give is actually a python builtin function, called <code>divmod</code>. So someone, at some point in time, thought that it was pythonic enough to include in the core functionality.</p>

<p>To me, if it makes the code cleaner, it is pythonic. Compare these two code blocks:</p>

<pre><code>seconds = 1234
minutes, seconds = divmod(seconds, 60)
hours, minutes = divmod(minutes, 60)

seconds = 1234
minutes = seconds / 60
seconds = seconds % 60
hours = minutes / 60
minutes = minutes % 60
</code></pre>
"
61746,6372,2008-09-15T00:11:21Z,535,13,"<p>We use both Buildbot and Hudson for Jython development.  Both are useful, but have different strengths and weaknesses.</p>

<p>Buildbot's configuration is pure Python and quite simple once you get the hang of it (look at the epydoc-generated API docs for the most current info).  Buildbot makes it easier to define non-testing tasks and distribute the testers.  However, it really has no concept of individual tests, just textual, HTML, and summary output, so if you want to have multi-level browsable test output and so forth you'll have to build it yourself, or just use Hudson.</p>

<p>Hudson has terrific support for drilling down from overall results into test suites and individual tests; it also is great for comparing test output between builds, but the distributed (master/slave) stuff is comparatively more complicated because you need a Java environment on the slaves too; also, Hudson is less tolerant of flaky network links between the master and slaves.</p>

<p>So, to get the benefits of both tools, we run a single instance of Hudson, which catches the common test failures, then we do multi-platform regression with Buildbot.</p>

<p>Here are our instances:</p>

<ul>
<li><a href=""http://bob.underboss.org:8080/job/jython/lastBuild/testReport/"">Jython Hudson</a></li>
<li><a href=""http://www.acm.uiuc.edu/jython-buildbot/waterfall"">Jython buildbot</a></li>
</ul>
"
61820,6364,2008-09-15T03:09:29Z,61151,1,"<p>In C#, I've generally separated the tests into a separate assembly.</p>

<p>In Python -- so far -- I've tended to either write doctests, where the test is in the docstring of a function, or put them in the <code>if __name__ == ""__main__""</code> block at the bottom of the module.</p>
"
61842,2147,2008-09-15T03:58:29Z,61781,2,"<p>You could also do it <a href=""http://www.4guysfromrolla.com/webtech/082201-1.shtml"" rel=""nofollow"">this way</a>.</p>
"
61918,6364,2008-09-15T05:50:48Z,53513,28,"<p><a href=""http://books.google.com/books?id=vpTAq4dnmuAC&amp;pg=RA1-PA479&amp;lpg=RA1-PA479&amp;dq=Python+len+big+O&amp;source=web&amp;ots=AOM6A1K9Fy&amp;sig=iQo8mV6Xf9KdzuNSa-Jkr8wDEuw&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=4&amp;ct=result""><code>len()</code> is an O(1) operation</a> for Python lists, strings, dicts, and sets. Python internally keeps track of the number of elements in these containers.</p>

<p>JavaScript <a href=""http://www.isolani.co.uk/blog/javascript/TruthyFalsyAndTypeCasting"">has a similar notion of truthy/falsy</a>.</p>
"
61933,6364,2008-09-15T06:28:30Z,53162,46,"<p>The danger in using a backslash to end a line is that if whitespace is added after the backslash (which, of course, is very hard to see), the backslash is no longer doing what you thought it was.</p>

<p>See Python Idioms and Anti-Idioms (for <a href=""https://docs.python.org/2/howto/doanddont.html#using-backslash-to-continue-statements"">Python 2</a> or <a href=""https://docs.python.org/3.1/howto/doanddont.html#using-backslash-to-continue-statements"">Python 3</a>) for more.</p>
"
62094,5190,2008-09-15T10:18:05Z,62079,4,"<p>If your idea is to compare the languages, I'd say anything outside them is not relevant for comparison purposes. </p>

<p>Nonetheless you can use the time command to measure everything and can compare it with the timing within a script.</p>

<p>Like this:</p>

<pre><code>$ time script.php
HI!

real    0m3.218s
user    0m0.080s
sys     0m0.064s
</code></pre>

<p>It will give you clock time, user time (php interpreter) and sys time (OS time)</p>

<p>If you are thinking web, then it gets a lot harder because you would be mixing webserver overhead and that is not always easy to compare if, say, you are using WSGI v/s mod_php. Then you'd have to hook probes into the webserving parts of the chain as well</p>
"
62097,6436,2008-09-15T10:20:04Z,62079,1,"<ol>
<li><p>It's worth taking speed into account if you're optimizing code. You should generally know why you're optimizing code (as in: a specific task in your existing codebase is taking too long, not ""I heard PHP is slower than Python""). It's <em>not</em> worth taking speed into account if you don't actually plan on switching languages. Just because one tiny module does something slightly faster doesn't mean rewriting your app in another language is a good idea. There are many other factors to choosing a language besides speed.</p></li>
<li><p>You benchmark, of course. Run the two codebases multiple times and compare the timing. You can use the <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?time"" rel=""nofollow"">time</a> command if both scripts are executable from the shell, or use respective benchmarking functionality from each language; the latter case depends heavily on the actual language, naturally.</p></li>
</ol>
"
62099,122,2008-09-15T10:23:55Z,62079,1,"<p>Well, you can use the ""time"" command to help:</p>

<pre><code>you@yourmachine:~$ time echo ""hello world""
hello world

real    0m0.000s
user    0m0.000s
sys 0m0.000s
you@yourmachine:~$
</code></pre>

<p>And this will get around timing outside of the environment.</p>

<p>As for whether you need to actually time that extra work... that entirely depends on what you are doing.  I assume this is for some kind of web application of some sort, so it depends on how the framework you use actually works... does it cache some kind of compiled (or parsed) version of the script?  If so, then startup time will be totally irrelevant (since the first hit will be the only one that startup time exists in).</p>

<p>Also, make sure to run your tests in a loop so you can discount the first run (and include the cost on the first run in your report if you want).  I have done some tests in Java, and the first run is always slowest due to the JIT doing its job (and the same sort of hit may exist in PHP, Python and any other languages you try).</p>
"
62121,6267,2008-09-15T10:37:02Z,61894,1,"<p>The <code>dirname</code> function returns an absolute path, use relative paths. See what is the current directory when your controllers are executed with <code>os.path.abspath(os.path.curdir)</code> and build a path to the templates relative to that location (without the <code>os.path.abspath</code> part of course).</p>

<p>This will only work if the current directory is somewhere inside <em>siteroot</em>, else you could do something like this:</p>

<pre><code>template_dir = os.path.join(os.path.dirname(__file__), os.path.pardir, ""templates"")
</code></pre>
"
62157,5190,2008-09-15T11:00:37Z,56229,3,"<p>I ended up using saxutils.escape(str) to generate valid XML strings and then validating it with Eli's approach to be sure I didn't miss any tag</p>

<pre><code>from xml.sax import saxutils
from xml.dom.minidom import parseString
from xml.parsers.expat import ExpatError

xml = '''&lt;?xml version=""1.0"" encoding=""%s""?&gt;\n
&lt;contents title=""%s"" crawl_date=""%s"" in_text_date=""%s"" 
url=""%s""&gt;\n&lt;main_post&gt;%s&lt;/main_post&gt;\n&lt;/contents&gt;''' %
(self.encoding, saxutils.escape(title), saxutils.escape(time), 
saxutils.escape(date), saxutils.escape(url), saxutils.escape(contents))
try:
    minidoc = parseString(xml)
catch ExpatError:
    print ""Invalid xml""
</code></pre>
"
62527,6868,2008-09-15T12:52:00Z,61151,102,"<p>For a file <code>module.py</code>, the unit test should normally be called <code>test_module.py</code>, following Pythonic naming conventions.</p>

<p>There are several commonly accepted places to put <code>test_module.py</code>:</p>

<ol>
<li>In the same directory as <code>module.py</code>.</li>
<li>In <code>../tests/test_module.py</code> (at the same level as the code directory).</li>
<li>In <code>tests/test_module.py</code> (one level under the code directory).</li>
</ol>

<p>I prefer #1 for its simplicity of finding the tests and importing them. Whatever build system you're using can easily be configured to run files starting with <code>test_</code>. Actually, the <a href=""https://docs.python.org/library/unittest.html#test-discovery"">default <code>unittest</code> pattern used for test discovery is <code>test*.py</code></a>.</p>
"
62680,6868,2008-09-15T13:08:56Z,61517,227,"<p>Note that best practice in current versions of Python is to use <i>new-style</i> classes, i.e.</p>

<pre><code>class Foo(object):
...
</code></pre>

<p>Also, there's a difference between an 'object' and a 'class'. To build a dictionary from an arbitrary <i>object</i>, it's sufficient to use <code>__dict__</code>. Usually, you'll declare your methods at class level and your attributes at instance level, so <code>__dict__</code> should be fine. For example:</p>

<pre><code>&gt;&gt;&gt; class A(object):
...   def __init__(self):
...     self.b = 1
...     self.c = 2
...   def do_nothing(self):
...     pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.__dict__
{'c': 2, 'b': 1}
</code></pre>

<p>Alternatively, depending on what you want to do, it might be nice to inherit from dict. Then your class is <em>already</em> a dictionary, and if you want you can override getattr and/or setattr to call through and set the dict. For example:</p>

<pre><code> class Foo(dict):
     def __init__(self):
         pass
     def __getattr__(self, attr):
         return self[attr]

     # etc...
</code></pre>
"
62780,7182,2008-09-15T13:18:54Z,58711,3,"<p>With some Metaclass magic to keep the ordering I have the following working. I'm not sure how pythonic it is but it is good fun for creating simple things. </p>

<pre><code>class w(Wndw):
  title='Hello World'
  class txt(Txt):  # either a new class
    text='Insert name here'
  lbl=Lbl(text='Hello') # or an instance
  class greet(Bbt):
    text='Greet'
    def click(self): #on_click method
      self.frame.lbl.text='Hello %s.'%self.frame.txt.text

app=w()
</code></pre>
"
62976,7424,2008-09-15T13:43:08Z,53997,0,"<p>If you want to be able to invoke method calls from JavaScript to Python, <a href=""http://json-rpc.org/wiki/python-json-rpc"" rel=""nofollow"">JSON-RPC</a> works well with Google App Engine.  See Google's article, ""<a href=""http://code.google.com/appengine/articles/rpc.html"" rel=""nofollow"">Using AJAX to Enable Client RPC Requests</a>"", for details.</p>
"
63093,7498,2008-09-15T13:56:32Z,63086,0,"<p>No. How would Python parse your script if there was a way to disable this?</p>
"
63094,7483,2008-09-15T13:56:47Z,63086,33,"<p>No.  Indentation-as-grammar is an integral part of the Python language, for better and worse.</p>
"
63095,572,2008-09-15T13:56:55Z,63086,2,"<p>I do not believe so, as Python is a whitespace-delimited language. Perhaps a text editor or IDE with auto-indentation would be of help. What are you currently using?</p>
"
63111,6899,2008-09-15T13:59:18Z,63086,3,"<p>No, there isn't. Indentation is syntax for Python. You can:</p>

<ol>
<li>Use tabnanny.py to check your code</li>
<li>Use a syntax-aware editor that highlights such mistakes (vi does that, emacs I bet it does, and then, most IDEs do too)</li>
<li>(far-fetched) write a preprocessor of your own to convert braces (or whatever block delimiters you love) into indentation</li>
</ol>
"
63119,305,2008-09-15T13:59:45Z,63086,5,"<p>All of the whitespace issues I had when I was starting Python were the result mixing tabs and spaces.  Once I configured everything to just use one or the other, I stopped having problems.</p>

<p>In my case I configured UltraEdit &amp; vim to use spaces in place of tabs.</p>
"
63122,1412,2008-09-15T14:00:05Z,63086,2,"<p>You should disable tab characters in your editor when you're working with Python (always, actually, IMHO, but especially when you're working with Python). Look for an option like ""Use spaces for tabs"": any decent editor should have one.</p>
"
63124,92,2008-09-15T14:00:23Z,63086,1,"<p>Not really.  There are a few ways to modify whitespace rules for a given line of code, but you will still need indent levels to determine scope.</p>

<p>You can terminate statements with <code>;</code> and then begin a new statement on the same line. (Which people often do when <a href=""http://codegolf.com/"" rel=""nofollow"">golfing.)</a></p>

<p>If you want to break up a single line into multiple lines you can finish a line with the <code>\</code> character which means the current line effectively continues from the first non-whitespace character of the next line.  This visually <em>appears</em> violate the usual whitespace rules but is legal.</p>

<p>My advice: don't use tabs if you are having tab/space confusion.  Use spaces, and choose either 2 or 3 spaces as your indent level.  </p>

<p>A good editor will make it so you don't have to worry about this. (python-mode for <a href=""http://www.gnu.org/software/emacs/"" rel=""nofollow"">emacs,</a> for example, you can just use the tab key and it will keep you honest).</p>
"
63196,NA,2008-09-15T14:06:46Z,63086,2,"<p>It's possible to write a pre-processor which takes randomly-indented code with pseudo-python keywords like ""endif"" and ""endwhile"" and properly indents things. I had to do this when using python as an ""ASP-like"" language, because the whole notion of ""indentation"" gets a bit fuzzy in such an environment.</p>

<p>Of course, even with such a thing you really ought to indent sanely, at which point the conveter becomes superfluous.</p>
"
63216,7432,2008-09-15T14:09:10Z,63086,2,"<p>I agree with justin and others -- pick a good editor and use spaces rather than tabs for indentation and the whitespace thing becomes a non-issue.  I only recently started using Python, and while I thought the whitespace issue would be a real annoyance it turns out to not be the case. For the record I'm using emacs though I'm sure there are other editors out there that do an equally fine job.</p>

<p>If you're really dead-set against it, you can always pass your scripts through a pre-processor but that's a bad idea on many levels. If you're going to learn a language, embrace the features of that language rather than try to work around them. Otherwise, what's the point of learning a new language?</p>
"
63289,7706,2008-09-15T14:16:37Z,63086,1,"<p>Getting your indentation to work correctly is going to be important in any language you use. </p>

<p>Even though it won't affect the execution of the program in most other languages, incorrect indentation can be very confusing for anyone trying to read your program, so you need to invest the time in figuring out how to configure your editor to align things correctly.</p>

<p>Python is pretty liberal in how it lets you indent. You can pick between tabs and spaces (but you really should use spaces) and can pick how many spaces. The only thing it requires is that you are consistent which ultimately is important no matter what language you use.</p>
"
63357,5661,2008-09-15T14:22:30Z,63086,4,"<blockquote>
  <p>I'm currently using NotePad++. Is
  there maybe an IDE that would take
  care of the tabs and indenting?</p>
</blockquote>

<p>I liked <a href=""http://pydev.sourceforge.net/"" rel=""nofollow"">pydev</a> extensions of eclipse for that.</p>
"
63403,7666,2008-09-15T14:28:27Z,63086,2,"<p>Tabs and spaces confusion can be fixed by setting your editor to use spaces instead of tabs. </p>

<p>To make whitespace completely intuitive, you can use a stronger code editor or an IDE (though you don't need a full-blown IDE if all you need is proper automatic code indenting). </p>

<p>A list of editors can be found in the Python wiki, though that one is a bit too exhausting: 
- <a href=""http://wiki.python.org/moin/PythonEditors"" rel=""nofollow"">http://wiki.python.org/moin/PythonEditors</a></p>

<p>There's already a question in here which tries to slim that down a bit: </p>

<ul>
<li><a href=""http://stackoverflow.com/questions/60784/poll-which-python-ideeditor-is-the-best"">http://stackoverflow.com/questions/60784/poll-which-python-ideeditor-is-the-best</a></li>
</ul>

<p>Maybe you should add a more specific question on that: ""Which Python editor or IDE do you prefer on Windows - and why?""</p>
"
63450,7237,2008-09-15T14:34:34Z,63086,0,"<p>I was a bit reluctant to learn Python because of tabbing. However, I almost didn't notice it when I used Vim.</p>
"
63528,4702,2008-09-15T14:43:01Z,61605,0,"<p>It's fine to return multiple values using a tuple for simple functions such as <code>divmod</code>. If it makes the code readable, it's Pythonic.</p>

<p>If the return value starts to become confusing, check whether the function is doing too much and split it if it is. If a big tuple is being used like an object, make it an object. Also, consider using <a href=""http://code.activestate.com/recipes/500261/"" rel=""nofollow"">named tuples</a>, which will be part of the standard library in Python 2.6.</p>
"
63549,7706,2008-09-15T14:46:06Z,61605,1,"<p>It's definitely pythonic. The fact that you can return multiple values from a function the boilerplate you would have in a language like C where you need to define a struct for every combination of types you return somewhere.</p>

<p>However, if you reach the point where you are returning something crazy like 10 values from a single function, you should seriously consider bundling them in a class because at that point it gets unwieldy.</p>
"
63606,157,2008-09-15T14:52:58Z,63488,1,"<p>Take a look at the hgweb stuff. You can set up RSS feeds and see all the revisions, et cetera.</p>
"
63635,7706,2008-09-15T14:56:01Z,61517,10,"<blockquote>
  <p>To build a dictionary from an arbitrary <i>object</i>, it's sufficient to use <code>__dict__</code>.</p>
</blockquote>

<p>This misses attributes that the object inherits from its class. For example,</p>

<pre><code>class c(object):
    x = 3
a = c()
</code></pre>

<p>hasattr(a, 'x') is true, but 'x' does not appear in a.__dict__</p>
"
63636,8019,2008-09-15T14:56:06Z,63488,2,"<p>I really enjoy what I did with my custom hook.  I have it post a message to my campfire account (campfire is a group based app).  It worked out really well. Because I had my clients in there and it could show him my progress.</p>
"
63645,7779,2008-09-15T14:56:35Z,61151,0,"<p>When writing a package called ""foo"", I will put unit tests into a separate package ""foo_test"". Modules and subpackages will then have the same name as the SUT package module. E.g. tests for a module foo.x.y are found in foo_test.x.y. The __init__.py files of each testing package then contain an AllTests suite that includes all test suites of the package. setuptools provides a convenient way to specify the main testing package, so that after ""python setup.py develop"" you can just use ""python setup.py test"" or ""python setup.py test -s foo_test.x.SomeTestSuite"" to the just a specific suite.</p>
"
63767,8002,2008-09-15T15:10:03Z,63681,0,"<p>Threads by definition are part of the same process.  If you want them to keep running, they need to be forked off into a new process; see os.fork() and friends.</p>

<p>You'll probably want the new process to end (via exit() or the like) immediately after spawning the script.</p>
"
63794,6267,2008-09-15T15:12:27Z,63681,0,"<p>If a process dies all it's threads die with it, so a solution might be a separate process.</p>

<p>See if creating a xmlrpc server might help you, that is a simple solution for interprocess communication.</p>
"
63809,4421,2008-09-15T15:14:04Z,61605,1,"<p>Returning a tuple is cool. Also note the new namedtuple
which was added in python 2.6 which may make this more palatable for you:
<a href=""http://docs.python.org/dev/library/collections.html#collections.namedtuple"" rel=""nofollow"">http://docs.python.org/dev/library/collections.html#collections.namedtuple</a></p>
"
63819,8140,2008-09-15T15:15:07Z,63086,2,"<p>I find it hard to understand when people flag this as a problem with Python. I took to it immediately and actually find it's one of my favourite 'features' of the language :)</p>

<p>In other languages I have two jobs:
1. Fix the braces so the computer can parse my code
2. Fix the indentation so I can parse my code.</p>

<p>So in Python I have half as much to worry about ;-)</p>

<p>(nb the only time I ever have problem with indendation is when Python code is in a blog and a forum that messes with the white-space but this is happening less and less as the apps get smarter)</p>
"
63943,7779,2008-09-15T15:28:30Z,51412,2,"<p>As an aside: When using functions instead of methods, you could also use functools.partial:</p>

<pre><code>import functools

def foo(arg, **kwargs):
    ...

bar = functools.partial(foo, ""argvalue"")
</code></pre>

<p>The last line will define a function ""bar"" that, when called, will call foo with the first argument set to ""argvalue"" and all other functions just passed on:</p>

<pre><code>bar(5, myarg=""value"")
</code></pre>

<p>will call</p>

<pre><code>foo(""argvalue"", 5, myarg=""value"")
</code></pre>

<p>Unfortunately that will not work with methods.</p>
"
63956,7458,2008-09-15T15:29:29Z,63086,1,"<p>If you're looking for a recommendation for a Python IDE, after extensive research, I've been most happy with Wing Software's WingIDE:</p>

<p><a href=""http://www.wingware.com/products"" rel=""nofollow"">http://www.wingware.com/products</a></p>

<p>There is a free trial version, so you have nothing to lose.  It supports all the major OSes, and is only about $60 for the full version.</p>

<p>I also like SciTE a lot, which is totally free, free, free!</p>

<p><a href=""http://scintilla.sourceforge.net/SciTEDownload.html"" rel=""nofollow"">http://scintilla.sourceforge.net/SciTEDownload.html</a></p>
"
64110,6592,2008-09-15T15:47:23Z,61605,3,"<p>Yes, returning multiple values (i.e., a tuple) is definitely pythonic.  As others have pointed out, there are plenty of examples in the Python standard library, as well as in well-respected Python projects.  Two additional comments:</p>

<ol>
<li>Returning multiple values is sometimes very, very useful.  Take, for example, a method that optionally handles an event (returning some value in doing so) and also returns success or failure.  This might arise in a chain of responsibility pattern.  In other cases, you want to return multiple, closely linked pieces of data---as in the example given.  In this setting, returning multiple values is akin to returning a single instance of an anonymous class with several member variables.</li>
<li><p>Python's handling of method arguments necessitates the ability to directly return multiple values.  In C++, for example, method arguments can be passed by reference, so you can assign output values to them, in addition to the formal return value.  In Python, arguments are passed ""by reference"" (but in the sense of Java, not C++).  You can't assign new values to method arguments and have it reflected outside method scope.  For example:</p>

<pre><code>// C++
void test(int&amp; arg)
{
    arg = 1;
}

int foo = 0;
test(foo); // foo is now 1!
</code></pre>

<p>Compare with:</p>

<pre><code># Python
def test(arg):
    arg = 1

foo = 0
test(foo) # foo is still 0
</code></pre></li>
</ol>
"
64130,7980,2008-09-15T15:49:50Z,44834,483,"<p>Linked to, but not explicitly mentioned here, is exactly when <code>__all__</code> is used. It is a list of strings defining what symbols in a module will be exported when <code>from &lt;module&gt; import *</code> is used on the module.</p>

<p>For example, the following code in a <code>foo.py</code> explicitly exports the symbols <code>bar</code> and <code>baz</code>:</p>

<pre><code>__all__ = ['bar', 'baz']

waz = 5
bar = 10
def baz(): return 'baz'
</code></pre>

<p>These symbols can then be imported like so:</p>

<pre><code>from foo import *

print bar
print baz

# The following will trigger an exception, as ""waz"" is not exported by the module
print waz
</code></pre>

<p>If the <code>__all__</code> above is commented out, this code will then execute to completion, as the default behaviour of <code>import *</code> is to import all symbols that do not begin with an underscore, from the given namespace.</p>

<p>Reference: <a href=""https://docs.python.org/3.5/tutorial/modules.html#importing-from-a-package"">https://docs.python.org/3.5/tutorial/modules.html#importing-from-a-package</a></p>

<p><strong>NOTE:</strong> <code>__all__</code> affects the <code>from &lt;module&gt; import *</code> behavior only. Members that are not mentioned in <code>__all__</code> are still accessible from outside the module and can be imported with <code>from &lt;module&gt; import &lt;member&gt;</code>.</p>
"
64163,1384652,2008-09-15T15:54:52Z,64141,5,"<p>A class is a template, it allows you to create a blueprint, you can then have multiple instances of a class each with different numbers, like so.</p>

<pre><code>class dog(object):
	def __init__(self, height, width, lenght):
		self.height = height
		self.width = width
		self.length = length

	def revert(self):
		self.height = 1
		self.width = 2
		self.length = 3

dog1 = dog(5, 6, 7)
dog2 = dog(2, 3, 4)

dog1.revert()
</code></pre>
"
64186,8206,2008-09-15T15:57:56Z,63086,0,"<p>Many Python IDEs and generally-capable text/source editors can handle the whitespace for you.</p>

<p>However, it is best to just ""let go"" and enjoy the whitespace rules of Python. With some practice, they won't get into your way at all, and you will find they have many merits, the most important of which are:</p>

<ol>
<li>Because of the forced whitespace, Python code is simpler to understand. You will find that as you read code written by others, it is easier to grok than code in, say, Perl or PHP.</li>
<li>Whitespace saves you quite a few keystrokes of control characters like { and }, which litter code written in C-like languages. Less {s and }s means, among other things, less RSI and wrist pain. This is not a matter to take lightly.</li>
</ol>
"
64195,8420,2008-09-15T15:59:11Z,64141,1,"<p>Classes don't have values. Objects do. Is what you want basically a class that can reset an instance (object) to a set of default values? </p>

<p>How about just providing a reset method, that resets the properties of your object to whatever is the default?</p>

<p>I think you should simplify your question, or tell us what you really want to do. It's not at all clear.</p>
"
64206,8393,2008-09-15T16:00:31Z,64141,1,"<p>I think you are confused. You should re-check the meaning of ""class"" and ""instance"".</p>

<p>I think you are trying to first declare a Instance of a certain Class, and then declare a instance of other Class, use the data from the first one, and then find a way to convert the data in the second instance and use it on the first instance...</p>

<p>I recommend that you use operator overloading to assign the data.</p>
"
64216,8433,2008-09-15T16:01:20Z,64141,1,"<pre><code>class ABC(self):
   numbers = [0,1,2,3]

class DEF(ABC):
   def __init__(self):
      self.new_numbers = super(ABC,self).numbers

   def setnums(self, numbers):
      self.new_numbers = numbers

   def getnums(self):
     return self.new_numbers

   def reset(self):
     __init__()
</code></pre>
"
64266,NA,2008-09-15T16:07:04Z,60848,0,"<p>if you don't need the dict functionality, and only need to return tuples in the order you've inserted them, wouldn't a queue work better?</p>
"
64308,7829,2008-09-15T16:12:39Z,64237,7,"<p>I tend to create new applications for each logically separate set of models. e.g.:</p>

<ul>
<li>User Profiles</li>
<li>Forum Posts</li>
<li>Blog posts</li>
</ul>
"
64356,3926,2008-09-15T16:18:30Z,63086,3,"<p><a href=""http://timhatch.com/projects/pybraces/"" rel=""nofollow"">pybraces</a></p>

<p>It's unsupported.</p>
"
64399,7829,2008-09-15T16:24:30Z,64141,1,"<p>Just FYI, here's an alternate implementation... Probably violates about 15 million pythonic rules, but I publish it per information/observation:</p>

<pre><code>class Resettable(object):
    base_dict = {}
    def reset(self):
            self.__dict__ = self.__class__.base_dict

    def __init__(self):
            self.__dict__ = self.__class__.base_dict.copy()

class SomeClass(Resettable):
    base_dict = {
            'number_one': 1,
            'number_two': 2,
            'number_three': 3,
            'number_four': 4,
            'number_five': 5,
    }
    def __init__(self):
            Resettable.__init__(self)


p = SomeClass()
p.number_one = 100
print p.number_one
p.reset()
print p.number_one
</code></pre>
"
64464,8290,2008-09-15T16:32:07Z,64237,11,"<p>I prefer to think of Django applications as reusable modules or components than as ""applications"". </p>

<p>This helps me encapsulate and decouple certain features from one another, improving re-usability should I decide to share a particular ""app"" with the community at large, and maintainability.</p>

<p>My general approach is to bucket up specific features or feature sets into ""apps"" as though I were going to release them publicly. The hard part here is figuring out how big each bucket is. </p>

<p>A good trick I use is to imagine how my apps would be used if they were released publicly. This often encourages me to shrink the buckets and more clearly define its ""purpose"".</p>
"
64471,7829,2008-09-15T16:33:05Z,64426,5,"<p><a href=""http://pyro.sf.net"">Pyro</a> (Python Remote Objects) is fairly clever if all your server/clients are going to be in Python. I use <a href=""http://www.xmpp.org"">XMPP</a> alot though since I'm communicating with hosts that are not always Python. XMPP lends itself to being extended fairly easily too.</p>

<p>There is an excellent XMPP library for python called <a href=""http://pyxmpp.jajcus.net"">PyXMPP</a> which is reasonably up to date and has no dependancy on Twisted.</p>
"
64486,7829,2008-09-15T16:34:29Z,510348,330,"<p>You can use the sleep() function in the time module. It can take a float argument for sub second resolution.</p>

<pre><code>from time import sleep
sleep(0.1) # Time in seconds.
</code></pre>
"
64487,4945,2008-09-15T16:34:45Z,64426,1,"<p>I'd use http and start with understanding what the Python <a href=""http://docs.python.org/lib/asyncore-example.html"" rel=""nofollow"">library</a> offers. </p>

<p>Then I'd move onto the more industrial strength <a href=""http://wiki.python.org/moin/Twisted-Examples"" rel=""nofollow"">Twisted</a> library.</p>
"
64489,4702,2008-09-15T16:34:53Z,64426,3,"<p><a href=""http://www.ietf.org/rfc/rfc2616.txt"" rel=""nofollow"">HTTP</a> seems to suit your requirements and is very well supported in Python. </p>

<p><a href=""http://twistedmatrix.com/"" rel=""nofollow"">Twisted</a> is good for serious asynchronous network programming in Python, but it has a steep learning curve, so it might be worth using something simpler unless you know your system will need to handle a lot of concurrency.</p>

<p>To start, I would suggest using <a href=""http://www.python.org/doc/lib/module-urllib2.html"" rel=""nofollow""><code>urllib</code></a> for the client and a <a href=""http://code.google.com/p/modwsgi/"" rel=""nofollow"">WSGI service behind Apache</a> for the server. Apache can be set up to deal with HTTPS fairly simply.</p>
"
64492,8570,2008-09-15T16:35:16Z,64237,25,"<p>James Bennett has a wonderful <a href=""http://www.b-list.org/weblog/2008/mar/15/slides/"" rel=""nofollow"">set of slides</a> on how to organize reusable apps in Django.</p>
"
64554,8002,2008-09-15T16:43:36Z,64505,6,"<p>The main gotcha I see is that you're not handling any errors: .login() and .sendmail() both have documented exceptions that they can throw, and it seems like .connect() must have some way to indicate that it was unable to connect - probably an exception thrown by the underlying socket code.</p>
"
64572,8450,2008-09-15T16:45:13Z,64426,-1,"<p>In the RPC field, Json-RPC will bring a big performance improvement over xml-rpc: 
<a href=""http://json-rpc.org/wiki/python-json-rpc"" rel=""nofollow"">http://json-rpc.org/wiki/python-json-rpc</a></p>
"
64580,3978,2008-09-15T16:46:00Z,64505,3,"<p>You should make sure you format the date in the correct format - <a href=""http://www.faqs.org/rfcs/rfc2822.html"" rel=""nofollow"">RFC2822</a>.</p>
"
64673,5987,2008-09-15T16:55:57Z,64505,5,"<p>Make sure you don't have any firewalls blocking SMTP.  The first time I tried to send an email, it was blocked both by Windows Firewall and McAfee - took forever to find them both.</p>
"
64690,8675,2008-09-15T16:58:29Z,64426,0,"<p>XMLRPC is very simple to get started with, and at my previous job, we used it extensively for intra-node communication in a distributed system. As long as you keep track of the fact that the None value can't be easily transferred, it's dead easy to work with, and included in Python's standard library. </p>

<p>Run it over https and add a username/password parameter to all calls, and you'll have simple security in place. Not sure about how easy it is to verify server certificate in Python, though.</p>

<p>However, if you are transferring large amounts of data, the coding into XML might become a bottleneck, so using a <a href=""http://sv.wikipedia.org/wiki/REST"" rel=""nofollow"">REST</a>-inspired architecture over https may be as good as xmlrpclib.</p>
"
64756,NA,2008-09-15T17:06:26Z,60208,-1,"<p>The switch statement is just syntactical sugar which is probably why Python doesn't have it. You can use if else statements for this functionality easily.</p>

<p>Like Matthew Schinckel said, you can use if and elif and else.</p>

<p>It is also a simple matter to have ""fall-through"" capabilities like most switch statements. All you have to do is not  use elif.</p>

<pre><code>if x == 1:
    # 1
if x == 2:
    # fall-through
elif x == 3:
    # not fall-through
</code></pre>
"
64890,8935,2008-09-15T17:24:40Z,64505,74,"<p>The script I use is quite similar; I post it here as an example of how to use the email.* modules to generate MIME messages; so this script can be easily modified to attach pictures, etc.</p>

<p>I rely on my ISP to add the date time header.</p>

<p>My ISP requires me to use a secure smtp connection to send mail, I rely on the ssmtplib module (downloadable at <a href=""http://www1.cs.columbia.edu/~db2501/ssmtplib.py"" rel=""nofollow"">http://www1.cs.columbia.edu/~db2501/ssmtplib.py</a>)</p>

<p>As in your script, the username and password, (given dummy values below), used to authenticate on the SMTP server, are in plain text in the source. This is a security weakness; but the best alternative depends on how careful you need (want?) to be about protecting these.</p>

<p>=======================================</p>

<pre><code>#! /usr/local/bin/python


SMTPserver = 'smtp.att.yahoo.com'
sender =     'me@my_email_domain.net'
destination = ['recipient@her_email_domain.com']

USERNAME = ""USER_NAME_FOR_INTERNET_SERVICE_PROVIDER""
PASSWORD = ""PASSWORD_INTERNET_SERVICE_PROVIDER""

# typical values for text_subtype are plain, html, xml
text_subtype = 'plain'


content=""""""\
Test message
""""""

subject=""Sent from Python""

import sys
import os
import re

from smtplib import SMTP_SSL as SMTP       # this invokes the secure SMTP protocol (port 465, uses SSL)
# from smtplib import SMTP                  # use this for standard SMTP protocol   (port 25, no encryption)

# old version
# from email.MIMEText import MIMEText
from email.mime.text import MIMEText

try:
    msg = MIMEText(content, text_subtype)
    msg['Subject']=       subject
    msg['From']   = sender # some SMTP servers will do this automatically, not all

    conn = SMTP(SMTPserver)
    conn.set_debuglevel(False)
    conn.login(USERNAME, PASSWORD)
    try:
        conn.sendmail(sender, destination, msg.as_string())
    finally:
        conn.quit()

except Exception, exc:
    sys.exit( ""mail failed; %s"" % str(exc) ) # give a error message
</code></pre>
"
64899,NA,2008-09-15T17:25:34Z,63086,0,"<p>In Python, indentation is a semantic element as well as providing visual grouping for readability.</p>

<p>Both space and tab can indicate indentation. This is unfortunate, because:</p>

<ul>
<li><p>The interpretation(s) of a tab varies
among editors and IDEs and is often
configurable (and often configured).</p></li>
<li><p>OTOH, some editors are not
configurable but apply their own
rules for indentation.</p></li>
<li><p>Different sequences of
spaces and tabs may be visually
indistinguishable.</p></li>
<li><p>Cut and pastes can alter whitespace.</p></li>
</ul>

<p>So, unless you know that a given piece of code will only be modified by yourself with a single tool and an unvarying config, you must avoid tabs for indentation (configure your IDE) and make sure that you are warned if they are introduced (search for tabs in leading whitespace).</p>

<p>And you can still expect to be bitten now and then, as long as arbitrary semantics are applied to control characters.</p>
"
64983,7182,2008-09-15T17:35:44Z,55391,18,"<p>I agree with Vinko <a href=""http://www.crummy.com/software/BeautifulSoup/"">BeautifulSoup</a> is the way to go. However I suggest using <code>fooId['value']</code> to <a href=""http://www.crummy.com/software/BeautifulSoup/documentation.html#The%20attributes%20of%20Tags"">get the attribute</a> rather than relying on value being the third attribute.</p>

<pre><code>from BeautifulSoup import BeautifulSoup
#Or retrieve it from the web, etc.
html_data = open('/yourwebsite/page.html','r').read()
#Create the soup object from the HTML data
soup = BeautifulSoup(html_data)
fooId = soup.find('input',name='fooId',type='hidden') #Find the proper tag
value = fooId['value'] #The value attribute
</code></pre>
"
65122,2260,2008-09-15T17:53:33Z,65076,42,"<p>I use this on my macbook:</p>

<pre><code>"" configure expanding of tabs for various file types
au BufRead,BufNewFile *.py set expandtab
au BufRead,BufNewFile *.c set noexpandtab
au BufRead,BufNewFile *.h set noexpandtab
au BufRead,BufNewFile Makefile* set noexpandtab

"" --------------------------------------------------------------------------------
"" configure editor with tabs and nice stuff...
"" --------------------------------------------------------------------------------
set expandtab           "" enter spaces when tab is pressed
set textwidth=120       "" break lines when line length increases
set tabstop=4           "" use 4 spaces to represent tab
set softtabstop=4
set shiftwidth=4        "" number of spaces to use for auto indent
set autoindent          "" copy indent from current line when starting a new line

"" make backspaces more powerfull
set backspace=indent,eol,start

set ruler                           "" show line and column number
syntax on   			"" syntax highlighting
set showcmd 			"" show (partial) command in status line
</code></pre>

<p>(edited to only show stuff related to indent / tabs)</p>
"
65255,NA,2008-09-15T18:08:41Z,44778,2,"<pre><code>l=['a', 1, 'b', 2]

print str(l)[1:-1]

Output: ""'a', 1, 'b', 2""
</code></pre>
"
65326,9212,2008-09-15T18:15:46Z,60848,4,"<p>I've used StableDict before with good success.</p>

<p><a href=""http://pypi.python.org/pypi/StableDict/0.2"" rel=""nofollow"">http://pypi.python.org/pypi/StableDict/0.2</a></p>
"
65333,6267,2008-09-15T18:16:24Z,65266,2,"<p>Note that each module initializes itself only once during the life of an app, no matter how many times you import it. So if you compile your expressions at the module's global scope (ie. not in a function) you should be fine.</p>
"
65440,3560,2008-09-15T18:29:51Z,65266,12,"<blockquote>
  <p>Is it possible to store these regular expressions in a cache on disk in a pre-compiled manner to avoid having to execute the regex compilations on each import?</p>
</blockquote>

<p>Not easily. You'd have to write a custom serializer that hooks into the C <code>sre</code> implementation of the Python regex engine. Any performance benefits would be vastly outweighed by the time and effort required.</p>

<p>First, have you actually profiled the code? I doubt that compiling regexes is a significant part of the application's run-time. Remember that they are only compiled the first time the module is imported in the current execution -- thereafter, the module and its attributes are cached in memory.</p>

<p>If you have a program that basically spawns once, compiles a bunch of regexes, and then exits, you could try re-engineering it to perform multiple tests in one invocation. Then you could re-use the regexes, as above.</p>

<p>Finally, you could compile the regexes into C-based state machines and then link them in with an extension module. While this would likely be more difficult to maintain, it would eliminate regex compilation entirely from your application.</p>
"
65579,1447,2008-09-15T18:45:37Z,65266,-1,"<p>It's possible to place each regex (or group of regexs) into a separate file and then dynamically import the file that you need using the imp module.  I doubt that it scales very well but it could be what you need.</p>
"
65682,7851,2008-09-15T18:57:29Z,65400,2,"<p>I think what you want to do is this:</p>

<pre><code>&gt;&gt;&gt; class Foo():
...   def __init__(self, x):
...     self.x = x
... 
&gt;&gt;&gt; def bar(self):
...   print 'bar:', self.x
... 
&gt;&gt;&gt; bar.func_name = 'foobar'
&gt;&gt;&gt; Foo.foobar = bar
&gt;&gt;&gt; f = Foo(12)
&gt;&gt;&gt; f.foobar()
bar: 12
&gt;&gt;&gt; f.foobar.func_name
'foobar'
</code></pre>

<p>Now you are free to pass <code>Foo</code>s to a library that expects <code>Foo</code> instances to have a method named <code>foobar</code>.</p>

<p>Unfortunately, (1) I don't know how to use metaclasses and (2) I'm not sure I read your question correctly, but I hope this helps. </p>

<p>Note that <code>func_name</code> is only assignable in Python 2.4 and higher.</p>
"
65716,2603,2008-09-15T19:01:27Z,65400,10,"<p>Try dynamically extending the bases that way you can take advantage of the mro and the methods are actual methods:</p>

<pre><code>class Parent(object):
    def bar(self):
        print ""bar""

class MetaFoo(type):
    def __new__(cls, name, bases, dict):
    	return type(name, (Parent,) + bases, dict)

class Foo(object):
    __metaclass__ = MetaFoo

if __name__ == ""__main__"":
    f = Foo()
    f.bar()
    print f.bar.func_name
</code></pre>
"
65757,2153,2008-09-15T19:05:12Z,63681,2,"<p>Python has its own threading module that comes standard, if it helps. You can create thread objects using the threading module.</p>

<p><a href=""http://docs.python.org/lib/module-threading.html"" rel=""nofollow"">threading Documentation</a></p>

<p><a href=""http://docs.python.org/lib/module-thread.html"" rel=""nofollow"">thread Documentation</a></p>

<p>The thread module offers low level threading and synchronization using simple Lock objects.</p>

<p>Again, not sure if this helps since you're using Python under a Delphi environment.</p>
"
65771,391806,2008-09-15T19:07:07Z,63086,0,"<p>The real answer to your question is that if you are going to use the language you need to learn its syntax.  Just as an error in indenting python can generate a compiler error, an error using braces in various other languages can also generate a compiler error.</p>

<p>Even worse it can be silently misinterpreted by the compiler to do the wrong thing.   This is particularly dangerous when the indenting doesn't match the desired meaning. I.e. in many other languages:</p>

<pre><code>If(first condition)
   if (second condition)
      do something interesting;
else
  do something different;
</code></pre>

<p>Will lead to unpleasant surprises.</p>

<p>Python forces you to write code that <em>looks</em> like what it does.  This is a good thing for other programmers who have to read your code, or for you when you try to read your own code after a month or so.</p>
"
65844,825,2008-09-15T19:14:24Z,65266,0,"<p>The <a href=""http://docs.python.org/lib/module-shelve.html"" rel=""nofollow"">shelve</a> module appears to work just fine:</p>

<pre><code>
import re
import shelve
a_pattern = ""a.*b""
b_pattern = ""c.*d""
a = re.compile(a_pattern)
b = re.compile(b_pattern)

x = shelve.open('re_cache')
x[a_pattern] = a
x[b_pattern] = b
x.close()

# ...
x = shelve.open('re_cache')
a = x[a_pattern]
b = x[b_pattern]
x.close()

</code></pre>

<p>You can then make a nice wrapper class that automatically handles the caching for you so that it becomes transparent to the user... an exercise left to the reader.</p>
"
65903,8272,2008-09-15T19:20:15Z,49307,12,"<p>If x and y are column vectors, you can do:</p>

<pre><code>for i=[x';y']
# do stuff with i(1) and i(2)
end
</code></pre>

<p>(with row vectors, just use <code>x</code> and <code>y</code>).</p>

<p>Here is an example run:</p>

<pre class=""lang-matlab prettyprint-override""><code>&gt;&gt; x=[1 ; 2; 3;]

x =

     1
     2
     3

&gt;&gt; y=[10 ; 20; 30;]

y =

    10
    20
    30

&gt;&gt; for i=[x';y']
disp(['size of i = ' num2str(size(i)) ', i(1) = ' num2str(i(1)) ', i(2) = ' num2str(i(2))])
end
size of i = 2  1, i(1) = 1, i(2) = 10
size of i = 2  1, i(1) = 2, i(2) = 20
size of i = 2  1, i(1) = 3, i(2) = 30
&gt;&gt; 
</code></pre>
"
65924,8458,2008-09-15T19:22:37Z,60649,42,"<p>In terms of speed, the best cross-platform IPC mechanism will be pipes.  That assumes, however, that you want cross-platform IPC on the same machine.  If you want to be able to talk to processes on remote machines, you'll want to look at using sockets instead.  Luckily, if you're talking about TCP at least, sockets and pipes behave pretty much the same behavior.  While the APIs for setting them up and connecting them are different, they both just act like streams of data.</p>

<p>The difficult part, however, is not the communication channel, but the messages you pass over it.  You really want to look at something that will perform verification and parsing for you.  I recommend looking at Google's <a href=""http://code.google.com/apis/protocolbuffers/docs/overview.html"">Protocol Buffers</a>. You basically create a spec file that describes the object you want to pass between processes, and there is a compiler that generates code in a number of different languages for reading and writing objects that match the spec.  It's much easier (and less bug prone) than trying to come up with a messaging protocol and parser yourself.</p>
"
65991,372664,2008-09-15T19:31:43Z,60848,5,"<p>Or, just make the key a tuple with time.now() as the first field in the tuple.</p>

<p>Then you can retrieve the keys with dictname.keys(), sort, and voila!</p>

<p>Gerry</p>
"
66069,2193,2008-09-15T19:39:28Z,60649,4,"<p>If you're willing to try something a little different, there's the <a href=""http://zeroc.com/ice.html"" rel=""nofollow"">ICE</a> platform from <a href=""http://zeroc.com"" rel=""nofollow"">ZeroC</a>. It's open source, and is supported on pretty much every OS you can think of, as well as having language support for C++, C#, Java, Ruby, Python and PHP. Finally, it's very easy to drive (the language mappings are tailored to fit naturally into each language). It's also fast and efficient. There's even a cut-down version for devices.</p>
"
66440,2351,2008-09-15T20:09:09Z,61781,1,"<p>I don't believe that VBScript as hosted by IIS has any way of executing an external process.  If you are using python as an AXscripting engine then you could just use the sys module.  If the script you're calling is actually meant to be a cgi script you'll have to mimic all the environment variables that the cgi uses.  The alternative is to put the script on the python path, import it and hope that it is modular enough that you can call the pieces you need and bypass the cgi handling code.</p>
"
66666,9951,2008-09-15T20:34:12Z,65266,-1,"<p>Hum,</p>

<p>Doesn't shelve use pickle ?</p>

<p>Anyway, I agree with the previous anwsers. Since a module is processed only once, I doubt compiling regexps will be your app bottle neck. And Python re module is wicked fast since it's coded in C :-)</p>

<p>But the good news is that Python got a nice community, so I am sure you can find somebody currently hacking just what you need.</p>

<p>I googled 5 sec and found : <a href=""http://home.gna.org/oomadness/en/cerealizer/index.html"" rel=""nofollow"">http://home.gna.org/oomadness/en/cerealizer/index.html</a>.</p>

<p>Don't know if it will do it but if not, good luck in you research :-)</p>
"
66670,3560,2008-09-15T20:34:53Z,66636,3,"<p>What are you trying to accomplish? If I saw such a construct in live Python code, I would consider beating the original programmer.</p>
"
66818,3363,2008-09-15T20:50:36Z,65076,2,"<p>Ensure you are editing the correct configuration file for VIM. Especially if you are using windows, where the file could be named _vimrc instead of .vimrc as on other platforms.</p>

<p>In vim type</p>

<p><code>:help vimrc</code></p>

<p>and check your path to the _vimrc/.vimrc file with</p>

<p><code>:echo $HOME</code></p>

<p><code>:echo $VIM</code></p>

<p>Make sure you are only using one file. If you want to split your configuration into smaller chunks you can source other files from inside your _vimrc file.</p>

<p><code>:help source</code></p>
"
66846,NA,2008-09-15T20:53:14Z,65266,0,"<p>Open /usr/lib/python2.5/re.py and look for ""def _compile"". You'll find re.py's internal cache mechanism. </p>
"
66847,9493,2008-09-15T20:53:20Z,66636,3,"<p>I'm also not entirely sure what the exact behaviour you want is, but assuming its that you want bar.meth1(42) to be equivalent to foo.meth1 being a classmethod of bar (with ""self"" being the class), then you can acheive this with:</p>

<pre><code>def convert_to_classmethod(method):
    return classmethod(method.im_func)

class bar(foo):
    meth1 = convert_to_classmethod(foo.meth1)
</code></pre>

<p>The problem with classmethod(foo.meth1) is that foo.meth1 has already been converted to a method, with a special meaning for the first parameter.  You need to undo this and look at the underlying function object, reinterpreting what ""self"" means.</p>

<p>I'd also caution that this is a pretty odd thing to do, and thus liable to cause confusion to anyone reading your code.  You are probably better off thinking through a different solution to your problem.</p>
"
66883,7779,2008-09-15T20:57:10Z,66730,4,"<p>Here is how:</p>

<pre><code>import gobject

class MyGObjectClass(gobject.GObject):
    ...

gobject.signal_new(""signal-name"", MyGObjectClass, gobject.SIGNAL_RUN_FIRST,
    None, (str, int))
</code></pre>

<p>Where the second to last argument is the return type and the last argument is a tuple of argument types.</p>
"
66924,182896,2008-09-15T21:01:02Z,64185,2,"<p>After a brief amount of Googling, I found nothing that looks like a wrapper for this API, but I'm not quite sure if a wrapper is what is necessary for GeoPlanet.  </p>

<p>According to Yahoo's <a href=""http://developer.yahoo.com/geo/guide/api_docs.html#api_overview"" rel=""nofollow"">documentation</a> for GeoPlanet, requests are made in the form of an HTTP GET messages which can very easily be made using Python's <a href=""http://docs.python.org/lib/module-httplib.html"" rel=""nofollow"">httplib module</a>, and <a href=""http://developer.yahoo.com/geo/guide/response_formats.html"" rel=""nofollow"">responses</a> can take one of several forms including XML and JSON.  Python can very easily parse these formats.  In fact, Yahoo! itself even offers libraries for parsing both <a href=""http://developer.yahoo.com/python/python-xml.html"" rel=""nofollow"">XML</a>  and <a href=""http://developer.yahoo.com/python/python-json.html"" rel=""nofollow"">JSON</a> with Python.  </p>

<p>I know it sounds like a lot of libraries, but all the hard work has already been done for the programmer.  It would just take a little ""gluing together"" and you would have yourself a nice interface to Yahoo! GeoPlanet using the power of Python.</p>
"
66936,NA,2008-09-15T21:02:08Z,66636,0,"<p>The question, as posed, seems quite odd to me: I can't see why anyone would want to do that. It is possible that you are misunderstanding just what a ""classmethod"" is in Python (it's a bit different from, say, a static method in Java).</p>

<p>A normal method is more-or-less just a function which takes as its first argument (usually called ""self""), an instance of the class, and which is invoked as ""."".</p>

<p>A classmethod is more-or-less just a function which takes as its first argument (often called ""cls""), a class, and which can be invoked as ""."" OR as ""."".</p>

<p>With this in mind, and your code shown above, what would you expect to have happen if someone creates an instance of bar and calls meth1 on it?</p>

<pre><code>bar1 = bar()
bar1.meth1(""xyz"")
</code></pre>

<p>When the code to meth1 is called, it is passed two arguments 'self' and 'val'. I guess that you expect ""xyz"" to be passed for 'val', but what are you thinking gets passed for 'self'? Should it be the bar1 instance (in this case, no override was needed)? Or should it be the class bar (what then would this code DO)?</p>
"
66967,10077,2008-09-15T21:05:57Z,61605,1,"<p>I'm fairly new to Python, but the tuple technique seems very pythonic to me.  However, I've had another idea that may enhance readability.  Using a dictionary allows access to the different values by name rather than position.  For example:</p>

<pre><code>def divide(x, y):
    return {'quotient': x/y, 'remainder':x%y }

answer = divide(22, 7)
print answer['quotient']
print answer['remainder']
</code></pre>
"
67450,293,2008-09-15T22:00:13Z,60208,2,"<p>I would just use if/elif/else statements. I think that it's good enough to replace the switch statement.</p>
"
67477,9555,2008-09-15T22:03:03Z,67454,1,"<p>Can't you just write a link to a ""zip server"" or whatnot?  Why does the zip archive itself need to be served from Django?  A 90's era CGI script to generate a zip and spit it to stdout is really all that's required here, at least as far as I can see.</p>
"
67527,680,2008-09-15T22:09:50Z,67454,6,"<p>Django doesn't directly handle the generation of dynamic content (specifically Zip files). That work would be done by Python's standard library. You can take a look at how to dynamically create a Zip file in Python <a href=""https://docs.python.org/2/library/zipfile.html#zipfile-objects"" rel=""nofollow"">here</a>.</p>

<p>If you're worried about it slowing down your server you can cache the requests if you expect to have many of the same requests. You can use Django's <a href=""http://docs.djangoproject.com/en/dev/topics/cache/#topics-cache"" rel=""nofollow"">cache framework</a> to help you with that.</p>

<p>Overall, zipping files can be CPU intensive but Django shouldn't be any slower than another Python web framework.</p>
"
67532,10042,2008-09-15T22:11:03Z,60649,7,"<p>You might want to try <a href=""http://www.msobczak.com/prog/yami/"">YAMI</a> , it's very simple yet functional, portable and comes with binding to few languages</p>
"
67533,10289,2008-09-15T22:11:12Z,48458,5,"<p>I think the first option is considered the best practice. And make the code folder your first package. The Rietveld project developed by Guido van Rossum is a very good model to learn from. Have a look at it: <a href=""http://code.google.com/p/rietveld"" rel=""nofollow"">http://code.google.com/p/rietveld</a></p>

<p>With regard to Django 1.0, I suggest you start using the Django trunk code instead of the GAE built in django port. Again, have a look at how it's done in Rietveld.</p>
"
67672,10035,2008-09-15T22:37:24Z,67631,3,"<p>I believe you can use <a href=""https://docs.python.org/2/library/imp.html#imp.find_module"" rel=""nofollow""><code>imp.find_module()</code></a> and <a href=""https://docs.python.org/2/library/imp.html#imp.load_module"" rel=""nofollow""><code>imp.load_module()</code></a> to load the specified module.  You'll need to split the module name off of the path, i.e. if you wanted to load <code>/home/mypath/mymodule.py</code> you'd need to do:</p>

<pre><code>imp.find_module('mymodule', '/home/mypath/')
</code></pre>

<p>...but that should get the job done.</p>
"
67692,7779,2008-09-15T22:41:16Z,67631,575,"<p>For Python 3.5+ use:</p>

<pre><code>import importlib.util
spec = importlib.util.spec_from_file_location(""module.name"", ""/path/to/file.py"")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>

<p>For Python 3.3 and 3.4 use:</p>

<pre><code>from importlib.machinery import SourceFileLoader

foo = SourceFileLoader(""module.name"", ""/path/to/file.py"").load_module()
foo.MyClass()
</code></pre>

<p>(Although this has been deprecated in Python 3.4.)</p>

<p>Python 2 use:</p>

<pre><code>import imp

foo = imp.load_source('module.name', '/path/to/file.py')
foo.MyClass()
</code></pre>

<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>

<p>See also. <a href=""http://bugs.python.org/issue21436"">http://bugs.python.org/issue21436</a>.</p>
"
67693,9812,2008-09-15T22:41:24Z,67631,12,"<p>You can use the </p>

<pre><code>load_source(module_name, path_to_file) 
</code></pre>

<p>method from <a href=""https://docs.python.org/library/imp.html"">imp module</a>.</p>
"
67705,10370,2008-09-15T22:43:20Z,67631,2,"<p><strong>Import package modules at runtime (Python recipe)</strong> </p>

<p><a href=""http://code.activestate.com/recipes/223972/"" rel=""nofollow"">http://code.activestate.com/recipes/223972/</a></p>

<pre><code>###################
##                #
## classloader.py #
##                #
###################

import sys, types

def _get_mod(modulePath):
    try:
        aMod = sys.modules[modulePath]
        if not isinstance(aMod, types.ModuleType):
            raise KeyError
    except KeyError:
        # The last [''] is very important!
        aMod = __import__(modulePath, globals(), locals(), [''])
        sys.modules[modulePath] = aMod
    return aMod

def _get_func(fullFuncName):
    """"""Retrieve a function object from a full dotted-package name.""""""

    # Parse out the path, module, and function
    lastDot = fullFuncName.rfind(u""."")
    funcName = fullFuncName[lastDot + 1:]
    modPath = fullFuncName[:lastDot]

    aMod = _get_mod(modPath)
    aFunc = getattr(aMod, funcName)

    # Assert that the function is a *callable* attribute.
    assert callable(aFunc), u""%s is not callable."" % fullFuncName

    # Return a reference to the function itself,
    # not the results of the function.
    return aFunc

def _get_class(fullClassName, parentClass=None):
    """"""Load a module and retrieve a class (NOT an instance).

    If the parentClass is supplied, className must be of parentClass
    or a subclass of parentClass (or None is returned).
    """"""
    aClass = _get_func(fullClassName)

    # Assert that the class is a subclass of parentClass.
    if parentClass is not None:
        if not issubclass(aClass, parentClass):
            raise TypeError(u""%s is not a subclass of %s"" %
                            (fullClassName, parentClass))

    # Return a reference to the class itself, not an instantiated object.
    return aClass


######################
##       Usage      ##
######################

class StorageManager: pass
class StorageManagerMySQL(StorageManager): pass

def storage_object(aFullClassName, allOptions={}):
    aStoreClass = _get_class(aFullClassName, StorageManager)
    return aStoreClass(allOptions)
</code></pre>
"
67708,10322,2008-09-15T22:44:50Z,67631,13,"<p>You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case ""config"".</p>

<p>Messy, but it works.</p>

<pre><code>configfile = '~/config.py'

import os
import sys

sys.path.append(os.path.dirname(os.path.expanduser(configfile)))

import config
</code></pre>
"
67715,70142,2008-09-15T22:46:35Z,67631,8,"<p>Do you mean load or import?</p>

<p>You can manipulate the sys.path list specify the path to your module, then import your module. For example, given a module at:</p>

<pre><code>/foo/bar.py
</code></pre>

<p>You could do:</p>

<pre><code>import sys
sys.path[0:0] = '/foo' # puts the /foo directory at the start of your path
import bar
</code></pre>
"
67743,9567,2008-09-15T22:52:27Z,66730,10,"<p>You can also define signals inside the class definition:</p>

<pre><code>class MyGObjectClass(gobject.GObject):
    __gsignals__ = {
      ""some-signal"": (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, (object, )),
    }
</code></pre>

<p>The contents of the tuple are the the same as the three last arguments to <code>gobject.signal_new</code>.</p>
"
67769,1943957,2008-09-15T22:56:37Z,64237,0,"<p>An 'app' could be many different things, it all really comes down to taste. For example, let's say you are building a blog. Your app could be the entire blog, or you could have an 'admin' app, a 'site' app for all of the public views, an 'rss' app, a 'services' app so developers can interface with the blog in their own ways, etc.</p>

<p>I personally would make the blog itself the app, and break out the functionality within it. The blog could then be reused rather easily in other websites.</p>

<p>The nice thing about Django is that it will recognize any models.py file within any level of your directory tree as a file containing Django models. So breaking your functionality out into smaller 'sub apps' within an 'app' itself won't make anything more difficult.</p>
"
67921,8061,2008-09-15T23:24:55Z,67223,1,"<p>I don't know personally, but I noticed that you haven't posted to <a href=""http://groups.google.com/group/pyglet-users"" rel=""nofollow"">the pyglet mailing list</a> about this. More Pyglet users, as well as the primary developer, read that list.</p>
"
68002,10485,2008-09-15T23:42:29Z,65076,0,"<p>for more advanced python editing consider installing the <a href=""http://eigenclass.org/hiki/simplefold"" rel=""nofollow"">simplefold</a> vim plugin. it allows you do advanced code folding using regular expressions. i use it to fold my class and method definitions for faster editing.</p>
"
68052,8819,2008-09-15T23:53:40Z,63086,1,"<p>If you don't want to use an IDE/text editor with automatic indenting, you can use the pindent.py script that comes in the Tools\Scripts directory. It's a preprocessor that can convert code like:</p>

<pre><code>def foobar(a, b):
if a == b:
a = a+1
elif a &lt; b:
b = b-1
if b &gt; a: a = a-1
end if
else:
print 'oops!'
end if
end def foobar
</code></pre>

<p>into:</p>

<pre><code>def foobar(a, b):
   if a == b:
       a = a+1
   elif a &lt; b:
       b = b-1
       if b &gt; a: a = a-1
       # end if
   else:
       print 'oops!'
   # end if
# end def foobar
</code></pre>

<p>Which is valid python.</p>
"
68061,10470,2008-09-15T23:56:17Z,63086,9,"<p>Emacs! Seriously, its use of ""tab is a <em>command</em>, not a <em>character</em>"", is absolutely perfect for python development.</p>
"
68086,8819,2008-09-16T00:01:11Z,64237,1,"<p>The rule I follow is it should be a new app if I want to reuse the functionality in a different project.</p>

<p>If it needs deep understanding of the models in your project, it's probably more cohesive to stick it with the models.</p>
"
68218,6899,2008-09-16T00:23:53Z,50394,1,"<p>I don't know if gwhois does something special with the server output; however, you can plainly connect to the whois server on port whois (43), send your query, read all the data in the reply and parse them. To make life a little easier, you could use the telnetlib.Telnet class (even if the whois protocol is much simpler than the telnet protocol) instead of plain sockets.</p>

<p>The tricky parts:</p>

<ul>
<li>which whois server will you ask? RIPE, ARIN, APNIC, LACNIC, AFRINIC, JPNIC, VERIO etc LACNIC could be a useful fallback, since they tend to reply with useful data to requests outside of their domain.</li>
<li>what are the exact options and arguments for each whois server? some offer help, others don't. In general, plain domain names work without any special options.</li>
</ul>
"
68320,8819,2008-09-16T00:47:18Z,68282,37,"<p>It's to minimize the difference between methods and functions. It allows you to easily generate methods in metaclasses, or add methods at runtime to pre-existing classes.</p>

<p>e.g.</p>

<pre><code>&gt;&gt;&gt; class C(object):
...     def foo(self):
...         print ""Hi!""
...
&gt;&gt;&gt;
&gt;&gt;&gt; def bar(self):
...     print ""Bork bork bork!""
...
&gt;&gt;&gt;
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; C.bar = bar
&gt;&gt;&gt; c.bar()
Bork bork bork!
&gt;&gt;&gt; c.foo()
Hi!
&gt;&gt;&gt;
</code></pre>

<p>It also (as far as I know) makes the implementation of the python runtime easier.</p>
"
68324,10661,2008-09-16T00:47:55Z,68282,68,"<p>I like to quote Peters' Zen of Python.  ""Explicit is better than implicit.""</p>

<p>In Java and C++, '<code>this.</code>' can be deduced, except when you have variable names that make it impossible to deduce.   So you sometimes need it and sometimes don't.</p>

<p>Python elects to make things like this explicit rather than based on a rule.  </p>

<p>Additionally, since nothing is implied or assumed, parts of the implementation are exposed.  <code>self.__class__</code>, <code>self.__dict__</code> and other ""internal"" structures are available in an obvious way.</p>
"
68329,802,2008-09-16T00:49:26Z,68282,-1,"<p>There is also another very simple answer: according to the <a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""nofollow"">zen of python</a>, ""explicit is better than implicit"".</p>
"
68365,8598,2008-09-16T00:55:43Z,68335,21,"<p>If you want the simple approach, this should work.</p>

<p>You'll want to "".close()"" the file first so you know it's flushed to disk from Python.</p>

<pre><code>import os
os.system(""scp FILE USER@SERVER:PATH"")
#e.g. os.system(""scp foo.bar joe@srvr.net:/path/to/foo.bar"")
</code></pre>

<p>You need to generate (on the source machine) and install (on the destination machine) an ssh key beforehand so that the scp automatically gets authenticated with your public ssh key (in other words, so your script doesn't ask for a password).  </p>

<p><a href=""http://www.modwest.com/help/kb20-90.html"">ssh-keygen example</a></p>
"
68377,9434,2008-09-16T00:56:31Z,68335,-1,"<p>Kind of hacky, but the following should work :)</p>

<pre><code>import os
filePath = ""/foo/bar/baz.py""
serverPath = ""/blah/boo/boom.py""
os.system(""scp ""+filePath+"" user@myserver.com:""+serverPath)
</code></pre>
"
68382,1199,2008-09-16T00:58:49Z,68335,23,"<p>You'd probably use the <a href=""http://docs.python.org/lib/module-subprocess.html"" rel=""nofollow"">subprocess module</a>. Something like this:</p>

<pre><code>import subprocess
p = subprocess.Popen([""scp"", myfile, destination])
sts = os.waitpid(p.pid, 0)
</code></pre>

<p>Where <code>destination</code> is probably of the form <code>user@remotehost:remotepath</code>. Thanks to
@Charles Duffy for pointing out the weakness in my original answer, which used a single string argument to specify the scp operation <code>shell=True</code> - that wouldn't handle whitespace in paths.</p>

<p>The module documentation has <a href=""http://docs.python.org/lib/node536.html"" rel=""nofollow"">examples of error checking that you may want to perform in conjunction with this operation.</a></p>

<p>Ensure that you've set up proper credentials so that you can perform an <a href=""http://www.debian.org/devel/passwordlessssh"" rel=""nofollow"">unattended, passwordless scp between the machines</a>. There is a <a href=""http://stackoverflow.com/questions/7260/how-do-i-setup-public-key-authentication"">stackoverflow question for this already</a>.</p>
"
68455,1694,2008-09-16T01:12:22Z,68327,1,"<p>Sure; just use the <code>bind</code> method to specify the callback after the button has been created.  I've just written and tested the example below.  You can find a nice tutorial on doing this at <a href=""http://www.pythonware.com/library/tkinter/introduction/events-and-bindings.htm"" rel=""nofollow"">http://www.pythonware.com/library/tkinter/introduction/events-and-bindings.htm</a></p>

<pre><code>from Tkinter import Tk, Button

root = Tk()
button = Button(root, text=""Click Me!"")
button.pack()

def callback(event):
    print ""Hello World!""

button.bind(""&lt;Button-1&gt;"", callback)
root.mainloop()
</code></pre>
"
68472,10710,2008-09-16T01:15:16Z,68282,10,"<p>Python doesn't force you on using ""self"". You can give it whatever name you want. You just have to remember that the first argument in a method definition header is a reference to the object.</p>
"
68502,3560,2008-09-16T01:21:20Z,68477,18,"<p>Yes. You'd use the <code>urllib2</code> module, and encode using the <code>multipart/form-data</code> content type. Here is some sample code to get you started -- it's a bit more than just file uploading, but you should be able to read through it and see how it works:</p>

<pre><code>user_agent = ""image uploader""
default_message = ""Image $current of $total""

import logging
import os
from os.path import abspath, isabs, isdir, isfile, join
import random
import string
import sys
import mimetypes
import urllib2
import httplib
import time
import re

def random_string (length):
    return ''.join (random.choice (string.letters) for ii in range (length + 1))

def encode_multipart_data (data, files):
    boundary = random_string (30)

    def get_content_type (filename):
    	return mimetypes.guess_type (filename)[0] or 'application/octet-stream'

    def encode_field (field_name):
    	return ('--' + boundary,
    	        'Content-Disposition: form-data; name=""%s""' % field_name,
    	        '', str (data [field_name]))

    def encode_file (field_name):
    	filename = files [field_name]
    	return ('--' + boundary,
    	        'Content-Disposition: form-data; name=""%s""; filename=""%s""' % (field_name, filename),
    	        'Content-Type: %s' % get_content_type(filename),
    	        '', open (filename, 'rb').read ())

    lines = []
    for name in data:
    	lines.extend (encode_field (name))
    for name in files:
    	lines.extend (encode_file (name))
    lines.extend (('--%s--' % boundary, ''))
    body = '\r\n'.join (lines)

    headers = {'content-type': 'multipart/form-data; boundary=' + boundary,
               'content-length': str (len (body))}

    return body, headers

def send_post (url, data, files):
    req = urllib2.Request (url)
    connection = httplib.HTTPConnection (req.get_host ())
    connection.request ('POST', req.get_selector (),
                        *encode_multipart_data (data, files))
    response = connection.getresponse ()
    logging.debug ('response = %s', response.read ())
    logging.debug ('Code: %s %s', response.status, response.reason)

def make_upload_file (server, thread, delay = 15, message = None,
                      username = None, email = None, password = None):

    delay = max (int (delay or '0'), 15)

    def upload_file (path, current, total):
    	assert isabs (path)
    	assert isfile (path)

    	logging.debug ('Uploading %r to %r', path, server)
    	message_template = string.Template (message or default_message)

    	data = {'MAX_FILE_SIZE': '3145728',
    	        'sub': '',
    	        'mode': 'regist',
    	        'com': message_template.safe_substitute (current = current, total = total),
    	        'resto': thread,
    	        'name': username or '',
    	        'email': email or '',
    	        'pwd': password or random_string (20),}
    	files = {'upfile': path}

    	send_post (server, data, files)

    	logging.info ('Uploaded %r', path)
    	rand_delay = random.randint (delay, delay + 5)
    	logging.debug ('Sleeping for %.2f seconds------------------------------\n\n', rand_delay)
    	time.sleep (rand_delay)

    return upload_file

def upload_directory (path, upload_file):
    assert isabs (path)
    assert isdir (path)

    matching_filenames = []
    file_matcher = re.compile (r'\.(?:jpe?g|gif|png)$', re.IGNORECASE)

    for dirpath, dirnames, filenames in os.walk (path):
    	for name in filenames:
    		file_path = join (dirpath, name)
    		logging.debug ('Testing file_path %r', file_path)
    		if file_matcher.search (file_path):
    			matching_filenames.append (file_path)
    		else:
    			logging.info ('Ignoring non-image file %r', path)

    total_count = len (matching_filenames)
    for index, file_path in enumerate (matching_filenames):
    	upload_file (file_path, index + 1, total_count)

def run_upload (options, paths):
    upload_file = make_upload_file (**options)

    for arg in paths:
    	path = abspath (arg)
    	if isdir (path):
    		upload_directory (path, upload_file)
    	elif isfile (path):
    		upload_file (path)
    	else:
    		logging.error ('No such path: %r' % path)

    logging.info ('Done!')
</code></pre>
"
68507,10322,2008-09-16T01:22:03Z,68477,1,"<p>This <a href=""http://code.activestate.com/recipes/146306/"" rel=""nofollow"">code</a> might be of use to you</p>
"
68524,145,2008-09-16T01:24:37Z,68327,12,"<p>Though <a href=""http://stackoverflow.com/questions/68327/change-command-method-for-tkinter-button-in-python#68455"">Eli Courtwright's</a> program will work fine¹, what you really seem to want though is just a way to reconfigure after instantiation any attribute which you could have set when you instantiated².  How you do so is by way of the configure() method.</p>

<pre><code>from Tkinter import Tk, Button

def goodbye_world():
    print ""Goodbye World!\nWait, I changed my mind!""
    button.configure(text = ""Hello World!"", command=hello_world)

def hello_world():
    print ""Hello World!\nWait, I changed my mind!""
    button.configure(text = ""Goodbye World!"", command=goodbye_world)

root = Tk()
button = Button(root, text=""Hello World!"", command=hello_world)
button.pack()

root.mainloop()
</code></pre>

<p>¹ ""fine"" if you use only the mouse; if you care about tabbing and using [Space] or [Enter] on buttons, then you will have to implement (duplicating existing code) keypress events too. Setting the <code>command</code> option through <code>.configure</code> is much easier.</p>

<p>² the only attribute that can't change after instantiation is <code>name</code>.</p>
"
68566,NA,2008-09-16T01:32:08Z,68335,10,"<p>There are a couple of different ways to approach the problem:</p>

<ol>
<li>Wrap command-line programs</li>
<li>use a Python library that provides SSH capabilities (eg - <a href=""http://www.lag.net/paramiko/"">Paramiko</a> or <a href=""http://twistedmatrix.com/trac/wiki/TwistedConch"">Twisted Conch</a>)</li>
</ol>

<p>Each approach has its own quirks. You will need to setup SSH keys to enable password-less logins if you are wrapping system commands like ""ssh"", ""scp"" or ""rsync."" You can embed a password in a script using Paramiko or some other library, but you might find the lack of documentation frustrating, especially if you are not familiar with the basics of the SSH connection (eg - key exchanges, agents, etc). It probably goes without saying that SSH keys are almost always a better idea than passwords for this sort of stuff.</p>

<p>NOTE: its hard to beat rsync if you plan on transferring files via SSH, especially if the alternative is plain old scp.</p>

<p>I've used Paramiko with an eye towards replacing system calls but found myself drawn back to the wrapped commands due to their ease of use and immediate familiarity. You might be different. I gave Conch the once-over some time ago but it didn't appeal to me.</p>

<p>If opting for the system-call path, Python offers an array of options such as os.system or the commands/subprocess modules. I'd go with the subprocess module if using version 2.4+.</p>
"
68628,10769,2008-09-16T01:43:04Z,67631,9,"<pre><code>def import_file(full_path_to_module):
    try:
        import os
        module_dir, module_file = os.path.split(full_path_to_module)
        module_name, module_ext = os.path.splitext(module_file)
        save_cwd = os.getcwd()
        os.chdir(module_dir)
        module_obj = __import__(module_name)
        module_obj.__file__ = full_path_to_module
        globals()[module_name] = module_obj
        os.chdir(save_cwd)
    except:
        raise ImportError

import_file('/home/somebody/somemodule.py')
</code></pre>
"
68638,10322,2008-09-16T01:45:39Z,68630,1,"<p>Tuples should be slightly more efficient and because of that, faster, than lists because they are immutable.</p>
"
68672,1199,2008-09-16T01:51:06Z,68645,1030,"<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>

<pre><code>&gt;&gt;&gt; class MyClass:
...     i = 3
...
&gt;&gt;&gt; MyClass.i
3 
</code></pre>

<p>As @<a href=""http://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067"">millerdev</a> points out, this creates a class-level ""i"" variable, but this is distinct from any instance-level ""i"" variable, so you could have</p>

<pre><code>&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.i = 4
&gt;&gt;&gt; MyClass.i, m.i
&gt;&gt;&gt; (3, 4)
</code></pre>

<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>

<p>See <a href=""https://docs.python.org/2/tutorial/classes.html#class-objects"">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>

<p>@Steve Johnson has already answered regarding <a href=""http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod"">static methods</a>, also documented under <a href=""https://docs.python.org/2/library/functions.html#staticmethod"">""Built-in Functions"" in the Python Library Reference</a>.</p>

<pre><code>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</code></pre>

<p>@beidy recommends <a href=""https://docs.python.org/2/library/functions.html#classmethod"">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument, but I'm still a little fuzzy on the advantages of this approach over staticmethod. If you are too, then it probably doesn't matter.</p>
"
68702,10769,2008-09-16T01:55:09Z,63086,36,"<pre><code>from __future__ import braces
</code></pre>
"
68712,3002,2008-09-16T01:57:10Z,68630,131,"<p>In general, you might expect tuples to be slightly faster. However you should definitely test your specific case (if the difference might impact the performance of your program --  remember ""premature optimization is the root of all evil"").</p>

<p>Python makes this very easy: <a href=""https://docs.python.org/2/library/timeit.html"">timeit</a> is your friend.</p>

<pre><code>$ python -m timeit ""x=(1,2,3,4,5,6,7,8)""
10000000 loops, best of 3: 0.0388 usec per loop

$ python -m timeit ""x=[1,2,3,4,5,6,7,8]""
1000000 loops, best of 3: 0.363 usec per loop
</code></pre>

<p>and...</p>

<pre><code>$ python -m timeit -s ""x=(1,2,3,4,5,6,7,8)"" ""y=x[3]""
10000000 loops, best of 3: 0.0938 usec per loop

$ python -m timeit -s ""x=[1,2,3,4,5,6,7,8]"" ""y=x[3]""
10000000 loops, best of 3: 0.0649 usec per loop
</code></pre>

<p>So in this case, instantiation is almost an order of magnitude faster for the tuple, but item access is actually somewhat faster for the list! So if you're creating a few tuples and accessing them many many times, it may actually be faster to use lists instead.</p>

<p>Of course if you want to <em>change</em> an item, the list will definitely be faster since you'd need to create an entire new tuple to change one item of it (since tuples are immutable).</p>
"
68747,10739,2008-09-16T02:02:45Z,68645,9,"<p>Personally I would use a classmethod whenever I needed a static method. Mainly because I get the class as an argument.</p>

<pre><code>class myObj(object):
   def myMethod(cls)
     ...
   myMethod = classmethod(myMethod)
</code></pre>

<p>or use a decorator</p>

<pre><code>class myObj(object):
   @classmethod
   def myMethod(cls)
</code></pre>

<p>For static properties.. Its time you look up some python definition.. variable can always change. There are two types of them mutable and immutable.. Also, there are class attributes and instance attributes.. Nothing really like static attributes in the sense of java &amp; c++</p>

<p>Why use static method in pythonic sense, if it has no relation whatever to the class! If I were you, I'd either use classmethod or define the method independent from the class.</p>
"
68770,1943957,2008-09-16T02:05:49Z,68645,5,"<p>Static methods in python are called <a href=""http://pyref.infogami.com/classmethod"" rel=""nofollow"">classmethod</a>s. Take a look at the following code</p>

<pre><code>class MyClass:
    def myInstanceMethod(self):
        print 'output from an instance method'
    @classmethod
    def myStaticMethod(cls):
        print 'output from a static method'
MyClass.myInstanceMethod()

Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: unbound method myInstanceMethod() must be called [...]
MyClass.myStaticMethod()
</code></pre>

<p>output from a static method</p>

<p>Notice that when we call the method <em>myInstanceMethod</em>, we get an error. This is because it requires that method be called on an instance of this class. The method <em>myStaticMethod</em> is set as a classmethod using the <a href=""http://www.python.org/dev/peps/pep-0318/"" rel=""nofollow"">decorator</a> <em>@classmethod</em>.</p>

<p>Just for kicks and giggles, we could call <em>myInstanceMethod</em> on the class by passing in an instance of the class, like so:</p>

<pre><code>&gt;&gt;&gt; MyClass.myInstanceMethod(MyClass())
output from an instance method
</code></pre>
"
68796,2128,2008-09-16T02:09:46Z,68774,55,"<p>Opening sockets in python is pretty simple. You really just need something like this:</p>

<pre><code>import socket
sock = socket.socket()
sock.connect((address, port))
</code></pre>

<p>and then you can <code>send()</code> and <code>recv()</code> like any other socket</p>
"
68817,116,2008-09-16T02:13:29Z,68630,88,"<p>The <a href=""https://docs.python.org/3/library/dis.html""><code>dis</code></a> module disassembles the byte code for a function and is useful to see the difference between tuples and lists.</p>

<p>In this case, you can see that accessing an element generates identical code, but that assigning a tuple is much faster than assigning a list.</p>

<pre><code>&gt;&gt;&gt; def a():
...     x=[1,2,3,4,5]
...     y=x[2]
...
&gt;&gt;&gt; def b():
...     x=(1,2,3,4,5)
...     y=x[2]
...
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(a)
  2           0 LOAD_CONST               1 (1)
              3 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 (3)
              9 LOAD_CONST               4 (4)
             12 LOAD_CONST               5 (5)
             15 BUILD_LIST               5
             18 STORE_FAST               0 (x)

  3          21 LOAD_FAST                0 (x)
             24 LOAD_CONST               2 (2)
             27 BINARY_SUBSCR
             28 STORE_FAST               1 (y)
             31 LOAD_CONST               0 (None)
             34 RETURN_VALUE
&gt;&gt;&gt; dis.dis(b)
  2           0 LOAD_CONST               6 ((1, 2, 3, 4, 5))
              3 STORE_FAST               0 (x)

  3           6 LOAD_FAST                0 (x)
              9 LOAD_CONST               2 (2)
             12 BINARY_SUBSCR
             13 STORE_FAST               1 (y)
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE
</code></pre>
"
68892,6043,2008-09-16T02:28:38Z,68774,9,"<p>For developing portable network programs of any sort in Python, <a href=""http://twistedmatrix.com"" rel=""nofollow"">Twisted</a> is quite useful. One of its benefits is providing a convenient layer above low-level socket APIs.</p>
"
68911,5324,2008-09-16T02:31:24Z,68774,13,"<p>OK, this code worked</p>

<pre><code>s = socket.socket()
s.connect((ip,port))
s.send(""my request\r"")
print s.recv(256)
s.close()
</code></pre>

<p>It was quite difficult to work that out from the Python socket module documentation. So I'll accept The.Anti.9's answer.</p>
"
69064,10688,2008-09-16T03:03:31Z,63086,0,"<p>Check the options of your editor or find an editor/IDE that allows you to convert TABs to spaces. I usually set the options of my editor to substitute the TAB character with 4 spaces, and I never run into any problems.</p>
"
69067,10840,2008-09-16T03:04:08Z,68645,400,"<p>@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or ""static"" variables:</p>

<pre><code>&gt;&gt;&gt; class Test(object):
...     i = 3
...
&gt;&gt;&gt; Test.i
3
</code></pre>

<p>There are a few gotcha's here. Carrying on from the example above:</p>

<pre><code>&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; t.i     # static variable accessed via instance
3
&gt;&gt;&gt; t.i = 5 # but if we assign to the instance ...
&gt;&gt;&gt; Test.i  # we have not changed the static variable
3
&gt;&gt;&gt; t.i     # we have overwritten Test.i on t by creating a new attribute t.i
5
&gt;&gt;&gt; Test.i = 6 # to change the static variable we do it by assigning to the class
&gt;&gt;&gt; t.i
5
&gt;&gt;&gt; Test.i
6
&gt;&gt;&gt; u = Test()
&gt;&gt;&gt; u.i
6           # changes to t do not affect new instances of Test

# Namespaces are one honking great idea -- let's do more of those!
&gt;&gt;&gt; Test.__dict__
{'i': 6, ...}
&gt;&gt;&gt; t.__dict__
{'i': 5}
&gt;&gt;&gt; u.__dict__
{}
</code></pre>

<p>Notice how the instance variable <code>t.i</code> got out of sync with the ""static"" class variable when the attribute <code>i</code> was set directly on <code>t</code>. This is because <code>i</code> was re-bound within the <code>t</code> namespace, which is distinct from the <code>Test</code> namespace. If you want to change the value of a ""static"" variable, you must change it within the scope (or object) where it was originally defined. I put ""static"" in quotes because Python does not really have static variables in the sense that C++ and Java do.</p>

<p>Although it doesn't say anything specific about static variables or methods, the <a href=""http://docs.python.org/tut/"">Python tutorial</a> has some relevant information on <a href=""https://docs.python.org/2/tutorial/classes.html"">classes and class objects</a>. </p>

<p>@Steve Johnson also answered regarding static methods, also documented under ""Built-in Functions"" in the Python Library Reference.</p>

<pre><code>class Test(object):
    @staticmethod
    def f(arg1, arg2, ...):
        ...
</code></pre>

<p>@beid also mentioned classmethod, which is similar to staticmethod. A classmethod's first argument is the class object. Example:</p>

<pre><code>class Test(object):
    i = 3 # class (or static) variable
    @classmethod
    def g(cls, arg):
        # here we can use 'cls' instead of the class name (Test)
        if arg &gt; cls.i:
            cls.i = arg # would the the same as  Test.i = arg1
</code></pre>
"
69513,5728,2008-09-16T05:01:08Z,68541,3,"<p>Check your path (run 'echo $PATH')</p>
"
69596,4966,2008-09-16T05:27:59Z,68335,76,"<p>To do this in Python (i.e. not wrapping scp through subprocess.Popen or similar) with the <a href=""http://www.lag.net/paramiko/"">Paramiko</a> library, you would do something like this:</p>

<pre><code>import os
import paramiko

ssh = paramiko.SSHClient() 
ssh.load_host_keys(os.path.expanduser(os.path.join(""~"", "".ssh"", ""known_hosts"")))
ssh.connect(server, username=username, password=password)
sftp = ssh.open_sftp()
sftp.put(localpath, remotepath)
sftp.close()
ssh.close()
</code></pre>

<p>(You would probably want to deal with unknown hosts, errors, creating any directories necessary, and so on).</p>
"
69867,11265,2008-09-16T06:41:51Z,60152,3,"<p>The <a href=""https://developer.mozilla.org/en/PyXPCOM"" rel=""nofollow"">PyXPCOM extension</a> is one possibility.</p>

<p>But looking at what firewatir provides, I have to 2nd the suggestion for twill. It's based on <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow"">mechanize</a>, which might also be useful in this context.</p>
"
69989,5190,2008-09-16T07:10:04Z,69979,1,"<p>You could use HTTP Authentication, if supported.</p>

<p>You'd have to add SSL, as all methods, POST, GET and HTTP Auth (well, except Digest HHTP authentication) send plaintext.</p>

<p>GET is basically just like POST, it just has a limit on the amount of data you can send which is usually a lot smaller than POST and a semantic difference which makes GET not a good candidate from that point of view, even if technically they both can do it.</p>

<p>As for examples, what are you using? There are many choices in Python, like the cgi module or some framework like Django, CherryPy, and so on</p>
"
69995,10943,2008-09-16T07:10:40Z,69979,5,"<p>You can actually do it all with GET methods.  However, you'll want to use a full challenge response protocol for the logins.  (You can hash on the client side using javascript.  You just need to send out a unique challenge each time.)  You'll also want to use SSL to ensure that no one can see the strings as they go across.</p>

<p>In some senses there's no real security difference between GET and POST requests as they both go across in plaintext, in other senses and in practice... GET is are a hell of a lot easier to intercept and is all over most people's logs and your web browser's history. :)</p>

<p>(Or as suggested by the other posters, use a different method entirely like HTTP auth, digest auth or some higher level authentication scheme like AD, LDAP, kerberos or shib.  However I kinda assumed that if you didn't have POST you wouldn't have these either.)</p>
"
70003,11192,2008-09-16T07:12:42Z,69979,0,"<p>With a bit of JavaScript, you could have the client hash the entered password and a server-generated nonce, and use that in an HTTP GET.</p>
"
70025,83819,2008-09-16T07:19:07Z,69979,-1,"<p>Logging in securely is very subjective.  Full 'security' is not easy to achieve (if at all possible...debatable). However, you can come close.  </p>

<p>If POST is not an option, maybe you can use a directory security method such as .htaccess or windows authentication depending on what system you're on.</p>

<p>Both of the above will get you the pop-up window that allows for a username and password to be entered.</p>

<p>To use POST as the method to send the login credentials, you'd just use an HTML form with method=""post"" and retrieve the information from, say, a PHP or ASP page, using the $_POST['varname'] method in PHP or the request.form(""varname"") method in ASP.  From the PHP or ASP page, as an example, you can do a lookup in a database of users, to see if that username/password combination exists, and if so, redirect them to the appropriate page.</p>

<p>As reference, use <a href=""http://www.w3schools.com/ASP/showasp.asp?filename=demo_simpleform"" rel=""nofollow"">http://www.w3schools.com/ASP/showasp.asp?filename=demo_simpleform</a> for the HTML/ASP portion</p>
"
70051,3978,2008-09-16T07:24:13Z,69645,3,"<p>A short search turned up <a href=""http://www.flagar.com/en/software/gtkshots"" rel=""nofollow"">gtkShots</a> looks like it might help you, as it's a GPLed python screenshot program, so should have what you need in it.</p>
"
70145,11181,2008-09-16T07:44:03Z,69979,0,"<p>A good choice: <a href=""http://advosys.ca/viewpoints/2006/08/http-digest-authentication/"" rel=""nofollow"">HTTP Digest authentication</a></p>

<p>Harder to pull off well, but an option: <a href=""http://blog.paranoidferret.com/index.php/2007/07/22/secure-authentication-without-ssl-using-javascript/"" rel=""nofollow"">Client-side hashing with Javascript</a></p>
"
70237,37141,2008-09-16T08:01:18Z,69645,7,"<pre><code>import ImageGrab
img = ImageGrab.grab()
img.save('test.jpg','JPEG')
</code></pre>

<p>this requires Python Imaging Library</p>
"
70271,10708,2008-09-16T08:10:50Z,48458,96,"<p>First, I would suggest you have a look at ""<a href=""http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine"">Rapid Development with Python, Django, and Google App Engine</a>""</p>

<p>GvR describes a general/standard project layout on page 10 of his <a href=""http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine/rapid_development_with_django_gae.pdf?attredirects=0"">slide presentation</a>.  </p>

<p>Here I'll post a slightly modified version of the layout/structure from that page. I pretty much follow this pattern myself. You also mentioned you had trouble with packages. Just make sure each of your sub folders has an __init__.py file. It's ok if its empty.</p>

<h2>Boilerplate files</h2>

<ul>
<li>These hardly vary between projects</li>
<li>app.yaml: direct all non-static requests to main.py </li>
<li>main.py: initialize app and send it all requests </li>
</ul>

<h2>Project lay-out</h2>

<ul>
<li>static/*: static files; served directly by App Engine</li>
<li>myapp/*.py: app-specific python code
<ul>
<li>views.py, models.py, tests.py, __init__.py, and more</li>
</ul></li>
<li>templates/*.html: templates (or myapp/templates/*.html)</li>
</ul>

<p>Here are some code examples that may help as well:</p>

<h2>main.py</h2>

<pre><code>import wsgiref.handlers

from google.appengine.ext import webapp
from myapp.views import *

application = webapp.WSGIApplication([
  ('/', IndexHandler),
  ('/foo', FooHandler)
], debug=True)

def main():
  wsgiref.handlers.CGIHandler().run(application)
</code></pre>

<h2>myapp/views.py</h2>

<pre><code>import os
import datetime
import logging
import time

from google.appengine.api import urlfetch
from google.appengine.ext.webapp import template
from google.appengine.api import users
from google.appengine.ext import webapp
from models import *

class IndexHandler(webapp.RequestHandler):
  def get(self):
    date = ""foo""
    # Do some processing		
    template_values = {'data': data }
    path = os.path.join(os.path.dirname(__file__) + '/../templates/', 'main.html')
    self.response.out.write(template.render(path, template_values))

class FooHandler(webapp.RequestHandler):
  def get(self):
    #logging.debug(""start of handler"")
</code></pre>

<h2>myapp/models.py</h2>

<pre><code>from google.appengine.ext import db

class SampleModel(db.Model):
</code></pre>

<p>I think this layout works great for new and relatively small to medium projects. For larger projects I would suggest breaking up the views and models to have their own sub-folders with something like:</p>

<h2>Project lay-out</h2>

<ul>
<li>static/: static files; served directly by App Engine
<ul>
<li>js/*.js</li>
<li>images/*.gif|png|jpg</li>
<li>css/*.css</li>
</ul></li>
<li>myapp/: app structure
<ul>
<li>models/*.py</li>
<li>views/*.py</li>
<li>tests/*.py</li>
<li>templates/*.html: templates</li>
</ul></li>
</ul>
"
70555,11387,2008-09-16T09:03:45Z,70528,116,"<p>From <a href=""http://www.faqs.org/docs/diveintopython/fileinfo_private.html"">http://www.faqs.org/docs/diveintopython/fileinfo_private.html</a></p>

<blockquote>
  <p>Strictly speaking, private methods are
  accessible outside their class, just
  not easily accessible. Nothing in
  Python is truly private; internally,
  the names of private methods and
  attributes are mangled and unmangled
  on the fly to make them seem
  inaccessible by their given names. You
  can access the __parse method of the
  MP3FileInfo class by the name
  _MP3FileInfo__parse. Acknowledge that this is interesting, then promise to
  never, ever do it in real code.
  Private methods are private for a
  reason, but like many other things in
  Python, their privateness is
  ultimately a matter of convention, not
  force.</p>
</blockquote>
"
70562,1733,2008-09-16T09:04:57Z,70528,24,"<p>It's not like you absolutly can't get around privateness of members in any language (pointer arithmetics in C++, Reflections in .NET/Java).</p>

<p>The point is that you get an error if you try to call the private method by accident. But if you want to shoot yourself in the foot, go ahead and do it.</p>

<p>Edit: You don't try to secure your stuff by OO-encapsulation, do you?</p>
"
70567,1026,2008-09-16T09:05:52Z,70528,9,"<p>The <code>class.__stuff</code> naming convention lets the programmer know he isn't meant to access <code>__stuff</code> from outside. The name mangling makes it unlikely anyone will do it by accident.</p>

<p>True, you still can work around this, it's even easier than in other languages (which BTW also let you do this), but no Python programmer would do this if he cares about encapsulation.</p>
"
70583,10322,2008-09-16T09:09:32Z,70528,10,"<p>Its just one of those language design choices. On some level they are justified. They make it so you need to go pretty far out of your way to try and call the method, and if you really need it that badly, you must have a pretty good reason! Debugging hooks and testing come to mind as possible applications, used responsibly of course.</p>
"
70712,6267,2008-09-16T09:27:28Z,70653,3,"<p>I think you should make your own authentication method as you can make it fit your application best but use a library for encryption, such as <a href=""http://www.pycrypto.org"" rel=""nofollow"">pycrypto</a> or some other more lightweight library.</p>

<p>btw, if you need windows binaries for pycrypto you can get them <a href=""http://www.voidspace.org.uk/python/modules.shtml#pycrypto"" rel=""nofollow"">here</a></p>
"
70736,4966,2008-09-16T09:33:18Z,70528,66,"<p>The phrase commonly used is ""we're all consenting adults here"".  By prepending a single underscore (don't expose) or double underscore (hide), you're telling the user of your class that you intend the member to be 'private' in some way.  However, you're trusting everyone else to behave responsibly and respect that, unless they have a compelling reason not to (e.g. debuggers, code completion).</p>

<p>If you truly must have something that is private, then you can implement it in an extension (e.g. in C for CPython).  In most cases, however, you simply learn the Pythonic way of doing things.</p>
"
70778,11521,2008-09-16T09:41:03Z,11060,0,"<p>Just wanted to point out that you can still achieve fine-grained testing while verifying the results: you can test individual chunks of code by nesting them inside some setup and verification code:</p>

<pre><code>int x = 0;
GENERATED_CODE
assert(x == 100);
</code></pre>

<p>Provided you have your generated code assembled from smaller chunks, and the chunks do not change frequently, you can exercise more conditions and test a little better, and hopefully avoid having all your tests break when you change specifics of one chunk.</p>
"
70798,1856916,2008-09-16T09:45:06Z,49926,13,"<p>The open source Python package,<a href=""http://www.scipy.org/"">SciPy</a>, has quite a large set of optimization routines including some for multivariable problems with constraints (which is what fmincon does I believe).  Once you have SciPy installed type the following at the Python command prompt</p>

<p>help(scipy.optimize)</p>

<p>The resulting document is extensive and includes the following which I believe might be of use to you.</p>

<pre><code>   Constrained Optimizers (multivariate)

   fmin_l_bfgs_b -- Zhu, Byrd, and Nocedal's L-BFGS-B constrained optimizer
                      (if you use this please quote their papers -- see help)

   fmin_tnc      -- Truncated Newton Code originally written by Stephen Nash and
                      adapted to C by Jean-Sebastien Roy.

   fmin_cobyla   -- Constrained Optimization BY Linear Approximation
</code></pre>
"
70814,11530,2008-09-16T09:48:16Z,70797,296,"<pre><code>var = raw_input(""Please enter something: "")
print ""you entered"", var
</code></pre>
"
70818,3171,2008-09-16T09:48:40Z,70797,22,"<p>The best way to process command line arguments is the <a href=""https://docs.python.org/library/argparse.html"" rel=""nofollow""><code>argparse</code> module.</a></p>

<p>Use <code>raw_input()</code> to get user input.  If you import the <a href=""https://docs.python.org/library/readline.html"" rel=""nofollow""><code>readline module</code></a> your users will have line editing and history.</p>
"
70832,4966,2008-09-16T09:50:34Z,70653,0,"<p>If you want simple, then use a dictionary where the keys are the usernames and the values are the passwords (encrypted with something like SHA256).  <a href=""http://docs.python.org/lib/module-pickle.html"" rel=""nofollow"">Pickle</a> it to/from disk (as this is a desktop application, I'm assuming the overhead of keeping it in memory will be negligible).</p>

<p>For example:</p>

<pre><code>import pickle
import hashlib

# Load from disk
pwd_file = ""mypasswords""
if os.path.exists(pwd_file):
    pwds = pickle.load(open(pwd_file, ""rb""))
else:
    pwds = {}

# Save to disk
pickle.dump(pwds, open(pwd_file, ""wb""))

# Add password
pwds[username] = hashlib.sha256(password).hexdigest()

# Check password
if pwds[username] = hashlib.sha256(password).hexdigest():
   print ""Good""
else:
   print ""No match""
</code></pre>

<p>Note that this stores the passwords as a <a href=""http://docs.python.org/lib/module-hashlib.html"" rel=""nofollow"">hash</a> - so they are essentially unrecoverable.  If you lose your password, you'd get allocated a new one, not get the old one back.</p>
"
70833,8570,2008-09-16T09:50:40Z,70797,182,"<p>To read user input you can try <a href=""http://docs.python.org/2/library/cmd.html"">the cmd module</a> for easily creating a mini-command line interpreter (with help texts and autocompletion) and <a href=""http://docs.python.org/2/library/functions.html#raw_input"">raw_input</a> for less fancy stuff (just reading a line of text from the user).</p>

<p>Command line inputs are in sys.argv. Try this in your script for Python 2:</p>

<pre><code>import sys
print sys.argv
</code></pre>

<p>For Python 3:</p>

<pre><code>import sys
print(sys.argv)
</code></pre>

<p>Since print has changed from a keyword in Python 2 into a function call in Python 3. </p>

<p>There are two modules for parsing command line options: <a href=""http://docs.python.org/2/library/optparse.html"">optparse</a> and <a href=""http://docs.python.org/2/library/getopt.html"">getopt</a>. If you just want to input files to your script, behold the power of <a href=""http://docs.python.org/2/library/fileinput.html"">fileinput</a>.</p>

<p>The <a href=""http://docs.python.org/2/library/"">Python library reference is your friend</a>.</p>
"
70841,6063,2008-09-16T09:52:24Z,70797,5,"<p>Use 'raw_input' for input from a console/terminal.</p>

<p>if you just want a command line argument like a file name or something e.g. </p>

<pre><code>$ python my_prog.py file_name.txt
</code></pre>

<p>then you can use sys.argv...</p>

<pre><code>import sys
print sys.argv
</code></pre>

<p>sys.argv is a list where 0 is the program name, so in the above example sys.argv[1] would be ""file_name.txt""</p>

<p>If you want to have full on command line options use the optparse module.</p>

<p>Pev</p>
"
70869,11234,2008-09-16T09:58:33Z,70797,10,"<p>Careful not to use the <code>input</code> function, unless you know what you're doing. Unlike <code>raw_input</code>, <code>input</code> will accept any python expression, so it's kinda like <code>eval</code></p>
"
70895,3978,2008-09-16T10:04:43Z,68541,0,"<p>I would suspect the permissions on the library. Can you do a strace or similar to find out the filenames it's looking for, and then check the permissions on them?</p>
"
70896,917,2008-09-16T10:04:53Z,70681,2,"<p>I think your code looks like this at the moment:</p>

<pre><code>l = ""a very long ... text"".split()
for e in l:
    cursor.execute(""INSERT INTO yourtable (yourcol) VALUES ('"" + e + ""')"")
</code></pre>

<p>So try to change it into something like this:</p>

<pre><code>l = ""a very long ... text"".split()
for e in l:
    cursor.execute(""INSERT INTO yourtable (yourcol) VALUES (%s)"", (e,))
</code></pre>

<p>so never forget to pass your parameters in the parameters list, then you don't have to care about your quotes and stuff, it is also more secure. You can read more about it at <a href=""http://www.python.org/dev/peps/pep-0249/"" rel=""nofollow"">http://www.python.org/dev/peps/pep-0249/</a></p>

<p>also have a look there at the method .executemany() which is specially designed to execute the same statement multiple times.</p>
"
70900,9464,2008-09-16T10:06:07Z,70528,354,"<p>The name scrambling is used to ensure that subclasses don't accidentally override the private methods and attributes of their superclasses. It's not designed to prevent deliberate access from outside.</p>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...         self.__baz = 42
...     def foo(self):
...         print self.__baz
...     
&gt;&gt;&gt; class Bar(Foo):
...     def __init__(self):
...         super(Bar, self).__init__()
